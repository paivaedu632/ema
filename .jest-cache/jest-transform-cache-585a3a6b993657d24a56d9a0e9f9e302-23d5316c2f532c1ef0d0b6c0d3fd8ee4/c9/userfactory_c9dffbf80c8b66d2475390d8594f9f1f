ebbeb3074429efe461257229a64d3815
"use strict";
/**
 * Test User Factory
 * Creates test users with Supabase Auth tokens for testing
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.userFactory = exports.UserFactory = void 0;
const supabase_js_1 = require("@supabase/supabase-js");
const crypto_1 = require("crypto");
class UserFactory {
    constructor() {
        this.createdUsers = [];
        // Initialize Supabase clients
        this.supabaseAdmin = (0, supabase_js_1.createClient)(global.testConfig.supabaseUrl, global.testConfig.supabaseServiceKey, {
            auth: {
                autoRefreshToken: false,
                persistSession: false
            }
        });
        this.supabaseClient = (0, supabase_js_1.createClient)(global.testConfig.supabaseUrl, global.testConfig.supabaseAnonKey);
    }
    /**
     * Generate a secure random password
     */
    generatePassword() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
        let password = '';
        const bytes = (0, crypto_1.randomBytes)(16);
        for (let i = 0; i < 16; i++) {
            password += chars[bytes[i] % chars.length];
        }
        return password;
    }
    /**
     * Generate a test email address
     */
    generateEmail() {
        const timestamp = Date.now();
        const random = Math.random().toString(36).substring(7);
        return `test-${timestamp}-${random}@emapay.test`;
    }
    /**
     * Create a test user with authentication
     */
    async createUser(options = {}) {
        var _a;
        const email = options.email || this.generateEmail();
        const password = options.password || this.generatePassword();
        const emailConfirmed = options.emailConfirmed !== false; // Default to true
        try {
            // Create user using admin API
            const { data: adminData, error: adminError } = await this.supabaseAdmin.auth.admin.createUser({
                email,
                password,
                email_confirm: emailConfirmed,
                user_metadata: Object.assign({ name: `Test User ${Date.now()}`, purpose: 'API Testing', created_for_test: true }, options.metadata)
            });
            if (adminError) {
                throw new Error(`Failed to create user: ${adminError.message}`);
            }
            // Sign in as the user to get session tokens
            const { data: signInData, error: signInError } = await this.supabaseClient.auth.signInWithPassword({
                email,
                password
            });
            if (signInError) {
                throw new Error(`Failed to sign in user: ${signInError.message}`);
            }
            if (!((_a = signInData.session) === null || _a === void 0 ? void 0 : _a.access_token)) {
                throw new Error('No access token received from sign in');
            }
            const testUser = {
                id: adminData.user.id,
                email,
                password,
                accessToken: signInData.session.access_token,
                refreshToken: signInData.session.refresh_token,
                sessionId: signInData.session.user.id, // Use user ID as session identifier
                createdAt: new Date().toISOString()
            };
            // Track created user for cleanup
            this.createdUsers.push(testUser);
            return testUser;
        }
        catch (error) {
            throw new Error(`User creation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
    /**
     * Create multiple test users
     */
    async createUsers(count, options = {}) {
        const users = [];
        for (let i = 0; i < count; i++) {
            const userOptions = Object.assign(Object.assign({}, options), { email: options.email ? `${i}-${options.email}` : undefined });
            const user = await this.createUser(userOptions);
            users.push(user);
        }
        return users;
    }
    /**
     * Refresh a user's access token
     */
    async refreshUserToken(user) {
        var _a;
        try {
            const { data, error } = await this.supabaseClient.auth.refreshSession({
                refresh_token: user.refreshToken
            });
            if (error) {
                throw new Error(`Token refresh failed: ${error.message}`);
            }
            if (!((_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token)) {
                throw new Error('No access token received from refresh');
            }
            // Update user with new tokens
            user.accessToken = data.session.access_token;
            user.refreshToken = data.session.refresh_token;
            return user;
        }
        catch (error) {
            throw new Error(`Token refresh failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
    /**
     * Delete a test user
     */
    async deleteUser(user) {
        try {
            const { error } = await this.supabaseAdmin.auth.admin.deleteUser(user.id);
            if (error) {
                console.warn(`Failed to delete user ${user.id}:`, error.message);
            }
            // Remove from tracking
            this.createdUsers = this.createdUsers.filter(u => u.id !== user.id);
        }
        catch (error) {
            console.warn(`Failed to delete user ${user.id}:`, error);
        }
    }
    /**
     * Clean up all created users
     */
    async cleanup() {
        console.log(`ðŸ§¹ Cleaning up ${this.createdUsers.length} test users...`);
        const deletePromises = this.createdUsers.map(user => this.deleteUser(user));
        await Promise.allSettled(deletePromises);
        this.createdUsers = [];
        console.log('âœ… User cleanup completed');
    }
    /**
     * Get all created users
     */
    getCreatedUsers() {
        return [...this.createdUsers];
    }
    /**
     * Create a user with specific wallet balances
     */
    async createUserWithBalance(eurBalance = 1000, aoaBalance = 500000, options = {}) {
        const user = await this.createUser(options);
        try {
            // Create wallets with initial balances
            await this.supabaseAdmin
                .from('wallets')
                .upsert([
                {
                    user_id: user.id,
                    currency: 'EUR',
                    available_balance: eurBalance,
                    reserved_balance: 0,
                    total_balance: eurBalance
                },
                {
                    user_id: user.id,
                    currency: 'AOA',
                    available_balance: aoaBalance,
                    reserved_balance: 0,
                    total_balance: aoaBalance
                }
            ]);
            console.log(`ðŸ’° Created user ${user.email} with EUR: ${eurBalance}, AOA: ${aoaBalance}`);
        }
        catch (error) {
            console.warn(`Failed to set wallet balances for user ${user.id}:`, error);
        }
        return user;
    }
}
exports.UserFactory = UserFactory;
// Export singleton instance
exports.userFactory = new UserFactory();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,