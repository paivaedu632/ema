{"file":"C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\utils\\user-factory.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\utils\\user-factory.ts"],"sourcesContent":["/**\n * Test User Factory\n * Creates test users with Supabase Auth tokens for testing\n */\n\nimport { createClient } from '@supabase/supabase-js';\nimport { randomBytes } from 'crypto';\n\nexport interface TestUser {\n  id: string;\n  email: string;\n  password: string;\n  accessToken: string;\n  refreshToken: string;\n  sessionId: string;\n  createdAt: string;\n}\n\nexport interface CreateUserOptions {\n  email?: string;\n  password?: string;\n  metadata?: Record<string, any>;\n  emailConfirmed?: boolean;\n}\n\nexport class UserFactory {\n  private supabaseAdmin: any;\n  private supabaseClient: any;\n  private createdUsers: TestUser[] = [];\n\n  constructor() {\n    // Initialize Supabase clients\n    this.supabaseAdmin = createClient(\n      global.testConfig.supabaseUrl,\n      global.testConfig.supabaseServiceKey,\n      {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false\n        }\n      }\n    );\n\n    this.supabaseClient = createClient(\n      global.testConfig.supabaseUrl,\n      global.testConfig.supabaseAnonKey\n    );\n  }\n\n  /**\n   * Generate a secure random password\n   */\n  private generatePassword(): string {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';\n    let password = '';\n    const bytes = randomBytes(16);\n    \n    for (let i = 0; i < 16; i++) {\n      password += chars[bytes[i] % chars.length];\n    }\n    \n    return password;\n  }\n\n  /**\n   * Generate a test email address\n   */\n  private generateEmail(): string {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substring(7);\n    return `test-${timestamp}-${random}@emapay.test`;\n  }\n\n  /**\n   * Create a test user with authentication\n   */\n  async createUser(options: CreateUserOptions = {}): Promise<TestUser> {\n    const email = options.email || this.generateEmail();\n    const password = options.password || this.generatePassword();\n    const emailConfirmed = options.emailConfirmed !== false; // Default to true\n\n    try {\n      // Create user using admin API\n      const { data: adminData, error: adminError } = await this.supabaseAdmin.auth.admin.createUser({\n        email,\n        password,\n        email_confirm: emailConfirmed,\n        user_metadata: {\n          name: `Test User ${Date.now()}`,\n          purpose: 'API Testing',\n          created_for_test: true,\n          ...options.metadata\n        }\n      });\n\n      if (adminError) {\n        throw new Error(`Failed to create user: ${adminError.message}`);\n      }\n\n      // Sign in as the user to get session tokens\n      const { data: signInData, error: signInError } = await this.supabaseClient.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (signInError) {\n        throw new Error(`Failed to sign in user: ${signInError.message}`);\n      }\n\n      if (!signInData.session?.access_token) {\n        throw new Error('No access token received from sign in');\n      }\n\n      const testUser: TestUser = {\n        id: adminData.user.id,\n        email,\n        password,\n        accessToken: signInData.session.access_token,\n        refreshToken: signInData.session.refresh_token,\n        sessionId: signInData.session.user.id, // Use user ID as session identifier\n        createdAt: new Date().toISOString()\n      };\n\n      // Track created user for cleanup\n      this.createdUsers.push(testUser);\n\n      return testUser;\n\n    } catch (error) {\n      throw new Error(`User creation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Create multiple test users\n   */\n  async createUsers(count: number, options: CreateUserOptions = {}): Promise<TestUser[]> {\n    const users: TestUser[] = [];\n    \n    for (let i = 0; i < count; i++) {\n      const userOptions = {\n        ...options,\n        email: options.email ? `${i}-${options.email}` : undefined\n      };\n      \n      const user = await this.createUser(userOptions);\n      users.push(user);\n    }\n    \n    return users;\n  }\n\n  /**\n   * Refresh a user's access token\n   */\n  async refreshUserToken(user: TestUser): Promise<TestUser> {\n    try {\n      const { data, error } = await this.supabaseClient.auth.refreshSession({\n        refresh_token: user.refreshToken\n      });\n\n      if (error) {\n        throw new Error(`Token refresh failed: ${error.message}`);\n      }\n\n      if (!data.session?.access_token) {\n        throw new Error('No access token received from refresh');\n      }\n\n      // Update user with new tokens\n      user.accessToken = data.session.access_token;\n      user.refreshToken = data.session.refresh_token;\n\n      return user;\n\n    } catch (error) {\n      throw new Error(`Token refresh failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Delete a test user\n   */\n  async deleteUser(user: TestUser): Promise<void> {\n    try {\n      const { error } = await this.supabaseAdmin.auth.admin.deleteUser(user.id);\n      \n      if (error) {\n        console.warn(`Failed to delete user ${user.id}:`, error.message);\n      }\n\n      // Remove from tracking\n      this.createdUsers = this.createdUsers.filter(u => u.id !== user.id);\n\n    } catch (error) {\n      console.warn(`Failed to delete user ${user.id}:`, error);\n    }\n  }\n\n  /**\n   * Clean up all created users\n   */\n  async cleanup(): Promise<void> {\n    console.log(`🧹 Cleaning up ${this.createdUsers.length} test users...`);\n    \n    const deletePromises = this.createdUsers.map(user => this.deleteUser(user));\n    await Promise.allSettled(deletePromises);\n    \n    this.createdUsers = [];\n    console.log('✅ User cleanup completed');\n  }\n\n  /**\n   * Get all created users\n   */\n  getCreatedUsers(): TestUser[] {\n    return [...this.createdUsers];\n  }\n\n  /**\n   * Create a user with specific wallet balances\n   */\n  async createUserWithBalance(\n    eurBalance: number = 1000,\n    aoaBalance: number = 500000,\n    options: CreateUserOptions = {}\n  ): Promise<TestUser> {\n    const user = await this.createUser(options);\n\n    try {\n      // Create wallets with initial balances\n      await this.supabaseAdmin\n        .from('wallets')\n        .upsert([\n          {\n            user_id: user.id,\n            currency: 'EUR',\n            available_balance: eurBalance,\n            reserved_balance: 0,\n            total_balance: eurBalance\n          },\n          {\n            user_id: user.id,\n            currency: 'AOA',\n            available_balance: aoaBalance,\n            reserved_balance: 0,\n            total_balance: aoaBalance\n          }\n        ]);\n\n      console.log(`💰 Created user ${user.email} with EUR: ${eurBalance}, AOA: ${aoaBalance}`);\n\n    } catch (error) {\n      console.warn(`Failed to set wallet balances for user ${user.id}:`, error);\n    }\n\n    return user;\n  }\n}\n\n// Export singleton instance\nexport const userFactory = new UserFactory();\n"],"version":3}