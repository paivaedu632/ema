7d8bac28263fdaa13814ed96ef615cb4
"use strict";
/**
 * Wallet Operations Endpoint Tests
 * Tests for /api/v1/wallets/* endpoints
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const utils_1 = require("../utils");
(0, globals_1.describe)('Wallet Operations Endpoints', () => {
    let testUser;
    let userWithBalance;
    (0, globals_1.beforeAll)(async () => {
        // Create test users
        testUser = await utils_1.testUtils.createUser({
            email: 'wallet-test@emapay.test',
            metadata: { purpose: 'Wallet Testing' }
        });
        // Create user with specific balances
        userWithBalance = await utils_1.testUtils.createUserWithBalance({
            email: 'wallet-balance-test@emapay.test',
            metadata: { purpose: 'Wallet Balance Testing' },
            balances: {
                EUR: { available: 1000.50, reserved: 50.25 },
                AOA: { available: 650000.75, reserved: 25000.00 }
            }
        });
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test users
        await utils_1.testUtils.cleanup();
    });
    (0, globals_1.describe)('GET /api/v1/wallets/balance - All Balances', () => {
        (0, globals_1.test)('should return all wallet balances for user with balances', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/balance', userWithBalance);
            const balances = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(balances)).toBe(true);
            (0, globals_1.expect)(balances.length).toBe(2); // EUR and AOA
            // Check EUR balance
            const eurBalance = balances.find((b) => b.currency === 'EUR');
            (0, globals_1.expect)(eurBalance).toBeDefined();
            utils_1.testUtils.assertValidWalletBalance(eurBalance);
            (0, globals_1.expect)(eurBalance.availableBalance).toBe(1000.50);
            (0, globals_1.expect)(eurBalance.reservedBalance).toBe(50.25);
            (0, globals_1.expect)(eurBalance.totalBalance).toBe(1050.75);
            // Check AOA balance
            const aoaBalance = balances.find((b) => b.currency === 'AOA');
            (0, globals_1.expect)(aoaBalance).toBeDefined();
            utils_1.testUtils.assertValidWalletBalance(aoaBalance);
            (0, globals_1.expect)(aoaBalance.availableBalance).toBe(650000.75);
            (0, globals_1.expect)(aoaBalance.reservedBalance).toBe(25000.00);
            (0, globals_1.expect)(aoaBalance.totalBalance).toBe(675000.75);
            // Assert response time
            utils_1.testUtils.assertResponseTime(response, 50);
        });
        (0, globals_1.test)('should return empty balances for new user', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/balance', testUser);
            const balances = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(balances)).toBe(true);
            (0, globals_1.expect)(balances.length).toBe(2); // Should still return EUR and AOA with zero balances
            balances.forEach((balance) => {
                utils_1.testUtils.assertValidWalletBalance(balance);
                (0, globals_1.expect)(balance.availableBalance).toBe(0);
                (0, globals_1.expect)(balance.reservedBalance).toBe(0);
                (0, globals_1.expect)(balance.totalBalance).toBe(0);
                (0, globals_1.expect)(['EUR', 'AOA']).toContain(balance.currency);
            });
        });
        (0, globals_1.test)('should include all required balance fields', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/balance', userWithBalance);
            const balances = utils_1.testUtils.assertSuccessResponse(response, 200);
            balances.forEach((balance) => {
                (0, globals_1.expect)(balance).toHaveProperty('currency');
                (0, globals_1.expect)(balance).toHaveProperty('availableBalance');
                (0, globals_1.expect)(balance).toHaveProperty('reservedBalance');
                (0, globals_1.expect)(balance).toHaveProperty('totalBalance');
                (0, globals_1.expect)(balance).toHaveProperty('lastUpdated');
                // Validate data types
                (0, globals_1.expect)(typeof balance.currency).toBe('string');
                (0, globals_1.expect)(typeof balance.availableBalance).toBe('number');
                (0, globals_1.expect)(typeof balance.reservedBalance).toBe('number');
                (0, globals_1.expect)(typeof balance.totalBalance).toBe('number');
                (0, globals_1.expect)(new Date(balance.lastUpdated)).toBeInstanceOf(Date);
            });
        });
        (0, globals_1.test)('should maintain decimal precision', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/balance', userWithBalance);
            const balances = utils_1.testUtils.assertSuccessResponse(response, 200);
            balances.forEach((balance) => {
                utils_1.testUtils.assertDecimalPrecision(balance.availableBalance, 2);
                utils_1.testUtils.assertDecimalPrecision(balance.reservedBalance, 2);
                utils_1.testUtils.assertDecimalPrecision(balance.totalBalance, 2);
            });
        });
        (0, globals_1.test)('should return consistent balance calculations', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/balance', userWithBalance);
            const balances = utils_1.testUtils.assertSuccessResponse(response, 200);
            balances.forEach((balance) => {
                const calculatedTotal = balance.availableBalance + balance.reservedBalance;
                (0, globals_1.expect)(balance.totalBalance).toBe(calculatedTotal);
            });
        });
    });
    (0, globals_1.describe)('GET /api/v1/wallets/{currency} - Specific Currency', () => {
        (0, globals_1.test)('should return EUR balance', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/EUR', userWithBalance);
            const balance = utils_1.testUtils.assertSuccessResponse(response, 200);
            utils_1.testUtils.assertValidWalletBalance(balance);
            (0, globals_1.expect)(balance.currency).toBe('EUR');
            (0, globals_1.expect)(balance.availableBalance).toBe(1000.50);
            (0, globals_1.expect)(balance.reservedBalance).toBe(50.25);
            (0, globals_1.expect)(balance.totalBalance).toBe(1050.75);
            utils_1.testUtils.assertResponseTime(response, 50);
        });
        (0, globals_1.test)('should return AOA balance', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/AOA', userWithBalance);
            const balance = utils_1.testUtils.assertSuccessResponse(response, 200);
            utils_1.testUtils.assertValidWalletBalance(balance);
            (0, globals_1.expect)(balance.currency).toBe('AOA');
            (0, globals_1.expect)(balance.availableBalance).toBe(650000.75);
            (0, globals_1.expect)(balance.reservedBalance).toBe(25000.00);
            (0, globals_1.expect)(balance.totalBalance).toBe(675000.75);
        });
        (0, globals_1.test)('should return zero balance for new user', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/EUR', testUser);
            const balance = utils_1.testUtils.assertSuccessResponse(response, 200);
            utils_1.testUtils.assertValidWalletBalance(balance);
            (0, globals_1.expect)(balance.currency).toBe('EUR');
            (0, globals_1.expect)(balance.availableBalance).toBe(0);
            (0, globals_1.expect)(balance.reservedBalance).toBe(0);
            (0, globals_1.expect)(balance.totalBalance).toBe(0);
        });
        (0, globals_1.test)('should return 400 for invalid currency', async () => {
            const invalidCurrencies = ['USD', 'BTC', 'INVALID', '123', 'eur', 'aoa'];
            for (const currency of invalidCurrencies) {
                const response = await utils_1.testUtils.get(`/api/v1/wallets/${currency}`, testUser);
                utils_1.testUtils.assertErrorResponse(response, 400);
                (0, globals_1.expect)(response.body.error).toContain('currency');
            }
        });
        (0, globals_1.test)('should handle case sensitivity for currency', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/eur', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('currency');
        });
        (0, globals_1.test)('should return 404 for non-existent currency endpoint', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/NONEXISTENT', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
        });
    });
    (0, globals_1.describe)('Wallet Balance Edge Cases', () => {
        (0, globals_1.test)('should handle very small amounts', async () => {
            const userWithSmallBalance = await utils_1.testUtils.createUserWithBalance({
                email: 'small-balance@emapay.test',
                balances: {
                    EUR: { available: 0.01, reserved: 0.01 }
                }
            });
            const response = await utils_1.testUtils.get('/api/v1/wallets/EUR', userWithSmallBalance);
            const balance = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(balance.availableBalance).toBe(0.01);
            (0, globals_1.expect)(balance.reservedBalance).toBe(0.01);
            (0, globals_1.expect)(balance.totalBalance).toBe(0.02);
        });
        (0, globals_1.test)('should handle large amounts', async () => {
            const userWithLargeBalance = await utils_1.testUtils.createUserWithBalance({
                email: 'large-balance@emapay.test',
                balances: {
                    AOA: { available: 999999999.99, reserved: 0 }
                }
            });
            const response = await utils_1.testUtils.get('/api/v1/wallets/AOA', userWithLargeBalance);
            const balance = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(balance.availableBalance).toBe(999999999.99);
            (0, globals_1.expect)(balance.reservedBalance).toBe(0);
            (0, globals_1.expect)(balance.totalBalance).toBe(999999999.99);
        });
        (0, globals_1.test)('should handle zero balances correctly', async () => {
            const response = await utils_1.testUtils.get('/api/v1/wallets/balance', testUser);
            const balances = utils_1.testUtils.assertSuccessResponse(response, 200);
            balances.forEach((balance) => {
                (0, globals_1.expect)(balance.availableBalance).toBe(0);
                (0, globals_1.expect)(balance.reservedBalance).toBe(0);
                (0, globals_1.expect)(balance.totalBalance).toBe(0);
            });
        });
        (0, globals_1.test)('should handle reserved balance scenarios', async () => {
            const userWithReservedBalance = await utils_1.testUtils.createUserWithBalance({
                email: 'reserved-balance@emapay.test',
                balances: {
                    EUR: { available: 100, reserved: 900 }
                }
            });
            const response = await utils_1.testUtils.get('/api/v1/wallets/EUR', userWithReservedBalance);
            const balance = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(balance.availableBalance).toBe(100);
            (0, globals_1.expect)(balance.reservedBalance).toBe(900);
            (0, globals_1.expect)(balance.totalBalance).toBe(1000);
        });
        (0, globals_1.test)('should not allow negative balances', async () => {
            // This test verifies that the system doesn't return negative balances
            const response = await utils_1.testUtils.get('/api/v1/wallets/balance', testUser);
            const balances = utils_1.testUtils.assertSuccessResponse(response, 200);
            balances.forEach((balance) => {
                (0, globals_1.expect)(balance.availableBalance).toBeGreaterThanOrEqual(0);
                (0, globals_1.expect)(balance.reservedBalance).toBeGreaterThanOrEqual(0);
                (0, globals_1.expect)(balance.totalBalance).toBeGreaterThanOrEqual(0);
            });
        });
    });
    (0, globals_1.describe)('Wallet Authorization', () => {
        (0, globals_1.test)('should require authentication for balance endpoint', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/wallets/balance');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('authorization');
        });
        (0, globals_1.test)('should require authentication for currency endpoint', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/wallets/EUR');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('authorization');
        });
        (0, globals_1.test)('should reject invalid JWT tokens', async () => {
            const response = await utils_1.testUtils.testWithInvalidToken('GET', '/api/v1/wallets/balance');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('token');
        });
        (0, globals_1.test)('should reject expired JWT tokens', async () => {
            const response = await utils_1.testUtils.testWithExpiredToken('GET', '/api/v1/wallets/EUR');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('expired');
        });
        (0, globals_1.test)('should only return own wallet data', async () => {
            // User should only see their own balances, not other users' balances
            const response = await utils_1.testUtils.get('/api/v1/wallets/balance', testUser);
            const balances = utils_1.testUtils.assertSuccessResponse(response, 200);
            // Should return zero balances for testUser, not userWithBalance's balances
            balances.forEach((balance) => {
                (0, globals_1.expect)(balance.availableBalance).toBe(0);
                (0, globals_1.expect)(balance.reservedBalance).toBe(0);
                (0, globals_1.expect)(balance.totalBalance).toBe(0);
            });
        });
    });
    (0, globals_1.describe)('Wallet Performance', () => {
        (0, globals_1.test)('should respond within 50ms for balance endpoint', async () => {
            const { response, passed } = await utils_1.testUtils.testPerformance('GET', '/api/v1/wallets/balance', 50, userWithBalance);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertSuccessResponse(response, 200);
        });
        (0, globals_1.test)('should respond within 50ms for currency endpoint', async () => {
            const { response, passed } = await utils_1.testUtils.testPerformance('GET', '/api/v1/wallets/EUR', 50, userWithBalance);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertSuccessResponse(response, 200);
        });
        (0, globals_1.test)('should handle concurrent balance requests', async () => {
            const responses = await utils_1.testUtils.testConcurrency('GET', '/api/v1/wallets/balance', 10, userWithBalance);
            (0, globals_1.expect)(responses).toHaveLength(10);
            responses.forEach(response => {
                utils_1.testUtils.assertSuccessResponse(response, 200);
                utils_1.testUtils.assertResponseTime(response, 100); // Allow more time for concurrent requests
            });
        });
        (0, globals_1.test)('should handle concurrent currency requests', async () => {
            const responses = await utils_1.testUtils.testConcurrency('GET', '/api/v1/wallets/EUR', 10, userWithBalance);
            (0, globals_1.expect)(responses).toHaveLength(10);
            responses.forEach(response => {
                utils_1.testUtils.assertSuccessResponse(response, 200);
                utils_1.testUtils.assertResponseTime(response, 100);
            });
        });
        (0, globals_1.test)('should maintain performance with multiple currencies', async () => {
            const currencies = ['EUR', 'AOA'];
            for (const currency of currencies) {
                const { response, passed } = await utils_1.testUtils.testPerformance('GET', `/api/v1/wallets/${currency}`, 50, userWithBalance);
                (0, globals_1.expect)(passed).toBe(true);
                utils_1.testUtils.assertSuccessResponse(response, 200);
            }
        });
        (0, globals_1.test)('should cache balance data for better performance', async () => {
            // First request
            const start1 = Date.now();
            const response1 = await utils_1.testUtils.get('/api/v1/wallets/balance', userWithBalance);
            const time1 = Date.now() - start1;
            utils_1.testUtils.assertSuccessResponse(response1, 200);
            // Second request (should be faster due to caching)
            const start2 = Date.now();
            const response2 = await utils_1.testUtils.get('/api/v1/wallets/balance', userWithBalance);
            const time2 = Date.now() - start2;
            utils_1.testUtils.assertSuccessResponse(response2, 200);
            // Second request should be faster (or at least not significantly slower)
            (0, globals_1.expect)(time2).toBeLessThanOrEqual(time1 * 1.5);
            // Results should be identical
            (0, globals_1.expect)(response1.body).toEqual(response2.body);
        });
        (0, globals_1.test)('should handle rapid successive requests', async () => {
            const promises = [];
            // Make 20 rapid requests
            for (let i = 0; i < 20; i++) {
                promises.push(utils_1.testUtils.get('/api/v1/wallets/EUR', userWithBalance));
            }
            const responses = await Promise.all(promises);
            responses.forEach(response => {
                utils_1.testUtils.assertSuccessResponse(response, 200);
                utils_1.testUtils.assertResponseTime(response, 100);
            });
            // All responses should be identical
            const firstResponse = responses[0].body;
            responses.forEach(response => {
                (0, globals_1.expect)(response.body).toEqual(firstResponse);
            });
        });
        (0, globals_1.test)('should maintain performance under mixed load', async () => {
            const promises = [];
            // Mix of balance and currency requests
            for (let i = 0; i < 10; i++) {
                promises.push(utils_1.testUtils.get('/api/v1/wallets/balance', userWithBalance));
                promises.push(utils_1.testUtils.get('/api/v1/wallets/EUR', userWithBalance));
                promises.push(utils_1.testUtils.get('/api/v1/wallets/AOA', userWithBalance));
            }
            const responses = await Promise.all(promises);
            responses.forEach(response => {
                utils_1.testUtils.assertSuccessResponse(response, 200);
                utils_1.testUtils.assertResponseTime(response, 150); // Allow more time for mixed load
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,