{"file":"C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\unit\\wallets.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\unit\\wallets.test.ts"],"sourcesContent":["/**\n * Wallet Operations Endpoint Tests\n * Tests for /api/v1/wallets/* endpoints\n */\n\nimport { describe, test, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';\nimport { testUtils, TestUser } from '../utils';\n\ndescribe('Wallet Operations Endpoints', () => {\n  let testUser: TestUser;\n  let userWithBalance: TestUser;\n\n  beforeAll(async () => {\n    // Create test users\n    testUser = await testUtils.createUser({\n      email: 'wallet-test@emapay.test',\n      metadata: { purpose: 'Wallet Testing' }\n    });\n\n    // Create user with specific balances\n    userWithBalance = await testUtils.createUserWithBalance({\n      email: 'wallet-balance-test@emapay.test',\n      metadata: { purpose: 'Wallet Balance Testing' },\n      balances: {\n        EUR: { available: 1000.50, reserved: 50.25 },\n        AOA: { available: 650000.75, reserved: 25000.00 }\n      }\n    });\n  });\n\n  afterAll(async () => {\n    // Clean up test users\n    await testUtils.cleanup();\n  });\n\n  describe('GET /api/v1/wallets/balance - All Balances', () => {\n    test('should return all wallet balances for user with balances', async () => {\n      const response = await testUtils.get('/api/v1/wallets/balance', userWithBalance);\n      \n      const balances = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(balances)).toBe(true);\n      expect(balances.length).toBe(2); // EUR and AOA\n      \n      // Check EUR balance\n      const eurBalance = balances.find((b: any) => b.currency === 'EUR');\n      expect(eurBalance).toBeDefined();\n      testUtils.assertValidWalletBalance(eurBalance);\n      expect(eurBalance.availableBalance).toBe(1000.50);\n      expect(eurBalance.reservedBalance).toBe(50.25);\n      expect(eurBalance.totalBalance).toBe(1050.75);\n      \n      // Check AOA balance\n      const aoaBalance = balances.find((b: any) => b.currency === 'AOA');\n      expect(aoaBalance).toBeDefined();\n      testUtils.assertValidWalletBalance(aoaBalance);\n      expect(aoaBalance.availableBalance).toBe(650000.75);\n      expect(aoaBalance.reservedBalance).toBe(25000.00);\n      expect(aoaBalance.totalBalance).toBe(675000.75);\n      \n      // Assert response time\n      testUtils.assertResponseTime(response, 50);\n    });\n\n    test('should return empty balances for new user', async () => {\n      const response = await testUtils.get('/api/v1/wallets/balance', testUser);\n      \n      const balances = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(balances)).toBe(true);\n      expect(balances.length).toBe(2); // Should still return EUR and AOA with zero balances\n      \n      balances.forEach((balance: any) => {\n        testUtils.assertValidWalletBalance(balance);\n        expect(balance.availableBalance).toBe(0);\n        expect(balance.reservedBalance).toBe(0);\n        expect(balance.totalBalance).toBe(0);\n        expect(['EUR', 'AOA']).toContain(balance.currency);\n      });\n    });\n\n    test('should include all required balance fields', async () => {\n      const response = await testUtils.get('/api/v1/wallets/balance', userWithBalance);\n      \n      const balances = testUtils.assertSuccessResponse(response, 200);\n      \n      balances.forEach((balance: any) => {\n        expect(balance).toHaveProperty('currency');\n        expect(balance).toHaveProperty('availableBalance');\n        expect(balance).toHaveProperty('reservedBalance');\n        expect(balance).toHaveProperty('totalBalance');\n        expect(balance).toHaveProperty('lastUpdated');\n        \n        // Validate data types\n        expect(typeof balance.currency).toBe('string');\n        expect(typeof balance.availableBalance).toBe('number');\n        expect(typeof balance.reservedBalance).toBe('number');\n        expect(typeof balance.totalBalance).toBe('number');\n        expect(new Date(balance.lastUpdated)).toBeInstanceOf(Date);\n      });\n    });\n\n    test('should maintain decimal precision', async () => {\n      const response = await testUtils.get('/api/v1/wallets/balance', userWithBalance);\n      \n      const balances = testUtils.assertSuccessResponse(response, 200);\n      \n      balances.forEach((balance: any) => {\n        testUtils.assertDecimalPrecision(balance.availableBalance, 2);\n        testUtils.assertDecimalPrecision(balance.reservedBalance, 2);\n        testUtils.assertDecimalPrecision(balance.totalBalance, 2);\n      });\n    });\n\n    test('should return consistent balance calculations', async () => {\n      const response = await testUtils.get('/api/v1/wallets/balance', userWithBalance);\n      \n      const balances = testUtils.assertSuccessResponse(response, 200);\n      \n      balances.forEach((balance: any) => {\n        const calculatedTotal = balance.availableBalance + balance.reservedBalance;\n        expect(balance.totalBalance).toBe(calculatedTotal);\n      });\n    });\n  });\n\n  describe('GET /api/v1/wallets/{currency} - Specific Currency', () => {\n    test('should return EUR balance', async () => {\n      const response = await testUtils.get('/api/v1/wallets/EUR', userWithBalance);\n      \n      const balance = testUtils.assertSuccessResponse(response, 200);\n      \n      testUtils.assertValidWalletBalance(balance);\n      expect(balance.currency).toBe('EUR');\n      expect(balance.availableBalance).toBe(1000.50);\n      expect(balance.reservedBalance).toBe(50.25);\n      expect(balance.totalBalance).toBe(1050.75);\n      \n      testUtils.assertResponseTime(response, 50);\n    });\n\n    test('should return AOA balance', async () => {\n      const response = await testUtils.get('/api/v1/wallets/AOA', userWithBalance);\n      \n      const balance = testUtils.assertSuccessResponse(response, 200);\n      \n      testUtils.assertValidWalletBalance(balance);\n      expect(balance.currency).toBe('AOA');\n      expect(balance.availableBalance).toBe(650000.75);\n      expect(balance.reservedBalance).toBe(25000.00);\n      expect(balance.totalBalance).toBe(675000.75);\n    });\n\n    test('should return zero balance for new user', async () => {\n      const response = await testUtils.get('/api/v1/wallets/EUR', testUser);\n      \n      const balance = testUtils.assertSuccessResponse(response, 200);\n      \n      testUtils.assertValidWalletBalance(balance);\n      expect(balance.currency).toBe('EUR');\n      expect(balance.availableBalance).toBe(0);\n      expect(balance.reservedBalance).toBe(0);\n      expect(balance.totalBalance).toBe(0);\n    });\n\n    test('should return 400 for invalid currency', async () => {\n      const invalidCurrencies = ['USD', 'BTC', 'INVALID', '123', 'eur', 'aoa'];\n      \n      for (const currency of invalidCurrencies) {\n        const response = await testUtils.get(`/api/v1/wallets/${currency}`, testUser);\n        \n        testUtils.assertErrorResponse(response, 400);\n        expect(response.body.error).toContain('currency');\n      }\n    });\n\n    test('should handle case sensitivity for currency', async () => {\n      const response = await testUtils.get('/api/v1/wallets/eur', testUser);\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('currency');\n    });\n\n    test('should return 404 for non-existent currency endpoint', async () => {\n      const response = await testUtils.get('/api/v1/wallets/NONEXISTENT', testUser);\n      \n      testUtils.assertErrorResponse(response, 400);\n    });\n  });\n\n  describe('Wallet Balance Edge Cases', () => {\n    test('should handle very small amounts', async () => {\n      const userWithSmallBalance = await testUtils.createUserWithBalance({\n        email: 'small-balance@emapay.test',\n        balances: {\n          EUR: { available: 0.01, reserved: 0.01 }\n        }\n      });\n      \n      const response = await testUtils.get('/api/v1/wallets/EUR', userWithSmallBalance);\n      \n      const balance = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(balance.availableBalance).toBe(0.01);\n      expect(balance.reservedBalance).toBe(0.01);\n      expect(balance.totalBalance).toBe(0.02);\n    });\n\n    test('should handle large amounts', async () => {\n      const userWithLargeBalance = await testUtils.createUserWithBalance({\n        email: 'large-balance@emapay.test',\n        balances: {\n          AOA: { available: 999999999.99, reserved: 0 }\n        }\n      });\n      \n      const response = await testUtils.get('/api/v1/wallets/AOA', userWithLargeBalance);\n      \n      const balance = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(balance.availableBalance).toBe(999999999.99);\n      expect(balance.reservedBalance).toBe(0);\n      expect(balance.totalBalance).toBe(999999999.99);\n    });\n\n    test('should handle zero balances correctly', async () => {\n      const response = await testUtils.get('/api/v1/wallets/balance', testUser);\n      \n      const balances = testUtils.assertSuccessResponse(response, 200);\n      \n      balances.forEach((balance: any) => {\n        expect(balance.availableBalance).toBe(0);\n        expect(balance.reservedBalance).toBe(0);\n        expect(balance.totalBalance).toBe(0);\n      });\n    });\n\n    test('should handle reserved balance scenarios', async () => {\n      const userWithReservedBalance = await testUtils.createUserWithBalance({\n        email: 'reserved-balance@emapay.test',\n        balances: {\n          EUR: { available: 100, reserved: 900 }\n        }\n      });\n      \n      const response = await testUtils.get('/api/v1/wallets/EUR', userWithReservedBalance);\n      \n      const balance = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(balance.availableBalance).toBe(100);\n      expect(balance.reservedBalance).toBe(900);\n      expect(balance.totalBalance).toBe(1000);\n    });\n\n    test('should not allow negative balances', async () => {\n      // This test verifies that the system doesn't return negative balances\n      const response = await testUtils.get('/api/v1/wallets/balance', testUser);\n      \n      const balances = testUtils.assertSuccessResponse(response, 200);\n      \n      balances.forEach((balance: any) => {\n        expect(balance.availableBalance).toBeGreaterThanOrEqual(0);\n        expect(balance.reservedBalance).toBeGreaterThanOrEqual(0);\n        expect(balance.totalBalance).toBeGreaterThanOrEqual(0);\n      });\n    });\n  });\n\n  describe('Wallet Authorization', () => {\n    test('should require authentication for balance endpoint', async () => {\n      const response = await testUtils.publicGet('/api/v1/wallets/balance');\n      \n      testUtils.assertErrorResponse(response, 401);\n      expect(response.body.error).toContain('authorization');\n    });\n\n    test('should require authentication for currency endpoint', async () => {\n      const response = await testUtils.publicGet('/api/v1/wallets/EUR');\n      \n      testUtils.assertErrorResponse(response, 401);\n      expect(response.body.error).toContain('authorization');\n    });\n\n    test('should reject invalid JWT tokens', async () => {\n      const response = await testUtils.testWithInvalidToken('GET', '/api/v1/wallets/balance');\n      \n      testUtils.assertErrorResponse(response, 401);\n      expect(response.body.error).toContain('token');\n    });\n\n    test('should reject expired JWT tokens', async () => {\n      const response = await testUtils.testWithExpiredToken('GET', '/api/v1/wallets/EUR');\n      \n      testUtils.assertErrorResponse(response, 401);\n      expect(response.body.error).toContain('expired');\n    });\n\n    test('should only return own wallet data', async () => {\n      // User should only see their own balances, not other users' balances\n      const response = await testUtils.get('/api/v1/wallets/balance', testUser);\n      \n      const balances = testUtils.assertSuccessResponse(response, 200);\n      \n      // Should return zero balances for testUser, not userWithBalance's balances\n      balances.forEach((balance: any) => {\n        expect(balance.availableBalance).toBe(0);\n        expect(balance.reservedBalance).toBe(0);\n        expect(balance.totalBalance).toBe(0);\n      });\n    });\n  });\n\n  describe('Wallet Performance', () => {\n    test('should respond within 50ms for balance endpoint', async () => {\n      const { response, passed } = await testUtils.testPerformance(\n        'GET',\n        '/api/v1/wallets/balance',\n        50,\n        userWithBalance\n      );\n\n      expect(passed).toBe(true);\n      testUtils.assertSuccessResponse(response, 200);\n    });\n\n    test('should respond within 50ms for currency endpoint', async () => {\n      const { response, passed } = await testUtils.testPerformance(\n        'GET',\n        '/api/v1/wallets/EUR',\n        50,\n        userWithBalance\n      );\n\n      expect(passed).toBe(true);\n      testUtils.assertSuccessResponse(response, 200);\n    });\n\n    test('should handle concurrent balance requests', async () => {\n      const responses = await testUtils.testConcurrency(\n        'GET',\n        '/api/v1/wallets/balance',\n        10,\n        userWithBalance\n      );\n\n      expect(responses).toHaveLength(10);\n\n      responses.forEach(response => {\n        testUtils.assertSuccessResponse(response, 200);\n        testUtils.assertResponseTime(response, 100); // Allow more time for concurrent requests\n      });\n    });\n\n    test('should handle concurrent currency requests', async () => {\n      const responses = await testUtils.testConcurrency(\n        'GET',\n        '/api/v1/wallets/EUR',\n        10,\n        userWithBalance\n      );\n\n      expect(responses).toHaveLength(10);\n\n      responses.forEach(response => {\n        testUtils.assertSuccessResponse(response, 200);\n        testUtils.assertResponseTime(response, 100);\n      });\n    });\n\n    test('should maintain performance with multiple currencies', async () => {\n      const currencies = ['EUR', 'AOA'];\n\n      for (const currency of currencies) {\n        const { response, passed } = await testUtils.testPerformance(\n          'GET',\n          `/api/v1/wallets/${currency}`,\n          50,\n          userWithBalance\n        );\n\n        expect(passed).toBe(true);\n        testUtils.assertSuccessResponse(response, 200);\n      }\n    });\n\n    test('should cache balance data for better performance', async () => {\n      // First request\n      const start1 = Date.now();\n      const response1 = await testUtils.get('/api/v1/wallets/balance', userWithBalance);\n      const time1 = Date.now() - start1;\n\n      testUtils.assertSuccessResponse(response1, 200);\n\n      // Second request (should be faster due to caching)\n      const start2 = Date.now();\n      const response2 = await testUtils.get('/api/v1/wallets/balance', userWithBalance);\n      const time2 = Date.now() - start2;\n\n      testUtils.assertSuccessResponse(response2, 200);\n\n      // Second request should be faster (or at least not significantly slower)\n      expect(time2).toBeLessThanOrEqual(time1 * 1.5);\n\n      // Results should be identical\n      expect(response1.body).toEqual(response2.body);\n    });\n\n    test('should handle rapid successive requests', async () => {\n      const promises = [];\n\n      // Make 20 rapid requests\n      for (let i = 0; i < 20; i++) {\n        promises.push(testUtils.get('/api/v1/wallets/EUR', userWithBalance));\n      }\n\n      const responses = await Promise.all(promises);\n\n      responses.forEach(response => {\n        testUtils.assertSuccessResponse(response, 200);\n        testUtils.assertResponseTime(response, 100);\n      });\n\n      // All responses should be identical\n      const firstResponse = responses[0].body;\n      responses.forEach(response => {\n        expect(response.body).toEqual(firstResponse);\n      });\n    });\n\n    test('should maintain performance under mixed load', async () => {\n      const promises = [];\n\n      // Mix of balance and currency requests\n      for (let i = 0; i < 10; i++) {\n        promises.push(testUtils.get('/api/v1/wallets/balance', userWithBalance));\n        promises.push(testUtils.get('/api/v1/wallets/EUR', userWithBalance));\n        promises.push(testUtils.get('/api/v1/wallets/AOA', userWithBalance));\n      }\n\n      const responses = await Promise.all(promises);\n\n      responses.forEach(response => {\n        testUtils.assertSuccessResponse(response, 200);\n        testUtils.assertResponseTime(response, 150); // Allow more time for mixed load\n      });\n    });\n  });\n});\n"],"version":3}