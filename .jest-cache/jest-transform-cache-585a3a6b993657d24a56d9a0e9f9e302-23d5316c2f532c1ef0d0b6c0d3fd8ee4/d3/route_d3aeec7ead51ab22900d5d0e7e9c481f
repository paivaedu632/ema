8a09d873429815ea524881a339f0ce78
/* istanbul ignore next */
function cov_lisey6963() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\security\\pin\\verify\\route.ts";
  var hash = "8ab159545b20ebadca159a5d07eb08915d831b5c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\security\\pin\\verify\\route.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 10,
          column: 74
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 13,
          column: 5
        }
      },
      "2": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 64
        }
      },
      "3": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 35
        }
      },
      "4": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "5": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 20,
          column: 10
        }
      },
      "6": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 27,
          column: 9
        }
      },
      "7": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "8": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 64
        }
      },
      "9": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 62
        }
      },
      "10": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 28,
          column: 35
        }
      },
      "11": {
        start: {
          line: 29,
          column: 24
        },
        end: {
          line: 29,
          column: 155
        }
      },
      "12": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "13": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "14": {
        start: {
          line: 33,
          column: 29
        },
        end: {
          line: 37,
          column: 9
        }
      },
      "15": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 80
        }
      },
      "16": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 50
        }
      },
      "17": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 68
        }
      },
      "18": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 45,
          column: 75
        }
      }
    },
    fnMap: {
      "0": {
        name: "pinVerifyHandler",
        decl: {
          start: {
            line: 7,
            column: 15
          },
          end: {
            line: 7,
            column: 31
          }
        },
        loc: {
          start: {
            line: 7,
            column: 47
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 7
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 8
          },
          end: {
            line: 27,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 188
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 17
          },
          end: {
            line: 23,
            column: 100
          }
        }, {
          start: {
            line: 23,
            column: 106
          },
          end: {
            line: 23,
            column: 187
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 23,
            column: 17
          },
          end: {
            line: 23,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 65
          },
          end: {
            line: 23,
            column: 71
          }
        }, {
          start: {
            line: 23,
            column: 74
          },
          end: {
            line: 23,
            column: 100
          }
        }],
        line: 23
      },
      "5": {
        loc: {
          start: {
            line: 23,
            column: 17
          },
          end: {
            line: 23,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 17
          },
          end: {
            line: 23,
            column: 45
          }
        }, {
          start: {
            line: 23,
            column: 49
          },
          end: {
            line: 23,
            column: 62
          }
        }],
        line: 23
      },
      "6": {
        loc: {
          start: {
            line: 23,
            column: 106
          },
          end: {
            line: 23,
            column: 187
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 154
          },
          end: {
            line: 23,
            column: 160
          }
        }, {
          start: {
            line: 23,
            column: 163
          },
          end: {
            line: 23,
            column: 187
          }
        }],
        line: 23
      },
      "7": {
        loc: {
          start: {
            line: 23,
            column: 106
          },
          end: {
            line: 23,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 106
          },
          end: {
            line: 23,
            column: 134
          }
        }, {
          start: {
            line: 23,
            column: 138
          },
          end: {
            line: 23,
            column: 151
          }
        }],
        line: 23
      },
      "8": {
        loc: {
          start: {
            line: 29,
            column: 24
          },
          end: {
            line: 29,
            column: 155
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 24
          },
          end: {
            line: 29,
            column: 44
          }
        }, {
          start: {
            line: 29,
            column: 49
          },
          end: {
            line: 29,
            column: 76
          }
        }, {
          start: {
            line: 29,
            column: 80
          },
          end: {
            line: 29,
            column: 154
          }
        }],
        line: 29
      },
      "9": {
        loc: {
          start: {
            line: 29,
            column: 81
          },
          end: {
            line: 29,
            column: 144
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 29,
            column: 122
          },
          end: {
            line: 29,
            column: 128
          }
        }, {
          start: {
            line: 29,
            column: 131
          },
          end: {
            line: 29,
            column: 144
          }
        }],
        line: 29
      },
      "10": {
        loc: {
          start: {
            line: 29,
            column: 81
          },
          end: {
            line: 29,
            column: 119
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 81
          },
          end: {
            line: 29,
            column: 97
          }
        }, {
          start: {
            line: 29,
            column: 101
          },
          end: {
            line: 29,
            column: 119
          }
        }],
        line: 29
      },
      "11": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\security\\pin\\verify\\route.ts",
      mappings: "AACA,OAAO,EAAE,QAAQ,EAAqB,MAAM,uBAAuB,CAAC;AACpE,OAAO,EAAE,qBAAqB,EAAE,cAAc,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAC/F,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAC3D,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AAEzD,KAAK,UAAU,gBAAgB,CAAC,OAAoB,EAAE,IAAuB;;IAC3E,wBAAwB;IACxB,MAAM,UAAU,GAAG,MAAM,mBAAmB,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IACvE,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QACxB,OAAO,cAAc,CAAC,eAAe,CAAC,UAAU,CAAC,KAAM,CAAC,CAAC;IAC3D,CAAC;IAED,MAAM,EAAE,GAAG,EAAE,GAAG,UAAU,CAAC,IAAK,CAAC;IAEjC,IAAI,CAAC;QACH,kBAAkB;QAClB,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC;YACjC,OAAO,EAAE,IAAI,CAAC,MAAM;YACpB,GAAG;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACpB,2DAA2D;YAC3D,IAAI,CAAA,MAAA,MAAM,CAAC,KAAK,0CAAE,QAAQ,CAAC,aAAa,CAAC,MAAI,MAAA,MAAM,CAAC,KAAK,0CAAE,QAAQ,CAAC,WAAW,CAAC,CAAA,EAAE,CAAC;gBACjF,OAAO,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YAClD,CAAC;YACD,OAAO,cAAc,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC;QAED,MAAM,OAAO,GAAG,MAAM,CAAC,IAAiD,CAAC;QACzE,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,MAAK,IAAI,CAAC,CAAC;QAEjG,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAClD,CAAC;QAED,MAAM,YAAY,GAAG;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;QAEF,OAAO,qBAAqB,CAAC,YAAY,EAAE,2BAA2B,CAAC,CAAC;IAE1E,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;QAC1C,OAAO,cAAc,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC;IAC9D,CAAC;AACH,CAAC;AAED,MAAM,CAAC,MAAM,IAAI,GAAG,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\security\\pin\\verify\\route.ts"],
      sourcesContent: ["import { NextRequest } from 'next/server';\nimport { withAuth, AuthenticatedUser } from '@/lib/auth/middleware';\nimport { createSuccessResponse, ErrorResponses, withErrorHandling } from '@/lib/api/responses';\nimport { withCors } from '@/lib/api/cors';\nimport { validateRequestBody } from '@/lib/validation/helpers';\nimport { pinVerifySchema } from '@/lib/validation/schemas';\nimport { verifyUserPin } from '@/lib/database/functions';\n\nasync function pinVerifyHandler(request: NextRequest, user: AuthenticatedUser) {\n  // Validate request body\n  const validation = await validateRequestBody(request, pinVerifySchema);\n  if (!validation.success) {\n    return ErrorResponses.validationError(validation.error!);\n  }\n\n  const { pin } = validation.data!;\n\n  try {\n    // Verify user PIN\n    const result = await verifyUserPin({\n      user_id: user.userId,\n      pin\n    });\n\n    if (!result.success) {\n      // Check if it's a PIN verification failure vs system error\n      if (result.error?.includes('Invalid PIN') || result.error?.includes('incorrect')) {\n        return ErrorResponses.invalidPin('Invalid PIN');\n      }\n      return ErrorResponses.databaseError(result.error);\n    }\n\n    const pinData = result.data as { valid?: boolean } | boolean | undefined;\n    const isValid = result.data === true || (typeof pinData === 'object' && pinData?.valid === true);\n\n    if (!isValid) {\n      return ErrorResponses.invalidPin('Invalid PIN');\n    }\n\n    const responseData = {\n      userId: user.userId,\n      pinValid: true,\n      timestamp: new Date().toISOString()\n    };\n\n    return createSuccessResponse(responseData, 'PIN verified successfully');\n\n  } catch (error) {\n    console.error('PIN verify error:', error);\n    return ErrorResponses.internalError('Failed to verify PIN');\n  }\n}\n\nexport const POST = withCors(withErrorHandling(withAuth(pinVerifyHandler)));\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8ab159545b20ebadca159a5d07eb08915d831b5c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_lisey6963 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_lisey6963();
import { withAuth } from '@/lib/auth/middleware';
import { createSuccessResponse, ErrorResponses, withErrorHandling } from '@/lib/api/responses';
import { withCors } from '@/lib/api/cors';
import { validateRequestBody } from '@/lib/validation/helpers';
import { pinVerifySchema } from '@/lib/validation/schemas';
import { verifyUserPin } from '@/lib/database/functions';
async function pinVerifyHandler(request, user) {
  /* istanbul ignore next */
  cov_lisey6963().f[0]++;
  var _a, _b;
  // Validate request body
  const validation =
  /* istanbul ignore next */
  (cov_lisey6963().s[0]++, await validateRequestBody(request, pinVerifySchema));
  /* istanbul ignore next */
  cov_lisey6963().s[1]++;
  if (!validation.success) {
    /* istanbul ignore next */
    cov_lisey6963().b[0][0]++;
    cov_lisey6963().s[2]++;
    return ErrorResponses.validationError(validation.error);
  } else
  /* istanbul ignore next */
  {
    cov_lisey6963().b[0][1]++;
  }
  const {
    pin
  } =
  /* istanbul ignore next */
  (cov_lisey6963().s[3]++, validation.data);
  /* istanbul ignore next */
  cov_lisey6963().s[4]++;
  try {
    // Verify user PIN
    const result =
    /* istanbul ignore next */
    (cov_lisey6963().s[5]++, await verifyUserPin({
      user_id: user.userId,
      pin
    }));
    /* istanbul ignore next */
    cov_lisey6963().s[6]++;
    if (!result.success) {
      /* istanbul ignore next */
      cov_lisey6963().b[1][0]++;
      cov_lisey6963().s[7]++;
      // Check if it's a PIN verification failure vs system error
      if (
      /* istanbul ignore next */
      (cov_lisey6963().b[3][0]++,
      /* istanbul ignore next */
      (cov_lisey6963().b[5][0]++, (_a = result.error) === null) ||
      /* istanbul ignore next */
      (cov_lisey6963().b[5][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_lisey6963().b[4][0]++, void 0) :
      /* istanbul ignore next */
      (cov_lisey6963().b[4][1]++, _a.includes('Invalid PIN'))) ||
      /* istanbul ignore next */
      (cov_lisey6963().b[3][1]++,
      /* istanbul ignore next */
      (cov_lisey6963().b[7][0]++, (_b = result.error) === null) ||
      /* istanbul ignore next */
      (cov_lisey6963().b[7][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_lisey6963().b[6][0]++, void 0) :
      /* istanbul ignore next */
      (cov_lisey6963().b[6][1]++, _b.includes('incorrect')))) {
        /* istanbul ignore next */
        cov_lisey6963().b[2][0]++;
        cov_lisey6963().s[8]++;
        return ErrorResponses.invalidPin('Invalid PIN');
      } else
      /* istanbul ignore next */
      {
        cov_lisey6963().b[2][1]++;
      }
      cov_lisey6963().s[9]++;
      return ErrorResponses.databaseError(result.error);
    } else
    /* istanbul ignore next */
    {
      cov_lisey6963().b[1][1]++;
    }
    const pinData =
    /* istanbul ignore next */
    (cov_lisey6963().s[10]++, result.data);
    const isValid =
    /* istanbul ignore next */
    (cov_lisey6963().s[11]++,
    /* istanbul ignore next */
    (cov_lisey6963().b[8][0]++, result.data === true) ||
    /* istanbul ignore next */
    (cov_lisey6963().b[8][1]++, typeof pinData === 'object') &&
    /* istanbul ignore next */
    (cov_lisey6963().b[8][2]++, (
    /* istanbul ignore next */
    (cov_lisey6963().b[10][0]++, pinData === null) ||
    /* istanbul ignore next */
    (cov_lisey6963().b[10][1]++, pinData === void 0) ?
    /* istanbul ignore next */
    (cov_lisey6963().b[9][0]++, void 0) :
    /* istanbul ignore next */
    (cov_lisey6963().b[9][1]++, pinData.valid)) === true));
    /* istanbul ignore next */
    cov_lisey6963().s[12]++;
    if (!isValid) {
      /* istanbul ignore next */
      cov_lisey6963().b[11][0]++;
      cov_lisey6963().s[13]++;
      return ErrorResponses.invalidPin('Invalid PIN');
    } else
    /* istanbul ignore next */
    {
      cov_lisey6963().b[11][1]++;
    }
    const responseData =
    /* istanbul ignore next */
    (cov_lisey6963().s[14]++, {
      userId: user.userId,
      pinValid: true,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_lisey6963().s[15]++;
    return createSuccessResponse(responseData, 'PIN verified successfully');
  } catch (error) {
    /* istanbul ignore next */
    cov_lisey6963().s[16]++;
    console.error('PIN verify error:', error);
    /* istanbul ignore next */
    cov_lisey6963().s[17]++;
    return ErrorResponses.internalError('Failed to verify PIN');
  }
}
export const POST =
/* istanbul ignore next */
(cov_lisey6963().s[18]++, withCors(withErrorHandling(withAuth(pinVerifyHandler))));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfbGlzZXk2OTYzIiwiYWN0dWFsQ292ZXJhZ2UiLCJ3aXRoQXV0aCIsImNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSIsIkVycm9yUmVzcG9uc2VzIiwid2l0aEVycm9ySGFuZGxpbmciLCJ3aXRoQ29ycyIsInZhbGlkYXRlUmVxdWVzdEJvZHkiLCJwaW5WZXJpZnlTY2hlbWEiLCJ2ZXJpZnlVc2VyUGluIiwicGluVmVyaWZ5SGFuZGxlciIsInJlcXVlc3QiLCJ1c2VyIiwiZiIsInZhbGlkYXRpb24iLCJzIiwic3VjY2VzcyIsImIiLCJ2YWxpZGF0aW9uRXJyb3IiLCJlcnJvciIsInBpbiIsImRhdGEiLCJyZXN1bHQiLCJ1c2VyX2lkIiwidXNlcklkIiwiX2EiLCJpbmNsdWRlcyIsIl9iIiwiaW52YWxpZFBpbiIsImRhdGFiYXNlRXJyb3IiLCJwaW5EYXRhIiwiaXNWYWxpZCIsInZhbGlkIiwicmVzcG9uc2VEYXRhIiwicGluVmFsaWQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJjb25zb2xlIiwiaW50ZXJuYWxFcnJvciIsIlBPU1QiXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXFVzZXJcXERvY3VtZW50c1xcR2l0SHViXFxlbWFcXHNyY1xcYXBwXFxhcGlcXHYxXFxzZWN1cml0eVxccGluXFx2ZXJpZnlcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0IH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgd2l0aEF1dGgsIEF1dGhlbnRpY2F0ZWRVc2VyIH0gZnJvbSAnQC9saWIvYXV0aC9taWRkbGV3YXJlJztcbmltcG9ydCB7IGNyZWF0ZVN1Y2Nlc3NSZXNwb25zZSwgRXJyb3JSZXNwb25zZXMsIHdpdGhFcnJvckhhbmRsaW5nIH0gZnJvbSAnQC9saWIvYXBpL3Jlc3BvbnNlcyc7XG5pbXBvcnQgeyB3aXRoQ29ycyB9IGZyb20gJ0AvbGliL2FwaS9jb3JzJztcbmltcG9ydCB7IHZhbGlkYXRlUmVxdWVzdEJvZHkgfSBmcm9tICdAL2xpYi92YWxpZGF0aW9uL2hlbHBlcnMnO1xuaW1wb3J0IHsgcGluVmVyaWZ5U2NoZW1hIH0gZnJvbSAnQC9saWIvdmFsaWRhdGlvbi9zY2hlbWFzJztcbmltcG9ydCB7IHZlcmlmeVVzZXJQaW4gfSBmcm9tICdAL2xpYi9kYXRhYmFzZS9mdW5jdGlvbnMnO1xuXG5hc3luYyBmdW5jdGlvbiBwaW5WZXJpZnlIYW5kbGVyKHJlcXVlc3Q6IE5leHRSZXF1ZXN0LCB1c2VyOiBBdXRoZW50aWNhdGVkVXNlcikge1xuICAvLyBWYWxpZGF0ZSByZXF1ZXN0IGJvZHlcbiAgY29uc3QgdmFsaWRhdGlvbiA9IGF3YWl0IHZhbGlkYXRlUmVxdWVzdEJvZHkocmVxdWVzdCwgcGluVmVyaWZ5U2NoZW1hKTtcbiAgaWYgKCF2YWxpZGF0aW9uLnN1Y2Nlc3MpIHtcbiAgICByZXR1cm4gRXJyb3JSZXNwb25zZXMudmFsaWRhdGlvbkVycm9yKHZhbGlkYXRpb24uZXJyb3IhKTtcbiAgfVxuXG4gIGNvbnN0IHsgcGluIH0gPSB2YWxpZGF0aW9uLmRhdGEhO1xuXG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHVzZXIgUElOXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmVyaWZ5VXNlclBpbih7XG4gICAgICB1c2VyX2lkOiB1c2VyLnVzZXJJZCxcbiAgICAgIHBpblxuICAgIH0pO1xuXG4gICAgaWYgKCFyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgLy8gQ2hlY2sgaWYgaXQncyBhIFBJTiB2ZXJpZmljYXRpb24gZmFpbHVyZSB2cyBzeXN0ZW0gZXJyb3JcbiAgICAgIGlmIChyZXN1bHQuZXJyb3I/LmluY2x1ZGVzKCdJbnZhbGlkIFBJTicpIHx8IHJlc3VsdC5lcnJvcj8uaW5jbHVkZXMoJ2luY29ycmVjdCcpKSB7XG4gICAgICAgIHJldHVybiBFcnJvclJlc3BvbnNlcy5pbnZhbGlkUGluKCdJbnZhbGlkIFBJTicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEVycm9yUmVzcG9uc2VzLmRhdGFiYXNlRXJyb3IocmVzdWx0LmVycm9yKTtcbiAgICB9XG5cbiAgICBjb25zdCBwaW5EYXRhID0gcmVzdWx0LmRhdGEgYXMgeyB2YWxpZD86IGJvb2xlYW4gfSB8IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gICAgY29uc3QgaXNWYWxpZCA9IHJlc3VsdC5kYXRhID09PSB0cnVlIHx8ICh0eXBlb2YgcGluRGF0YSA9PT0gJ29iamVjdCcgJiYgcGluRGF0YT8udmFsaWQgPT09IHRydWUpO1xuXG4gICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRXJyb3JSZXNwb25zZXMuaW52YWxpZFBpbignSW52YWxpZCBQSU4nKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZURhdGEgPSB7XG4gICAgICB1c2VySWQ6IHVzZXIudXNlcklkLFxuICAgICAgcGluVmFsaWQ6IHRydWUsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG5cbiAgICByZXR1cm4gY3JlYXRlU3VjY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlRGF0YSwgJ1BJTiB2ZXJpZmllZCBzdWNjZXNzZnVsbHknKTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1BJTiB2ZXJpZnkgZXJyb3I6JywgZXJyb3IpO1xuICAgIHJldHVybiBFcnJvclJlc3BvbnNlcy5pbnRlcm5hbEVycm9yKCdGYWlsZWQgdG8gdmVyaWZ5IFBJTicpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBQT1NUID0gd2l0aENvcnMod2l0aEVycm9ySGFuZGxpbmcod2l0aEF1dGgocGluVmVyaWZ5SGFuZGxlcikpKTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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