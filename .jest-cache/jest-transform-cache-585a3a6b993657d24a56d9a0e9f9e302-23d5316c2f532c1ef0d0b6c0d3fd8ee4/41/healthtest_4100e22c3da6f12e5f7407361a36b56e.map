{"file":"C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\unit\\health.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\unit\\health.test.ts"],"sourcesContent":["/**\n * Health Check & System Tests\n * Tests for /api/v1/health/* endpoints\n */\n\nimport { describe, test, expect, beforeAll, afterAll } from '@jest/globals';\nimport { testUtils } from '../utils';\n\ndescribe('Health Check & System Endpoints', () => {\n  describe('GET /api/v1/health/status - System Health', () => {\n    test('should return system health status without authentication', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      const healthData = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(healthData).toHaveProperty('status');\n      expect(healthData).toHaveProperty('timestamp');\n      expect(healthData).toHaveProperty('version');\n      expect(healthData).toHaveProperty('uptime');\n      \n      expect(healthData.status).toBe('healthy');\n      expect(typeof healthData.timestamp).toBe('string');\n      expect(new Date(healthData.timestamp)).toBeInstanceOf(Date);\n      expect(typeof healthData.uptime).toBe('number');\n      expect(healthData.uptime).toBeGreaterThan(0);\n      \n      // Assert response time\n      testUtils.assertResponseTime(response, 50);\n    });\n\n    test('should include service status checks', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      const healthData = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(healthData).toHaveProperty('services');\n      expect(typeof healthData.services).toBe('object');\n      \n      // Check database status\n      expect(healthData.services).toHaveProperty('database');\n      expect(healthData.services.database).toHaveProperty('status');\n      expect(healthData.services.database).toHaveProperty('responseTime');\n      expect(['healthy', 'degraded', 'unhealthy']).toContain(healthData.services.database.status);\n      expect(typeof healthData.services.database.responseTime).toBe('number');\n      \n      // Check authentication service status\n      expect(healthData.services).toHaveProperty('auth');\n      expect(healthData.services.auth).toHaveProperty('status');\n      expect(['healthy', 'degraded', 'unhealthy']).toContain(healthData.services.auth.status);\n    });\n\n    test('should include system metrics', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      const healthData = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(healthData).toHaveProperty('metrics');\n      expect(typeof healthData.metrics).toBe('object');\n      \n      // Check memory usage\n      if (healthData.metrics.memory) {\n        expect(healthData.metrics.memory).toHaveProperty('used');\n        expect(healthData.metrics.memory).toHaveProperty('total');\n        expect(typeof healthData.metrics.memory.used).toBe('number');\n        expect(typeof healthData.metrics.memory.total).toBe('number');\n        expect(healthData.metrics.memory.used).toBeGreaterThan(0);\n        expect(healthData.metrics.memory.total).toBeGreaterThan(healthData.metrics.memory.used);\n      }\n      \n      // Check CPU usage\n      if (healthData.metrics.cpu) {\n        expect(typeof healthData.metrics.cpu.usage).toBe('number');\n        expect(healthData.metrics.cpu.usage).toBeGreaterThanOrEqual(0);\n        expect(healthData.metrics.cpu.usage).toBeLessThanOrEqual(100);\n      }\n    });\n\n    test('should return consistent response format', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      expect(response.status).toBe(200);\n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('data');\n      expect(response.body.error).toBeUndefined();\n      \n      const healthData = response.body.data;\n      expect(healthData).toHaveProperty('status');\n      expect(healthData).toHaveProperty('timestamp');\n      expect(healthData).toHaveProperty('services');\n    });\n\n    test('should work without any headers', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      testUtils.assertSuccessResponse(response, 200);\n      \n      // Should work even without any special headers\n      expect(response.status).toBe(200);\n    });\n\n    test('should handle multiple concurrent health checks', async () => {\n      const responses = await testUtils.testConcurrency(\n        'GET',\n        '/api/v1/health/status',\n        10\n      );\n      \n      expect(responses).toHaveLength(10);\n      \n      responses.forEach(response => {\n        testUtils.assertSuccessResponse(response, 200);\n        testUtils.assertResponseTime(response, 100);\n      });\n      \n      // All responses should be similar\n      const firstResponse = responses[0].body.data;\n      responses.forEach(response => {\n        expect(response.body.data.status).toBe(firstResponse.status);\n        expect(response.body.data.version).toBe(firstResponse.version);\n      });\n    });\n\n    test('should include API version information', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      const healthData = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(healthData).toHaveProperty('version');\n      expect(typeof healthData.version).toBe('string');\n      expect(healthData.version.length).toBeGreaterThan(0);\n      \n      // Version should follow semantic versioning pattern\n      expect(healthData.version).toMatch(/^\\d+\\.\\d+\\.\\d+/);\n    });\n\n    test('should include environment information', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      const healthData = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(healthData).toHaveProperty('environment');\n      expect(['development', 'test', 'staging', 'production']).toContain(healthData.environment);\n    });\n  });\n\n  describe('Database Connectivity Check', () => {\n    test('should verify database connection in health status', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      const healthData = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(healthData.services.database.status).toBe('healthy');\n      expect(healthData.services.database.responseTime).toBeLessThan(1000); // Should respond within 1 second\n    });\n\n    test('should include database connection pool status', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      const healthData = testUtils.assertSuccessResponse(response, 200);\n      \n      if (healthData.services.database.pool) {\n        expect(healthData.services.database.pool).toHaveProperty('active');\n        expect(healthData.services.database.pool).toHaveProperty('idle');\n        expect(healthData.services.database.pool).toHaveProperty('total');\n        \n        expect(typeof healthData.services.database.pool.active).toBe('number');\n        expect(typeof healthData.services.database.pool.idle).toBe('number');\n        expect(typeof healthData.services.database.pool.total).toBe('number');\n        \n        expect(healthData.services.database.pool.active).toBeGreaterThanOrEqual(0);\n        expect(healthData.services.database.pool.idle).toBeGreaterThanOrEqual(0);\n        expect(healthData.services.database.pool.total).toBeGreaterThan(0);\n      }\n    });\n\n    test('should test actual database query execution', async () => {\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      const healthData = testUtils.assertSuccessResponse(response, 200);\n      \n      // Database should be responding to queries\n      expect(healthData.services.database.status).toBe('healthy');\n      \n      // Response time should be reasonable\n      expect(healthData.services.database.responseTime).toBeLessThan(500);\n    });\n  });\n\n  describe('Health Endpoint Performance', () => {\n    test('should respond within 50ms', async () => {\n      const { response, passed } = await testUtils.testPerformance(\n        'GET',\n        '/api/v1/health/status',\n        50\n      );\n      \n      expect(passed).toBe(true);\n      testUtils.assertSuccessResponse(response, 200);\n    });\n\n    test('should maintain performance under load', async () => {\n      const responses = await testUtils.testConcurrency(\n        'GET',\n        '/api/v1/health/status',\n        20\n      );\n      \n      expect(responses).toHaveLength(20);\n      \n      responses.forEach(response => {\n        testUtils.assertSuccessResponse(response, 200);\n        testUtils.assertResponseTime(response, 100); // Allow more time under load\n      });\n    });\n\n    test('should have consistent response times', async () => {\n      const responseTimes: number[] = [];\n      \n      // Make 10 sequential requests\n      for (let i = 0; i < 10; i++) {\n        const start = Date.now();\n        const response = await testUtils.publicGet('/api/v1/health/status');\n        const responseTime = Date.now() - start;\n        \n        testUtils.assertSuccessResponse(response, 200);\n        responseTimes.push(responseTime);\n      }\n      \n      // Calculate average and standard deviation\n      const average = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;\n      const variance = responseTimes.reduce((a, b) => a + Math.pow(b - average, 2), 0) / responseTimes.length;\n      const stdDev = Math.sqrt(variance);\n      \n      // Response times should be consistent (low standard deviation)\n      expect(average).toBeLessThan(100);\n      expect(stdDev).toBeLessThan(50); // Low variance in response times\n    });\n\n    test('should not degrade with rapid successive calls', async () => {\n      const promises = [];\n      \n      // Make 50 rapid requests\n      for (let i = 0; i < 50; i++) {\n        promises.push(testUtils.publicGet('/api/v1/health/status'));\n      }\n      \n      const responses = await Promise.all(promises);\n      \n      responses.forEach(response => {\n        testUtils.assertSuccessResponse(response, 200);\n        testUtils.assertResponseTime(response, 150);\n      });\n    });\n  });\n\n  describe('Health Endpoint Edge Cases', () => {\n    test('should handle malformed requests gracefully', async () => {\n      // Test with various malformed requests\n      const malformedRequests = [\n        '/api/v1/health/status?invalid=param',\n        '/api/v1/health/status/',\n        '/api/v1/health/status#fragment',\n        '/api/v1/health/status?format=xml'\n      ];\n      \n      for (const url of malformedRequests) {\n        const response = await testUtils.publicGet(url);\n        \n        // Should still return health status (ignore invalid params)\n        testUtils.assertSuccessResponse(response, 200);\n      }\n    });\n\n    test('should work with different HTTP methods', async () => {\n      // Health endpoint should only work with GET\n      const response = await testUtils.get('/api/v1/health/status');\n      testUtils.assertSuccessResponse(response, 200);\n      \n      // Other methods should return 405 Method Not Allowed\n      try {\n        await testUtils.post('/api/v1/health/status', {});\n      } catch (error) {\n        // Expected to fail\n      }\n    });\n\n    test('should handle very high concurrent load', async () => {\n      const responses = await testUtils.testConcurrency(\n        'GET',\n        '/api/v1/health/status',\n        100 // High concurrency\n      );\n      \n      expect(responses).toHaveLength(100);\n      \n      // Most requests should succeed\n      const successfulResponses = responses.filter(r => r.status === 200);\n      expect(successfulResponses.length).toBeGreaterThan(90); // At least 90% success rate\n      \n      successfulResponses.forEach(response => {\n        testUtils.assertResponseTime(response, 200);\n      });\n    });\n\n    test('should return appropriate status during system stress', async () => {\n      // This test would ideally stress the system and check health status\n      const response = await testUtils.publicGet('/api/v1/health/status');\n      \n      const healthData = testUtils.assertSuccessResponse(response, 200);\n      \n      // Status should be one of the valid states\n      expect(['healthy', 'degraded', 'unhealthy']).toContain(healthData.status);\n      \n      // Services should have valid statuses\n      Object.values(healthData.services).forEach((service: any) => {\n        expect(['healthy', 'degraded', 'unhealthy']).toContain(service.status);\n      });\n    });\n  });\n});\n"],"version":3}