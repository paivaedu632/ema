df1f3d5611d2b78cbbce9fde582c165a
"use strict";
/**
 * Health Check & System Tests
 * Tests for /api/v1/health/* endpoints
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const utils_1 = require("../utils");
(0, globals_1.describe)('Health Check & System Endpoints', () => {
    (0, globals_1.describe)('GET /api/v1/health/status - System Health', () => {
        (0, globals_1.test)('should return system health status without authentication', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            const healthData = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(healthData).toHaveProperty('status');
            (0, globals_1.expect)(healthData).toHaveProperty('timestamp');
            (0, globals_1.expect)(healthData).toHaveProperty('version');
            (0, globals_1.expect)(healthData).toHaveProperty('uptime');
            (0, globals_1.expect)(healthData.status).toBe('healthy');
            (0, globals_1.expect)(typeof healthData.timestamp).toBe('string');
            (0, globals_1.expect)(new Date(healthData.timestamp)).toBeInstanceOf(Date);
            (0, globals_1.expect)(typeof healthData.uptime).toBe('number');
            (0, globals_1.expect)(healthData.uptime).toBeGreaterThan(0);
            // Assert response time
            utils_1.testUtils.assertResponseTime(response, 50);
        });
        (0, globals_1.test)('should include database status checks', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            const healthData = utils_1.testUtils.assertSuccessResponse(response, 200);
            // Check database status (actual API format)
            (0, globals_1.expect)(healthData).toHaveProperty('database');
            (0, globals_1.expect)(healthData.database).toHaveProperty('status');
            (0, globals_1.expect)(healthData.database).toHaveProperty('timestamp');
            (0, globals_1.expect)(healthData.database.status).toBe('connected');
            (0, globals_1.expect)(typeof healthData.database.timestamp).toBe('string');
        });
        globals_1.test.skip('should include system metrics (not implemented)', async () => {
            // This test is skipped because the current health endpoint
            // doesn't include metrics - it's a simpler implementation
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            const healthData = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(healthData).toHaveProperty('metrics');
        });
        (0, globals_1.test)('should return consistent response format', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(response.body).toHaveProperty('success', true);
            (0, globals_1.expect)(response.body).toHaveProperty('data');
            (0, globals_1.expect)(response.body.error).toBeUndefined();
            const healthData = response.body.data;
            (0, globals_1.expect)(healthData).toHaveProperty('status');
            (0, globals_1.expect)(healthData).toHaveProperty('timestamp');
            (0, globals_1.expect)(healthData).toHaveProperty('database');
            (0, globals_1.expect)(healthData).toHaveProperty('version');
            (0, globals_1.expect)(healthData).toHaveProperty('environment');
        });
        (0, globals_1.test)('should work without any headers', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            utils_1.testUtils.assertSuccessResponse(response, 200);
            // Should work even without any special headers
            (0, globals_1.expect)(response.status).toBe(200);
        });
        (0, globals_1.test)('should handle multiple concurrent health checks', async () => {
            const responses = await utils_1.testUtils.testConcurrency('GET', '/api/v1/health/status', 10);
            (0, globals_1.expect)(responses).toHaveLength(10);
            responses.forEach(response => {
                utils_1.testUtils.assertSuccessResponse(response, 200);
                utils_1.testUtils.assertResponseTime(response, 1000); // More realistic for concurrent requests
            });
            // All responses should be similar
            const firstResponse = responses[0].body.data;
            responses.forEach(response => {
                (0, globals_1.expect)(response.body.data.status).toBe(firstResponse.status);
                (0, globals_1.expect)(response.body.data.version).toBe(firstResponse.version);
            });
        });
        (0, globals_1.test)('should include API version information', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            const healthData = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(healthData).toHaveProperty('version');
            (0, globals_1.expect)(typeof healthData.version).toBe('string');
            (0, globals_1.expect)(healthData.version.length).toBeGreaterThan(0);
            // Version should follow semantic versioning pattern
            (0, globals_1.expect)(healthData.version).toMatch(/^\d+\.\d+\.\d+/);
        });
        (0, globals_1.test)('should include environment information', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            const healthData = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(healthData).toHaveProperty('environment');
            (0, globals_1.expect)(['development', 'test', 'staging', 'production']).toContain(healthData.environment);
        });
    });
    (0, globals_1.describe)('Database Connectivity Check', () => {
        (0, globals_1.test)('should verify database connection in health status', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            const healthData = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(healthData.database.status).toBe('connected');
            (0, globals_1.expect)(healthData.database).toHaveProperty('timestamp');
        });
        globals_1.test.skip('should include database connection pool status (not implemented)', async () => {
            // This test is skipped because the current health endpoint
            // doesn't include connection pool metrics
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            const healthData = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(healthData.database).toHaveProperty('status');
        });
        (0, globals_1.test)('should test actual database query execution', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            const healthData = utils_1.testUtils.assertSuccessResponse(response, 200);
            // Database should be responding to queries
            (0, globals_1.expect)(healthData.database.status).toBe('connected');
            // Should have a recent timestamp
            const timestamp = new Date(healthData.database.timestamp);
            const now = new Date();
            (0, globals_1.expect)(now.getTime() - timestamp.getTime()).toBeLessThan(5000); // Within 5 seconds
        });
    });
    (0, globals_1.describe)('Health Endpoint Performance', () => {
        (0, globals_1.test)('should respond within 500ms', async () => {
            const { response, passed } = await utils_1.testUtils.testPerformance('GET', '/api/v1/health/status', 500);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertSuccessResponse(response, 200);
        });
        (0, globals_1.test)('should maintain performance under load', async () => {
            const responses = await utils_1.testUtils.testConcurrency('GET', '/api/v1/health/status', 20);
            (0, globals_1.expect)(responses).toHaveLength(20);
            responses.forEach(response => {
                utils_1.testUtils.assertSuccessResponse(response, 200);
                utils_1.testUtils.assertResponseTime(response, 1000); // Allow more time under load
            });
        });
        (0, globals_1.test)('should have consistent response times', async () => {
            const responseTimes = [];
            // Make 10 sequential requests
            for (let i = 0; i < 10; i++) {
                const start = Date.now();
                const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
                const responseTime = Date.now() - start;
                utils_1.testUtils.assertSuccessResponse(response, 200);
                responseTimes.push(responseTime);
            }
            // Calculate average and standard deviation
            const average = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
            const variance = responseTimes.reduce((a, b) => a + Math.pow(b - average, 2), 0) / responseTimes.length;
            const stdDev = Math.sqrt(variance);
            // Response times should be consistent (low standard deviation)
            (0, globals_1.expect)(average).toBeLessThan(1000); // More realistic average
            (0, globals_1.expect)(stdDev).toBeLessThan(500); // Allow more variance
        });
        (0, globals_1.test)('should not degrade with rapid successive calls', async () => {
            const promises = [];
            // Make 50 rapid requests
            for (let i = 0; i < 50; i++) {
                promises.push(utils_1.testUtils.publicGet('/api/v1/health/status'));
            }
            const responses = await Promise.all(promises);
            responses.forEach(response => {
                utils_1.testUtils.assertSuccessResponse(response, 200);
                utils_1.testUtils.assertResponseTime(response, 2000); // Allow more time for rapid calls
            });
        });
    });
    (0, globals_1.describe)('Health Endpoint Edge Cases', () => {
        (0, globals_1.test)('should handle malformed requests gracefully', async () => {
            // Test with various malformed requests
            const malformedRequests = [
                '/api/v1/health/status?invalid=param',
                '/api/v1/health/status/',
                '/api/v1/health/status#fragment',
                '/api/v1/health/status?format=xml'
            ];
            for (const url of malformedRequests) {
                const response = await utils_1.testUtils.publicGet(url);
                // Should still return health status (ignore invalid params)
                utils_1.testUtils.assertSuccessResponse(response, 200);
            }
        });
        (0, globals_1.test)('should work with different HTTP methods', async () => {
            // Health endpoint should only work with GET
            const response = await utils_1.testUtils.get('/api/v1/health/status');
            utils_1.testUtils.assertSuccessResponse(response, 200);
            // Other methods should return 405 Method Not Allowed
            try {
                await utils_1.testUtils.post('/api/v1/health/status', {});
            }
            catch (error) {
                // Expected to fail
            }
        });
        (0, globals_1.test)('should handle very high concurrent load', async () => {
            const responses = await utils_1.testUtils.testConcurrency('GET', '/api/v1/health/status', 100 // High concurrency
            );
            (0, globals_1.expect)(responses).toHaveLength(100);
            // Most requests should succeed
            const successfulResponses = responses.filter(r => r.status === 200);
            (0, globals_1.expect)(successfulResponses.length).toBeGreaterThan(90); // At least 90% success rate
            successfulResponses.forEach(response => {
                utils_1.testUtils.assertResponseTime(response, 3000); // Allow more time for high load
            });
        });
        (0, globals_1.test)('should return appropriate status during system stress', async () => {
            // This test would ideally stress the system and check health status
            const response = await utils_1.testUtils.publicGet('/api/v1/health/status');
            const healthData = utils_1.testUtils.assertSuccessResponse(response, 200);
            // Status should be one of the valid states
            (0, globals_1.expect)(['healthy', 'degraded', 'unhealthy']).toContain(healthData.status);
            // Database should have valid status
            (0, globals_1.expect)(['connected', 'disconnected']).toContain(healthData.database.status);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,