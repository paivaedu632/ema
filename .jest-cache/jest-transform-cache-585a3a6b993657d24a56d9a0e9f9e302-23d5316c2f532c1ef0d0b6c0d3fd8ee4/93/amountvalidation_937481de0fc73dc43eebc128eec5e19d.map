{"version":3,"names":["cov_1arwvbb2fl","actualCoverage","VALIDATION_RULES","s","buy","AOA","min","message","EUR","max","sell","send","exchange","deposit","validateAmount","amount","currency","transactionType","f","numericAmount","b","parseFloat","isNaN","isValid","errorMessage","rules","_a","rule","undefined","getMinimumAmount","minRule","find","getMaximumAmount","maxRule"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\utils\\amount-validation.ts"],"sourcesContent":["/**\n * Amount validation utilities for EmaPay transactions\n * Provides validation rules and error messages for different transaction types\n */\n\nexport type TransactionType = 'buy' | 'sell' | 'send' | 'exchange' | 'deposit'\nexport type Currency = 'AOA' | 'EUR'\n\nexport interface ValidationRule {\n  min?: number\n  max?: number\n  message: string\n}\n\nexport interface ValidationResult {\n  isValid: boolean\n  errorMessage?: string\n}\n\n/**\n * Validation rules for different transaction types and currencies\n */\nconst VALIDATION_RULES: Record<TransactionType, Record<Currency, ValidationRule[]>> = {\n  buy: {\n    AOA: [\n      { min: 10000, message: \"Valor mínimo: 10,000 AOA\" }\n    ],\n    EUR: [\n      { min: 10, message: \"Valor mínimo: 10 EUR\" },\n      { max: 50000, message: \"Valor máximo: 50,000 EUR\" }\n    ]\n  },\n  sell: {\n    AOA: [\n      { min: 10000, message: \"Valor mínimo: 10,000 AOA\" }\n    ],\n    EUR: [\n      { min: 10, message: \"Valor mínimo: 10 EUR\" },\n      { max: 100000, message: \"Valor máximo: 100,000 EUR\" }\n    ]\n  },\n  send: {\n    AOA: [\n      { min: 1, message: \"Mínimo: acima de 0 AOA\" },\n      { max: 1000000, message: \"Valor máximo: 1,000,000 AOA\" }\n    ],\n    EUR: [\n      { min: 0.01, message: \"Mínimo: acima de 0 EUR\" },\n      { max: 10000, message: \"Valor máximo: 10,000 EUR\" }\n    ]\n  },\n  exchange: {\n    AOA: [\n      { min: 0.01, message: \"Mínimo: acima de 0 AOA\" }\n    ],\n    EUR: [\n      { min: 0.01, message: \"Mínimo: acima de 0 EUR\" }\n    ]\n  },\n  deposit: {\n    AOA: [\n      { min: 0.01, message: \"Mínimo: acima de 0 AOA\" }\n    ],\n    EUR: [\n      { min: 0.01, message: \"Mínimo: acima de 0 EUR\" }\n    ]\n  }\n}\n\n/**\n * Validates an amount for a specific transaction type and currency\n */\nexport function validateAmount(\n  amount: string | number,\n  currency: Currency,\n  transactionType: TransactionType\n): ValidationResult {\n  // Convert to number\n  const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount\n  \n  // Check if it's a valid number\n  if (isNaN(numericAmount) || numericAmount < 0) {\n    return {\n      isValid: false,\n      errorMessage: \"Por favor, insira um valor válido\"\n    }\n  }\n\n  // Get validation rules for this transaction type and currency\n  const rules = VALIDATION_RULES[transactionType]?.[currency] || []\n  \n  // Check each rule\n  for (const rule of rules) {\n    if (rule.min !== undefined && numericAmount < rule.min) {\n      return {\n        isValid: false,\n        errorMessage: rule.message\n      }\n    }\n    \n    if (rule.max !== undefined && numericAmount > rule.max) {\n      return {\n        isValid: false,\n        errorMessage: rule.message\n      }\n    }\n  }\n\n  return { isValid: true }\n}\n\n// Formatting functions are in @/lib/format - use those instead\n\n/**\n * Gets the minimum amount for a transaction type and currency\n */\nexport function getMinimumAmount(currency: Currency, transactionType: TransactionType): number | undefined {\n  const rules = VALIDATION_RULES[transactionType]?.[currency] || []\n  const minRule = rules.find(rule => rule.min !== undefined)\n  return minRule?.min\n}\n\n/**\n * Gets the maximum amount for a transaction type and currency\n */\nexport function getMaximumAmount(currency: Currency, transactionType: TransactionType): number | undefined {\n  const rules = VALIDATION_RULES[transactionType]?.[currency] || []\n  const maxRule = rules.find(rule => rule.max !== undefined)\n  return maxRule?.max\n}\n"],"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","ignoreList":[]}