{"version":3,"names":["cov_1ecl2bvh6r","actualCoverage","v4","uuidv4","EntityId","constructor","value","f","s","b","trim","length","Error","_value","equals","other","toString","toJSON","UserId","fromString","generate","fromClerkId","clerkId","startsWith","isClerkId","WalletId","TransactionId","generateWithPrefix","prefix","uuid","replace","substring","toUpperCase","OrderId","KycRecordId","DocumentId","generateWithType","type"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\EntityId.ts"],"sourcesContent":["/**\n * Entity ID Value Objects\n * \n * Strongly-typed ID value objects for domain entities.\n * Prevents mixing up different types of IDs and provides type safety.\n */\n\nimport { v4 as uuidv4 } from 'uuid'\n\n/**\n * Base class for all entity IDs\n */\nabstract class EntityId {\n  protected readonly _value: string\n\n  protected constructor(value: string) {\n    if (!value || value.trim().length === 0) {\n      throw new Error('ID cannot be empty')\n    }\n    this._value = value.trim()\n  }\n\n  /**\n   * Get the string value of the ID\n   */\n  get value(): string {\n    return this._value\n  }\n\n  /**\n   * Check if this ID equals another\n   */\n  equals(other: EntityId): boolean {\n    return this._value === other._value && this.constructor === other.constructor\n  }\n\n  /**\n   * Convert to string\n   */\n  toString(): string {\n    return this._value\n  }\n\n  /**\n   * Convert to JSON\n   */\n  toJSON(): string {\n    return this._value\n  }\n}\n\n/**\n * User ID value object\n */\nexport class UserId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create UserId from string\n   */\n  static fromString(value: string): UserId {\n    return new UserId(value)\n  }\n\n  /**\n   * Generate new random UserId\n   */\n  static generate(): UserId {\n    return new UserId(uuidv4())\n  }\n\n  /**\n   * Create UserId from Clerk user ID\n   */\n  static fromClerkId(clerkId: string): UserId {\n    if (!clerkId.startsWith('user_')) {\n      throw new Error('Invalid Clerk user ID format')\n    }\n    return new UserId(clerkId)\n  }\n\n  /**\n   * Check if this is a Clerk ID\n   */\n  isClerkId(): boolean {\n    return this._value.startsWith('user_')\n  }\n}\n\n/**\n * Wallet ID value object\n */\nexport class WalletId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create WalletId from string\n   */\n  static fromString(value: string): WalletId {\n    return new WalletId(value)\n  }\n\n  /**\n   * Generate new random WalletId\n   */\n  static generate(): WalletId {\n    return new WalletId(uuidv4())\n  }\n}\n\n/**\n * Transaction ID value object\n */\nexport class TransactionId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create TransactionId from string\n   */\n  static fromString(value: string): TransactionId {\n    return new TransactionId(value)\n  }\n\n  /**\n   * Generate new random TransactionId\n   */\n  static generate(): TransactionId {\n    return new TransactionId(uuidv4())\n  }\n\n  /**\n   * Create TransactionId with prefix for better readability\n   */\n  static generateWithPrefix(prefix: 'TXN' | 'DEP' | 'WTH' | 'SND' | 'BUY' | 'SEL'): TransactionId {\n    const uuid = uuidv4().replace(/-/g, '').substring(0, 8).toUpperCase()\n    return new TransactionId(`${prefix}_${uuid}`)\n  }\n}\n\n/**\n * Order ID value object (for trading orders)\n */\nexport class OrderId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create OrderId from string\n   */\n  static fromString(value: string): OrderId {\n    return new OrderId(value)\n  }\n\n  /**\n   * Generate new random OrderId\n   */\n  static generate(): OrderId {\n    return new OrderId(uuidv4())\n  }\n\n  /**\n   * Create OrderId with prefix for order type\n   */\n  static generateWithPrefix(prefix: 'BUY' | 'SELL'): OrderId {\n    const uuid = uuidv4().replace(/-/g, '').substring(0, 8).toUpperCase()\n    return new OrderId(`${prefix}_${uuid}`)\n  }\n}\n\n/**\n * KYC Record ID value object\n */\nexport class KycRecordId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create KycRecordId from string\n   */\n  static fromString(value: string): KycRecordId {\n    return new KycRecordId(value)\n  }\n\n  /**\n   * Generate new random KycRecordId\n   */\n  static generate(): KycRecordId {\n    return new KycRecordId(uuidv4())\n  }\n}\n\n/**\n * Document ID value object (for KYC documents)\n */\nexport class DocumentId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create DocumentId from string\n   */\n  static fromString(value: string): DocumentId {\n    return new DocumentId(value)\n  }\n\n  /**\n   * Generate new random DocumentId\n   */\n  static generate(): DocumentId {\n    return new DocumentId(uuidv4())\n  }\n\n  /**\n   * Create DocumentId with document type prefix\n   */\n  static generateWithType(type: 'ID_FRONT' | 'ID_BACK' | 'SELFIE' | 'PROOF_ADDR'): DocumentId {\n    const uuid = uuidv4().replace(/-/g, '').substring(0, 8).toUpperCase()\n    return new DocumentId(`${type}_${uuid}`)\n  }\n}\n\n// Export all ID types\nexport type AnyEntityId = UserId | WalletId | TransactionId | OrderId | KycRecordId | DocumentId\n"],"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","ignoreList":[]}