0df875abd39c90d1a1144107156e7af1
/* istanbul ignore next */
function cov_1ecl2bvh6r() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\EntityId.ts";
  var hash = "c08fd21c8cc9314b88796a1dd25f790c510e9536";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\EntityId.ts",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 15,
          column: 9
        }
      },
      "1": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 50
        }
      },
      "2": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "3": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 27
        }
      },
      "4": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 86
        }
      },
      "5": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 27
        }
      },
      "6": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 27
        }
      },
      "7": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 21
        }
      },
      "8": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 33
        }
      },
      "9": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 36
        }
      },
      "10": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "11": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 60
        }
      },
      "12": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 35
        }
      },
      "13": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 47
        }
      },
      "14": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 21
        }
      },
      "15": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 35
        }
      },
      "16": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 38
        }
      },
      "17": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 21
        }
      },
      "18": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 40
        }
      },
      "19": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 43
        }
      },
      "20": {
        start: {
          line: 121,
          column: 21
        },
        end: {
          line: 121,
          column: 77
        }
      },
      "21": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 54
        }
      },
      "22": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 21
        }
      },
      "23": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 34
        }
      },
      "24": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 37
        }
      },
      "25": {
        start: {
          line: 148,
          column: 21
        },
        end: {
          line: 148,
          column: 77
        }
      },
      "26": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 48
        }
      },
      "27": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 21
        }
      },
      "28": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 38
        }
      },
      "29": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 169,
          column: 41
        }
      },
      "30": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 21
        }
      },
      "31": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 37
        }
      },
      "32": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 40
        }
      },
      "33": {
        start: {
          line: 195,
          column: 21
        },
        end: {
          line: 195,
          column: 77
        }
      },
      "34": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 49
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 23
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 18
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 27
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 15
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 33
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 13
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 23
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 29
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 53
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 22
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 59
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 32
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 65
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 16
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 74
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 82
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 29
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 88
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 22
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 94
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 23
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 102
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 29
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 108
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 22
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 114
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 38
          },
          end: {
            line: 123,
            column: 5
          }
        },
        line: 120
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 129
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 29
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 135
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 22
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 141
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 38
          },
          end: {
            line: 150,
            column: 5
          }
        },
        line: 147
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 23
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 156
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 29
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 162
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 22
          },
          end: {
            line: 170,
            column: 5
          }
        },
        line: 168
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 23
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 176
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 29
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 182
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 22
          },
          end: {
            line: 190,
            column: 5
          }
        },
        line: 188
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 34
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 194
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 13,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 13,
            column: 18
          }
        }, {
          start: {
            line: 13,
            column: 22
          },
          end: {
            line: 13,
            column: 47
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 15
          },
          end: {
            line: 28,
            column: 43
          }
        }, {
          start: {
            line: 28,
            column: 47
          },
          end: {
            line: 28,
            column: 85
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\EntityId.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\EntityId.ts"],
      sourcesContent: ["/**\n * Entity ID Value Objects\n * \n * Strongly-typed ID value objects for domain entities.\n * Prevents mixing up different types of IDs and provides type safety.\n */\n\nimport { v4 as uuidv4 } from 'uuid'\n\n/**\n * Base class for all entity IDs\n */\nabstract class EntityId {\n  protected readonly _value: string\n\n  protected constructor(value: string) {\n    if (!value || value.trim().length === 0) {\n      throw new Error('ID cannot be empty')\n    }\n    this._value = value.trim()\n  }\n\n  /**\n   * Get the string value of the ID\n   */\n  get value(): string {\n    return this._value\n  }\n\n  /**\n   * Check if this ID equals another\n   */\n  equals(other: EntityId): boolean {\n    return this._value === other._value && this.constructor === other.constructor\n  }\n\n  /**\n   * Convert to string\n   */\n  toString(): string {\n    return this._value\n  }\n\n  /**\n   * Convert to JSON\n   */\n  toJSON(): string {\n    return this._value\n  }\n}\n\n/**\n * User ID value object\n */\nexport class UserId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create UserId from string\n   */\n  static fromString(value: string): UserId {\n    return new UserId(value)\n  }\n\n  /**\n   * Generate new random UserId\n   */\n  static generate(): UserId {\n    return new UserId(uuidv4())\n  }\n\n  /**\n   * Create UserId from Clerk user ID\n   */\n  static fromClerkId(clerkId: string): UserId {\n    if (!clerkId.startsWith('user_')) {\n      throw new Error('Invalid Clerk user ID format')\n    }\n    return new UserId(clerkId)\n  }\n\n  /**\n   * Check if this is a Clerk ID\n   */\n  isClerkId(): boolean {\n    return this._value.startsWith('user_')\n  }\n}\n\n/**\n * Wallet ID value object\n */\nexport class WalletId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create WalletId from string\n   */\n  static fromString(value: string): WalletId {\n    return new WalletId(value)\n  }\n\n  /**\n   * Generate new random WalletId\n   */\n  static generate(): WalletId {\n    return new WalletId(uuidv4())\n  }\n}\n\n/**\n * Transaction ID value object\n */\nexport class TransactionId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create TransactionId from string\n   */\n  static fromString(value: string): TransactionId {\n    return new TransactionId(value)\n  }\n\n  /**\n   * Generate new random TransactionId\n   */\n  static generate(): TransactionId {\n    return new TransactionId(uuidv4())\n  }\n\n  /**\n   * Create TransactionId with prefix for better readability\n   */\n  static generateWithPrefix(prefix: 'TXN' | 'DEP' | 'WTH' | 'SND' | 'BUY' | 'SEL'): TransactionId {\n    const uuid = uuidv4().replace(/-/g, '').substring(0, 8).toUpperCase()\n    return new TransactionId(`${prefix}_${uuid}`)\n  }\n}\n\n/**\n * Order ID value object (for trading orders)\n */\nexport class OrderId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create OrderId from string\n   */\n  static fromString(value: string): OrderId {\n    return new OrderId(value)\n  }\n\n  /**\n   * Generate new random OrderId\n   */\n  static generate(): OrderId {\n    return new OrderId(uuidv4())\n  }\n\n  /**\n   * Create OrderId with prefix for order type\n   */\n  static generateWithPrefix(prefix: 'BUY' | 'SELL'): OrderId {\n    const uuid = uuidv4().replace(/-/g, '').substring(0, 8).toUpperCase()\n    return new OrderId(`${prefix}_${uuid}`)\n  }\n}\n\n/**\n * KYC Record ID value object\n */\nexport class KycRecordId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create KycRecordId from string\n   */\n  static fromString(value: string): KycRecordId {\n    return new KycRecordId(value)\n  }\n\n  /**\n   * Generate new random KycRecordId\n   */\n  static generate(): KycRecordId {\n    return new KycRecordId(uuidv4())\n  }\n}\n\n/**\n * Document ID value object (for KYC documents)\n */\nexport class DocumentId extends EntityId {\n  private constructor(value: string) {\n    super(value)\n  }\n\n  /**\n   * Create DocumentId from string\n   */\n  static fromString(value: string): DocumentId {\n    return new DocumentId(value)\n  }\n\n  /**\n   * Generate new random DocumentId\n   */\n  static generate(): DocumentId {\n    return new DocumentId(uuidv4())\n  }\n\n  /**\n   * Create DocumentId with document type prefix\n   */\n  static generateWithType(type: 'ID_FRONT' | 'ID_BACK' | 'SELFIE' | 'PROOF_ADDR'): DocumentId {\n    const uuid = uuidv4().replace(/-/g, '').substring(0, 8).toUpperCase()\n    return new DocumentId(`${type}_${uuid}`)\n  }\n}\n\n// Export all ID types\nexport type AnyEntityId = UserId | WalletId | TransactionId | OrderId | KycRecordId | DocumentId\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c08fd21c8cc9314b88796a1dd25f790c510e9536"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ecl2bvh6r = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ecl2bvh6r();
/**
 * Entity ID Value Objects
 *
 * Strongly-typed ID value objects for domain entities.
 * Prevents mixing up different types of IDs and provides type safety.
 */
import { v4 as uuidv4 } from 'uuid';
/**
 * Base class for all entity IDs
 */
class EntityId {
  constructor(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[0]++;
    cov_1ecl2bvh6r().s[0]++;
    if (
    /* istanbul ignore next */
    (cov_1ecl2bvh6r().b[1][0]++, !value) ||
    /* istanbul ignore next */
    (cov_1ecl2bvh6r().b[1][1]++, value.trim().length === 0)) {
      /* istanbul ignore next */
      cov_1ecl2bvh6r().b[0][0]++;
      cov_1ecl2bvh6r().s[1]++;
      throw new Error('ID cannot be empty');
    } else
    /* istanbul ignore next */
    {
      cov_1ecl2bvh6r().b[0][1]++;
    }
    cov_1ecl2bvh6r().s[2]++;
    this._value = value.trim();
  }
  /**
   * Get the string value of the ID
   */
  get value() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[1]++;
    cov_1ecl2bvh6r().s[3]++;
    return this._value;
  }
  /**
   * Check if this ID equals another
   */
  equals(other) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[2]++;
    cov_1ecl2bvh6r().s[4]++;
    return /* istanbul ignore next */(cov_1ecl2bvh6r().b[2][0]++, this._value === other._value) &&
    /* istanbul ignore next */
    (cov_1ecl2bvh6r().b[2][1]++, this.constructor === other.constructor);
  }
  /**
   * Convert to string
   */
  toString() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[3]++;
    cov_1ecl2bvh6r().s[5]++;
    return this._value;
  }
  /**
   * Convert to JSON
   */
  toJSON() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[4]++;
    cov_1ecl2bvh6r().s[6]++;
    return this._value;
  }
}
/**
 * User ID value object
 */
export class UserId extends EntityId {
  constructor(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[5]++;
    cov_1ecl2bvh6r().s[7]++;
    super(value);
  }
  /**
   * Create UserId from string
   */
  static fromString(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[6]++;
    cov_1ecl2bvh6r().s[8]++;
    return new UserId(value);
  }
  /**
   * Generate new random UserId
   */
  static generate() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[7]++;
    cov_1ecl2bvh6r().s[9]++;
    return new UserId(uuidv4());
  }
  /**
   * Create UserId from Clerk user ID
   */
  static fromClerkId(clerkId) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[8]++;
    cov_1ecl2bvh6r().s[10]++;
    if (!clerkId.startsWith('user_')) {
      /* istanbul ignore next */
      cov_1ecl2bvh6r().b[3][0]++;
      cov_1ecl2bvh6r().s[11]++;
      throw new Error('Invalid Clerk user ID format');
    } else
    /* istanbul ignore next */
    {
      cov_1ecl2bvh6r().b[3][1]++;
    }
    cov_1ecl2bvh6r().s[12]++;
    return new UserId(clerkId);
  }
  /**
   * Check if this is a Clerk ID
   */
  isClerkId() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[9]++;
    cov_1ecl2bvh6r().s[13]++;
    return this._value.startsWith('user_');
  }
}
/**
 * Wallet ID value object
 */
export class WalletId extends EntityId {
  constructor(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[10]++;
    cov_1ecl2bvh6r().s[14]++;
    super(value);
  }
  /**
   * Create WalletId from string
   */
  static fromString(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[11]++;
    cov_1ecl2bvh6r().s[15]++;
    return new WalletId(value);
  }
  /**
   * Generate new random WalletId
   */
  static generate() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[12]++;
    cov_1ecl2bvh6r().s[16]++;
    return new WalletId(uuidv4());
  }
}
/**
 * Transaction ID value object
 */
export class TransactionId extends EntityId {
  constructor(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[13]++;
    cov_1ecl2bvh6r().s[17]++;
    super(value);
  }
  /**
   * Create TransactionId from string
   */
  static fromString(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[14]++;
    cov_1ecl2bvh6r().s[18]++;
    return new TransactionId(value);
  }
  /**
   * Generate new random TransactionId
   */
  static generate() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[15]++;
    cov_1ecl2bvh6r().s[19]++;
    return new TransactionId(uuidv4());
  }
  /**
   * Create TransactionId with prefix for better readability
   */
  static generateWithPrefix(prefix) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[16]++;
    const uuid =
    /* istanbul ignore next */
    (cov_1ecl2bvh6r().s[20]++, uuidv4().replace(/-/g, '').substring(0, 8).toUpperCase());
    /* istanbul ignore next */
    cov_1ecl2bvh6r().s[21]++;
    return new TransactionId(`${prefix}_${uuid}`);
  }
}
/**
 * Order ID value object (for trading orders)
 */
export class OrderId extends EntityId {
  constructor(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[17]++;
    cov_1ecl2bvh6r().s[22]++;
    super(value);
  }
  /**
   * Create OrderId from string
   */
  static fromString(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[18]++;
    cov_1ecl2bvh6r().s[23]++;
    return new OrderId(value);
  }
  /**
   * Generate new random OrderId
   */
  static generate() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[19]++;
    cov_1ecl2bvh6r().s[24]++;
    return new OrderId(uuidv4());
  }
  /**
   * Create OrderId with prefix for order type
   */
  static generateWithPrefix(prefix) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[20]++;
    const uuid =
    /* istanbul ignore next */
    (cov_1ecl2bvh6r().s[25]++, uuidv4().replace(/-/g, '').substring(0, 8).toUpperCase());
    /* istanbul ignore next */
    cov_1ecl2bvh6r().s[26]++;
    return new OrderId(`${prefix}_${uuid}`);
  }
}
/**
 * KYC Record ID value object
 */
export class KycRecordId extends EntityId {
  constructor(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[21]++;
    cov_1ecl2bvh6r().s[27]++;
    super(value);
  }
  /**
   * Create KycRecordId from string
   */
  static fromString(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[22]++;
    cov_1ecl2bvh6r().s[28]++;
    return new KycRecordId(value);
  }
  /**
   * Generate new random KycRecordId
   */
  static generate() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[23]++;
    cov_1ecl2bvh6r().s[29]++;
    return new KycRecordId(uuidv4());
  }
}
/**
 * Document ID value object (for KYC documents)
 */
export class DocumentId extends EntityId {
  constructor(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[24]++;
    cov_1ecl2bvh6r().s[30]++;
    super(value);
  }
  /**
   * Create DocumentId from string
   */
  static fromString(value) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[25]++;
    cov_1ecl2bvh6r().s[31]++;
    return new DocumentId(value);
  }
  /**
   * Generate new random DocumentId
   */
  static generate() {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[26]++;
    cov_1ecl2bvh6r().s[32]++;
    return new DocumentId(uuidv4());
  }
  /**
   * Create DocumentId with document type prefix
   */
  static generateWithType(type) {
    /* istanbul ignore next */
    cov_1ecl2bvh6r().f[27]++;
    const uuid =
    /* istanbul ignore next */
    (cov_1ecl2bvh6r().s[33]++, uuidv4().replace(/-/g, '').substring(0, 8).toUpperCase());
    /* istanbul ignore next */
    cov_1ecl2bvh6r().s[34]++;
    return new DocumentId(`${type}_${uuid}`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,