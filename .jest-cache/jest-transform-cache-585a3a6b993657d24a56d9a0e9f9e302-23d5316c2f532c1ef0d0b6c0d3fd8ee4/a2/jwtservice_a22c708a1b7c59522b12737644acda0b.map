{"version":3,"names":["cov_1p0hokefdj","actualCoverage","jwt","randomUUID","JWTService","constructor","f","s","secret","process","env","JWT_SECRET","defaultIssuer","b","JWT_ISSUER","defaultAudience","JWT_AUDIENCE","Error","generateToken","userId","options","sessionId","replace","jwtId","payload","sub","aud","audience","iss","issuer","jti","sid","role","tokenOptions","expiresIn","algorithm","sign","verifyToken","token","decoded","verify","algorithms","error","TokenExpiredError","JsonWebTokenError","decodeToken","decode","_a","generateRefreshToken","isTokenExpired","message","jwtService"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\auth\\jwt-service.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport { randomUUID } from 'crypto';\n\nexport interface JWTPayload {\n  sub: string; // user ID\n  aud: string; // audience\n  iss: string; // issuer\n  iat: number; // issued at\n  exp: number; // expires at\n  jti: string; // JWT ID\n  sid: string; // session ID\n  role: string; // user role\n}\n\nexport interface TokenOptions {\n  expiresIn?: string | number; // '30d', '1h', 3600, etc.\n  audience?: string;\n  issuer?: string;\n  role?: string;\n}\n\nexport class JWTService {\n  private readonly secret: string;\n  private readonly defaultIssuer: string;\n  private readonly defaultAudience: string;\n\n  constructor() {\n    this.secret = process.env.JWT_SECRET;\n    this.defaultIssuer = process.env.JWT_ISSUER || 'emapay-api';\n    this.defaultAudience = process.env.JWT_AUDIENCE || 'emapay-api';\n\n    if (!this.secret) {\n      throw new Error('JWT_SECRET environment variable is required');\n    }\n  }\n\n  /**\n   * Generate a JWT token for a user\n   */\n  generateToken(userId: string, options: TokenOptions = {}): string {\n    const sessionId = `sess_${randomUUID().replace(/-/g, '')}`;\n    const jwtId = `jwt_${randomUUID().replace(/-/g, '')}`;\n\n    const payload: Omit<JWTPayload, 'iat' | 'exp'> = {\n      sub: userId,\n      aud: options.audience || this.defaultAudience,\n      iss: options.issuer || this.defaultIssuer,\n      jti: jwtId,\n      sid: sessionId,\n      role: options.role || 'authenticated'\n    };\n\n    const tokenOptions: jwt.SignOptions = {\n      expiresIn: options.expiresIn || '30d',\n      algorithm: 'HS256'\n    };\n\n    return jwt.sign(payload, this.secret, tokenOptions);\n  }\n\n  /**\n   * Verify and decode a JWT token\n   */\n  verifyToken(token: string): JWTPayload {\n    try {\n      const decoded = jwt.verify(token, this.secret, {\n        algorithms: ['HS256'],\n        audience: this.defaultAudience,\n        issuer: this.defaultIssuer\n      }) as JWTPayload;\n\n      return decoded;\n    } catch (error) {\n      if (error instanceof jwt.TokenExpiredError) {\n        throw new Error('Token has expired');\n      }\n      if (error instanceof jwt.JsonWebTokenError) {\n        throw new Error('Invalid token');\n      }\n      throw new Error('Token verification failed');\n    }\n  }\n\n  /**\n   * Decode token without verification (for debugging)\n   */\n  decodeToken(token: string): JWTPayload | null {\n    try {\n      return jwt.decode(token) as JWTPayload;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Generate a refresh token (longer expiration)\n   */\n  generateRefreshToken(userId: string): string {\n    return this.generateToken(userId, {\n      expiresIn: '90d',\n      role: 'refresh'\n    });\n  }\n\n  /**\n   * Check if token is expired without throwing\n   */\n  isTokenExpired(token: string): boolean {\n    try {\n      this.verifyToken(token);\n      return false;\n    } catch (error) {\n      return error.message === 'Token has expired';\n    }\n  }\n}\n\n// Singleton instance\nexport const jwtService = new JWTService();\n"],"mappings":"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","ignoreList":[]}