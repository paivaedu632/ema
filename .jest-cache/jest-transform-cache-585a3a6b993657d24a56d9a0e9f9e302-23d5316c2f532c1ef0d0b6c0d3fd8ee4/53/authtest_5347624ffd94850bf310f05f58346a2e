5986c65c0194b640e7084f87712674a1
"use strict";
/**
 * Authentication Endpoint Tests
 * Tests for /api/v1/auth/* endpoints
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const utils_1 = require("../utils");
(0, globals_1.describe)('Authentication Endpoints', () => {
    let testUser;
    (0, globals_1.beforeAll)(async () => {
        // Create a test user for authentication tests
        testUser = await utils_1.testUtils.createUser({
            email: 'auth-test@emapay.test',
            metadata: { purpose: 'Authentication Testing' }
        });
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test users
        await utils_1.testUtils.cleanup();
    });
    (0, globals_1.describe)('GET /api/v1/auth/me - Valid JWT', () => {
        (0, globals_1.test)('should return user info with valid JWT token', async () => {
            const response = await utils_1.testUtils.get('/api/v1/auth/me', testUser);
            // Assert successful response
            const userData = utils_1.testUtils.assertSuccessResponse(response, 200);
            // Assert user data structure
            utils_1.testUtils.assertValidUserData(userData);
            // Assert specific user data
            (0, globals_1.expect)(userData.userId).toBe(testUser.id);
            (0, globals_1.expect)(userData.authenticated).toBe(true);
            (0, globals_1.expect)(userData).toHaveProperty('sessionId');
            (0, globals_1.expect)(userData).toHaveProperty('timestamp');
            // Assert response time
            utils_1.testUtils.assertResponseTime(response, 100);
        });
        (0, globals_1.test)('should include session information', async () => {
            const response = await utils_1.testUtils.get('/api/v1/auth/me', testUser);
            const userData = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(userData).toHaveProperty('sessionId');
            (0, globals_1.expect)(typeof userData.sessionId).toBe('string');
            (0, globals_1.expect)(userData.sessionId.length).toBeGreaterThan(0);
        });
        (0, globals_1.test)('should include timestamp in response', async () => {
            const response = await utils_1.testUtils.get('/api/v1/auth/me', testUser);
            const userData = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(userData).toHaveProperty('timestamp');
            (0, globals_1.expect)(new Date(userData.timestamp)).toBeInstanceOf(Date);
            // Timestamp should be recent (within last 5 seconds)
            const timestamp = new Date(userData.timestamp).getTime();
            const now = Date.now();
            (0, globals_1.expect)(now - timestamp).toBeLessThan(5000);
        });
        (0, globals_1.test)('should have consistent response format', async () => {
            const response = await utils_1.testUtils.get('/api/v1/auth/me', testUser);
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(response.body).toHaveProperty('success', true);
            (0, globals_1.expect)(response.body).toHaveProperty('data');
            (0, globals_1.expect)(response.body).toHaveProperty('message');
            (0, globals_1.expect)(response.body.error).toBeUndefined();
            const userData = response.body.data;
            (0, globals_1.expect)(userData).toHaveProperty('userId');
            (0, globals_1.expect)(userData).toHaveProperty('sessionId');
            (0, globals_1.expect)(userData).toHaveProperty('authenticated');
            (0, globals_1.expect)(userData).toHaveProperty('timestamp');
        });
        (0, globals_1.test)('should work with refreshed token', async () => {
            // Refresh the user's token
            const refreshedUser = await utils_1.testUtils.refreshUserToken(testUser);
            const response = await utils_1.testUtils.get('/api/v1/auth/me', refreshedUser);
            const userData = utils_1.testUtils.assertSuccessResponse(response, 200);
            utils_1.testUtils.assertValidUserData(userData);
            (0, globals_1.expect)(userData.userId).toBe(testUser.id);
            (0, globals_1.expect)(userData.authenticated).toBe(true);
        });
    });
    (0, globals_1.describe)('GET /api/v1/auth/me - Invalid JWT', () => {
        (0, globals_1.test)('should return 401 with missing Authorization header', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/auth/me');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('authorization');
            (0, globals_1.expect)(response.body.error.toLowerCase()).toContain('required');
        });
        (0, globals_1.test)('should return 401 with invalid JWT token', async () => {
            const response = await utils_1.testUtils.testWithInvalidToken('GET', '/api/v1/auth/me');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('token');
            (0, globals_1.expect)(response.body.error.toLowerCase()).toContain('invalid');
        });
        (0, globals_1.test)('should return 401 with expired JWT token', async () => {
            const response = await utils_1.testUtils.testWithExpiredToken('GET', '/api/v1/auth/me');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('token');
            (0, globals_1.expect)(response.body.error.toLowerCase()).toContain('expired');
        });
        (0, globals_1.test)('should return 401 with malformed JWT token', async () => {
            const malformedTokens = [
                'Bearer malformed-token',
                'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.malformed',
                'Bearer not.a.jwt.token',
                'Bearer ',
                'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9'
            ];
            for (const authHeader of malformedTokens) {
                const response = await utils_1.testUtils.get('/api/v1/auth/me', undefined, {
                    headers: { 'Authorization': authHeader }
                });
                utils_1.testUtils.assertErrorResponse(response, 401);
                (0, globals_1.expect)(response.body.error).toContain('token');
            }
        });
        (0, globals_1.test)('should return 401 with missing Bearer prefix', async () => {
            const response = await utils_1.testUtils.get('/api/v1/auth/me', undefined, {
                headers: { 'Authorization': testUser.accessToken }
            });
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('Bearer');
        });
        (0, globals_1.test)('should return 401 with wrong authorization scheme', async () => {
            const wrongSchemes = [
                `Basic ${testUser.accessToken}`,
                `Token ${testUser.accessToken}`,
                `JWT ${testUser.accessToken}`,
                `Api-Key ${testUser.accessToken}`
            ];
            for (const authHeader of wrongSchemes) {
                const response = await utils_1.testUtils.get('/api/v1/auth/me', undefined, {
                    headers: { 'Authorization': authHeader }
                });
                utils_1.testUtils.assertErrorResponse(response, 401);
            }
        });
    });
    (0, globals_1.describe)('Authorization Header Formats', () => {
        (0, globals_1.test)('should accept Bearer token with correct case', async () => {
            const response = await utils_1.testUtils.get('/api/v1/auth/me', undefined, {
                headers: { 'Authorization': `Bearer ${testUser.accessToken}` }
            });
            const userData = utils_1.testUtils.assertSuccessResponse(response, 200);
            utils_1.testUtils.assertValidUserData(userData);
        });
        (0, globals_1.test)('should be case sensitive for Bearer keyword', async () => {
            const caseSensitiveTests = [
                `bearer ${testUser.accessToken}`,
                `BEARER ${testUser.accessToken}`,
                `Bearer ${testUser.accessToken}`, // This should work
                `BeArEr ${testUser.accessToken}`
            ];
            for (let i = 0; i < caseSensitiveTests.length; i++) {
                const authHeader = caseSensitiveTests[i];
                const response = await utils_1.testUtils.get('/api/v1/auth/me', undefined, {
                    headers: { 'Authorization': authHeader }
                });
                if (i === 2) { // Only the correctly cased "Bearer" should work
                    utils_1.testUtils.assertSuccessResponse(response, 200);
                }
                else {
                    utils_1.testUtils.assertErrorResponse(response, 401);
                }
            }
        });
        (0, globals_1.test)('should handle extra spaces in authorization header', async () => {
            const spacingTests = [
                `Bearer  ${testUser.accessToken}`, // Extra space
                `Bearer\t${testUser.accessToken}`, // Tab character
                ` Bearer ${testUser.accessToken}`, // Leading space
                `Bearer ${testUser.accessToken} ` // Trailing space
            ];
            for (const authHeader of spacingTests) {
                const response = await utils_1.testUtils.get('/api/v1/auth/me', undefined, {
                    headers: { 'Authorization': authHeader }
                });
                // Most should fail due to strict parsing
                utils_1.testUtils.assertErrorResponse(response, 401);
            }
        });
    });
    (0, globals_1.describe)('Response Time Performance', () => {
        (0, globals_1.test)('should respond within 100ms for valid requests', async () => {
            const { response, passed } = await utils_1.testUtils.testPerformance('GET', '/api/v1/auth/me', 100, testUser);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertSuccessResponse(response, 200);
        });
        (0, globals_1.test)('should respond quickly even for invalid requests', async () => {
            const { response, passed } = await utils_1.testUtils.testPerformance('GET', '/api/v1/auth/me', 100);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertErrorResponse(response, 401);
        });
        (0, globals_1.test)('should handle concurrent authentication requests', async () => {
            const responses = await utils_1.testUtils.testConcurrency('GET', '/api/v1/auth/me', 10, testUser);
            (0, globals_1.expect)(responses).toHaveLength(10);
            responses.forEach(response => {
                utils_1.testUtils.assertSuccessResponse(response, 200);
                utils_1.testUtils.assertResponseTime(response, 200); // Allow more time for concurrent requests
            });
        });
    });
    (0, globals_1.describe)('JWT Token Security', () => {
        (0, globals_1.test)('should reject token with modified payload', async () => {
            // Create a token with modified payload (this will have invalid signature)
            const tokenParts = testUser.accessToken.split('.');
            const modifiedPayload = Buffer.from(JSON.stringify({
                sub: 'different-user-id',
                iat: Math.floor(Date.now() / 1000),
                exp: Math.floor(Date.now() / 1000) + 3600
            })).toString('base64url');
            const modifiedToken = `${tokenParts[0]}.${modifiedPayload}.${tokenParts[2]}`;
            const response = await utils_1.testUtils.get('/api/v1/auth/me', undefined, {
                headers: { 'Authorization': `Bearer ${modifiedToken}` }
            });
            utils_1.testUtils.assertErrorResponse(response, 401);
        });
        (0, globals_1.test)('should reject token with modified signature', async () => {
            const tokenParts = testUser.accessToken.split('.');
            const modifiedToken = `${tokenParts[0]}.${tokenParts[1]}.modified-signature`;
            const response = await utils_1.testUtils.get('/api/v1/auth/me', undefined, {
                headers: { 'Authorization': `Bearer ${modifiedToken}` }
            });
            utils_1.testUtils.assertErrorResponse(response, 401);
        });
        (0, globals_1.test)('should validate token issuer', async () => {
            // This test assumes the JWT validation checks the issuer
            // The actual implementation should validate that the token comes from the expected Supabase instance
            const response = await utils_1.testUtils.get('/api/v1/auth/me', testUser);
            const userData = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(userData.userId).toBe(testUser.id);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,