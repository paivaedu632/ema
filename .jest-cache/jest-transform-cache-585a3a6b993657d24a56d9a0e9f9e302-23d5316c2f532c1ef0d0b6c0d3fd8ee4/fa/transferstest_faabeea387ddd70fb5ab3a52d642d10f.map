{"file":"C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\unit\\transfers.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\unit\\transfers.test.ts"],"sourcesContent":["/**\n * Transfer Operations Endpoint Tests\n * Tests for /api/v1/transfers/* endpoints\n */\n\nimport { describe, test, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';\nimport { testUtils, TestUser } from '../utils';\n\ndescribe('Transfer Operations Endpoints', () => {\n  let senderUser: TestUser;\n  let recipientUser: TestUser;\n  let userWithBalance: TestUser;\n\n  beforeAll(async () => {\n    // Create test users\n    senderUser = await testUtils.createUserWithBalance({\n      email: 'sender@emapay.test',\n      metadata: { purpose: 'Transfer Sender' },\n      balances: {\n        EUR: { available: 1000.00, reserved: 0 },\n        AOA: { available: 650000.00, reserved: 0 }\n      }\n    });\n\n    recipientUser = await testUtils.createUser({\n      email: 'recipient@emapay.test',\n      metadata: { purpose: 'Transfer Recipient' }\n    });\n\n    userWithBalance = await testUtils.createUserWithBalance({\n      email: 'transfer-test@emapay.test',\n      metadata: { purpose: 'Transfer Testing' },\n      balances: {\n        EUR: { available: 500.00, reserved: 0 }\n      }\n    });\n  });\n\n  afterAll(async () => {\n    // Clean up test users\n    await testUtils.cleanup();\n  });\n\n  describe('POST /api/v1/transfers/send - Valid Transfers', () => {\n    test('should send EUR transfer successfully', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        50.00\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      const transfer = testUtils.assertSuccessResponse(response, 201);\n      \n      testUtils.assertValidTransfer(transfer);\n      expect(transfer.fromUserId).toBe(senderUser.id);\n      expect(transfer.toUserId).toBe(recipientUser.id);\n      expect(transfer.currency).toBe('EUR');\n      expect(transfer.amount).toBe(50.00);\n      expect(transfer.status).toBe('pending');\n      \n      // Assert response time\n      testUtils.assertResponseTime(response, 500);\n    });\n\n    test('should send AOA transfer successfully', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'AOA',\n        25000.00\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      const transfer = testUtils.assertSuccessResponse(response, 201);\n      \n      testUtils.assertValidTransfer(transfer);\n      expect(transfer.fromUserId).toBe(senderUser.id);\n      expect(transfer.toUserId).toBe(recipientUser.id);\n      expect(transfer.currency).toBe('AOA');\n      expect(transfer.amount).toBe(25000.00);\n      expect(transfer.status).toBe('pending');\n    });\n\n    test('should include transfer description', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        25.00\n      );\n      transferData.description = 'Test payment for services';\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      const transfer = testUtils.assertSuccessResponse(response, 201);\n      \n      expect(transfer.description).toBe('Test payment for services');\n    });\n\n    test('should handle minimum transfer amount', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        0.01\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      const transfer = testUtils.assertSuccessResponse(response, 201);\n      \n      expect(transfer.amount).toBe(0.01);\n      testUtils.assertDecimalPrecision(transfer.amount, 2);\n    });\n\n    test('should handle large transfer amounts', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        999.99\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      const transfer = testUtils.assertSuccessResponse(response, 201);\n      \n      expect(transfer.amount).toBe(999.99);\n      testUtils.assertDecimalPrecision(transfer.amount, 2);\n    });\n\n    test('should require valid PIN for transfer', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        10.00\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      // Should succeed with valid PIN\n      testUtils.assertSuccessResponse(response, 201);\n    });\n\n    test('should generate unique transfer IDs', async () => {\n      const transferData1 = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        10.00\n      );\n      \n      const transferData2 = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        20.00\n      );\n\n      const [response1, response2] = await Promise.all([\n        testUtils.post('/api/v1/transfers/send', transferData1, senderUser),\n        testUtils.post('/api/v1/transfers/send', transferData2, senderUser)\n      ]);\n      \n      const transfer1 = testUtils.assertSuccessResponse(response1, 201);\n      const transfer2 = testUtils.assertSuccessResponse(response2, 201);\n      \n      expect(transfer1.id).not.toBe(transfer2.id);\n      expect(transfer1.id).toBeValidUUID();\n      expect(transfer2.id).toBeValidUUID();\n    });\n  });\n\n  describe('POST /api/v1/transfers/send - Invalid Transfers', () => {\n    test('should reject transfer with insufficient balance', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        2000.00 // More than available balance\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('insufficient');\n    });\n\n    test('should reject transfer to non-existent user', async () => {\n      const transferData = testUtils.generateTransferData(\n        'non-existent-user-id',\n        'EUR',\n        10.00\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      testUtils.assertErrorResponse(response, 404);\n      expect(response.body.error).toContain('recipient');\n    });\n\n    test('should reject transfer to self', async () => {\n      const transferData = testUtils.generateTransferData(\n        senderUser.id, // Same as sender\n        'EUR',\n        10.00\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('self');\n    });\n\n    test('should reject transfer with invalid currency', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'USD', // Invalid currency\n        10.00\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('currency');\n    });\n\n    test('should reject transfer with zero amount', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        0.00\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('amount');\n    });\n\n    test('should reject transfer with negative amount', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        -10.00\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('amount');\n    });\n\n    test('should reject transfer with invalid PIN', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        10.00\n      );\n      transferData.pin = 'wrong-pin';\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      testUtils.assertErrorResponse(response, 401);\n      expect(response.body.error).toContain('PIN');\n    });\n\n    test('should reject transfer with missing required fields', async () => {\n      const incompleteData = [\n        { currency: 'EUR', amount: 10.00, pin: '123456' }, // Missing recipientId\n        { recipientId: recipientUser.id, amount: 10.00, pin: '123456' }, // Missing currency\n        { recipientId: recipientUser.id, currency: 'EUR', pin: '123456' }, // Missing amount\n        { recipientId: recipientUser.id, currency: 'EUR', amount: 10.00 } // Missing pin\n      ];\n\n      for (const data of incompleteData) {\n        const response = await testUtils.post(\n          '/api/v1/transfers/send',\n          data,\n          senderUser\n        );\n        \n        testUtils.assertErrorResponse(response, 400);\n      }\n    });\n\n    test('should reject transfer with invalid amount precision', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        10.123 // Too many decimal places\n      );\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('precision');\n    });\n\n    test('should reject transfer with description too long', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        10.00\n      );\n      transferData.description = 'a'.repeat(501); // Assuming 500 char limit\n\n      const response = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        senderUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('description');\n    });\n  });\n\n  describe('GET /api/v1/transfers/history - Transaction History', () => {\n    test('should return transfer history', async () => {\n      const response = await testUtils.get('/api/v1/transfers/history', senderUser);\n\n      const history = testUtils.assertSuccessResponse(response, 200);\n\n      expect(history).toHaveProperty('transfers');\n      expect(history).toHaveProperty('pagination');\n      expect(Array.isArray(history.transfers)).toBe(true);\n\n      // Check transfer structure\n      if (history.transfers.length > 0) {\n        history.transfers.forEach((transfer: any) => {\n          testUtils.assertValidTransfer(transfer);\n        });\n      }\n\n      testUtils.assertResponseTime(response, 200);\n    });\n\n    test('should support pagination', async () => {\n      const response = await testUtils.get(\n        '/api/v1/transfers/history?limit=5&offset=0',\n        senderUser\n      );\n\n      const history = testUtils.assertSuccessResponse(response, 200);\n\n      expect(history.transfers.length).toBeLessThanOrEqual(5);\n      expect(history.pagination).toHaveProperty('limit');\n      expect(history.pagination).toHaveProperty('offset');\n      expect(history.pagination).toHaveProperty('total');\n    });\n\n    test('should filter by currency', async () => {\n      const response = await testUtils.get(\n        '/api/v1/transfers/history?currency=EUR',\n        senderUser\n      );\n\n      const history = testUtils.assertSuccessResponse(response, 200);\n\n      history.transfers.forEach((transfer: any) => {\n        expect(transfer.currency).toBe('EUR');\n      });\n    });\n\n    test('should filter by status', async () => {\n      const response = await testUtils.get(\n        '/api/v1/transfers/history?status=completed',\n        senderUser\n      );\n\n      const history = testUtils.assertSuccessResponse(response, 200);\n\n      history.transfers.forEach((transfer: any) => {\n        expect(transfer.status).toBe('completed');\n      });\n    });\n\n    test('should sort by date descending by default', async () => {\n      const response = await testUtils.get('/api/v1/transfers/history', senderUser);\n\n      const history = testUtils.assertSuccessResponse(response, 200);\n\n      if (history.transfers.length > 1) {\n        testUtils.assertSortedByDate(history.transfers, 'createdAt', true);\n      }\n    });\n\n    test('should include both sent and received transfers', async () => {\n      const response = await testUtils.get('/api/v1/transfers/history', recipientUser);\n\n      const history = testUtils.assertSuccessResponse(response, 200);\n\n      // Should include transfers where user is either sender or recipient\n      history.transfers.forEach((transfer: any) => {\n        const isInvolved = transfer.fromUserId === recipientUser.id ||\n                          transfer.toUserId === recipientUser.id;\n        expect(isInvolved).toBe(true);\n      });\n    });\n  });\n\n  describe('Transfer Balance Updates', () => {\n    test('should update sender balance after transfer', async () => {\n      // Get initial balance\n      const initialResponse = await testUtils.get('/api/v1/wallets/EUR', userWithBalance);\n      const initialBalance = testUtils.assertSuccessResponse(initialResponse, 200);\n\n      // Send transfer\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        100.00\n      );\n\n      const transferResponse = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        userWithBalance\n      );\n\n      testUtils.assertSuccessResponse(transferResponse, 201);\n\n      // Wait for transfer processing\n      await testUtils.waitFor(async () => {\n        const balanceResponse = await testUtils.get('/api/v1/wallets/EUR', userWithBalance);\n        const currentBalance = testUtils.assertSuccessResponse(balanceResponse, 200);\n        return currentBalance.availableBalance < initialBalance.availableBalance;\n      }, 5000);\n\n      // Check updated balance\n      const finalResponse = await testUtils.get('/api/v1/wallets/EUR', userWithBalance);\n      const finalBalance = testUtils.assertSuccessResponse(finalResponse, 200);\n\n      expect(finalBalance.availableBalance).toBe(initialBalance.availableBalance - 100.00);\n    });\n\n    test('should update recipient balance after transfer', async () => {\n      // Get initial balance\n      const initialResponse = await testUtils.get('/api/v1/wallets/EUR', recipientUser);\n      const initialBalance = testUtils.assertSuccessResponse(initialResponse, 200);\n\n      // Send transfer to recipient\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        50.00\n      );\n\n      const transferResponse = await testUtils.post(\n        '/api/v1/transfers/send',\n        transferData,\n        userWithBalance\n      );\n\n      testUtils.assertSuccessResponse(transferResponse, 201);\n\n      // Wait for transfer processing\n      await testUtils.waitFor(async () => {\n        const balanceResponse = await testUtils.get('/api/v1/wallets/EUR', recipientUser);\n        const currentBalance = testUtils.assertSuccessResponse(balanceResponse, 200);\n        return currentBalance.availableBalance > initialBalance.availableBalance;\n      }, 5000);\n\n      // Check updated balance\n      const finalResponse = await testUtils.get('/api/v1/wallets/EUR', recipientUser);\n      const finalBalance = testUtils.assertSuccessResponse(finalResponse, 200);\n\n      expect(finalBalance.availableBalance).toBe(initialBalance.availableBalance + 50.00);\n    });\n\n    test('should maintain total system balance', async () => {\n      // Get all user balances before transfer\n      const senderBefore = await testUtils.get('/api/v1/wallets/EUR', senderUser);\n      const recipientBefore = await testUtils.get('/api/v1/wallets/EUR', recipientUser);\n\n      const senderBalanceBefore = testUtils.assertSuccessResponse(senderBefore, 200);\n      const recipientBalanceBefore = testUtils.assertSuccessResponse(recipientBefore, 200);\n\n      const totalBefore = senderBalanceBefore.totalBalance + recipientBalanceBefore.totalBalance;\n\n      // Send transfer\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        25.00\n      );\n\n      await testUtils.post('/api/v1/transfers/send', transferData, senderUser);\n\n      // Wait for processing\n      await testUtils.waitFor(async () => true, 2000);\n\n      // Get balances after transfer\n      const senderAfter = await testUtils.get('/api/v1/wallets/EUR', senderUser);\n      const recipientAfter = await testUtils.get('/api/v1/wallets/EUR', recipientUser);\n\n      const senderBalanceAfter = testUtils.assertSuccessResponse(senderAfter, 200);\n      const recipientBalanceAfter = testUtils.assertSuccessResponse(recipientAfter, 200);\n\n      const totalAfter = senderBalanceAfter.totalBalance + recipientBalanceAfter.totalBalance;\n\n      // Total system balance should remain the same\n      expect(totalAfter).toBe(totalBefore);\n    });\n  });\n\n  describe('Transfer Performance', () => {\n    test('should process transfers within 500ms', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        10.00\n      );\n\n      const { response, passed } = await testUtils.testPerformance(\n        'POST',\n        '/api/v1/transfers/send',\n        500,\n        senderUser,\n        transferData\n      );\n\n      expect(passed).toBe(true);\n      testUtils.assertSuccessResponse(response, 201);\n    });\n\n    test('should handle concurrent transfers', async () => {\n      const transferData = testUtils.generateTransferData(\n        recipientUser.id,\n        'EUR',\n        1.00\n      );\n\n      const responses = await testUtils.testConcurrency(\n        'POST',\n        '/api/v1/transfers/send',\n        5, // Limit concurrent transfers to avoid balance issues\n        senderUser,\n        transferData\n      );\n\n      expect(responses).toHaveLength(5);\n\n      responses.forEach(response => {\n        // Some may succeed, some may fail due to insufficient balance\n        expect([201, 400]).toContain(response.status);\n        testUtils.assertResponseTime(response, 1000);\n      });\n    });\n\n    test('should respond quickly for transfer history', async () => {\n      const { response, passed } = await testUtils.testPerformance(\n        'GET',\n        '/api/v1/transfers/history',\n        200,\n        senderUser\n      );\n\n      expect(passed).toBe(true);\n      testUtils.assertSuccessResponse(response, 200);\n    });\n  });\n});\n"],"version":3}