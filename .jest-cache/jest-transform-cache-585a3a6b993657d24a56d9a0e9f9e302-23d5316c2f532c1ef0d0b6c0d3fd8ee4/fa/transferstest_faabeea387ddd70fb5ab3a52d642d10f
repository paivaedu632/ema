893b18aa9be851cfdde3afd7e8efc393
"use strict";
/**
 * Transfer Operations Endpoint Tests
 * Tests for /api/v1/transfers/* endpoints
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const utils_1 = require("../utils");
(0, globals_1.describe)('Transfer Operations Endpoints', () => {
    let senderUser;
    let recipientUser;
    let userWithBalance;
    (0, globals_1.beforeAll)(async () => {
        // Create test users
        senderUser = await utils_1.testUtils.createUserWithBalance({
            email: 'sender@emapay.test',
            metadata: { purpose: 'Transfer Sender' },
            balances: {
                EUR: { available: 1000.00, reserved: 0 },
                AOA: { available: 650000.00, reserved: 0 }
            }
        });
        recipientUser = await utils_1.testUtils.createUser({
            email: 'recipient@emapay.test',
            metadata: { purpose: 'Transfer Recipient' }
        });
        userWithBalance = await utils_1.testUtils.createUserWithBalance({
            email: 'transfer-test@emapay.test',
            metadata: { purpose: 'Transfer Testing' },
            balances: {
                EUR: { available: 500.00, reserved: 0 }
            }
        });
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test users
        await utils_1.testUtils.cleanup();
    });
    (0, globals_1.describe)('POST /api/v1/transfers/send - Valid Transfers', () => {
        (0, globals_1.test)('should send EUR transfer successfully', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 50.00);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            const transfer = utils_1.testUtils.assertSuccessResponse(response, 201);
            utils_1.testUtils.assertValidTransfer(transfer);
            (0, globals_1.expect)(transfer.fromUserId).toBe(senderUser.id);
            (0, globals_1.expect)(transfer.toUserId).toBe(recipientUser.id);
            (0, globals_1.expect)(transfer.currency).toBe('EUR');
            (0, globals_1.expect)(transfer.amount).toBe(50.00);
            (0, globals_1.expect)(transfer.status).toBe('pending');
            // Assert response time
            utils_1.testUtils.assertResponseTime(response, 500);
        });
        (0, globals_1.test)('should send AOA transfer successfully', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'AOA', 25000.00);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            const transfer = utils_1.testUtils.assertSuccessResponse(response, 201);
            utils_1.testUtils.assertValidTransfer(transfer);
            (0, globals_1.expect)(transfer.fromUserId).toBe(senderUser.id);
            (0, globals_1.expect)(transfer.toUserId).toBe(recipientUser.id);
            (0, globals_1.expect)(transfer.currency).toBe('AOA');
            (0, globals_1.expect)(transfer.amount).toBe(25000.00);
            (0, globals_1.expect)(transfer.status).toBe('pending');
        });
        (0, globals_1.test)('should include transfer description', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 25.00);
            transferData.description = 'Test payment for services';
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            const transfer = utils_1.testUtils.assertSuccessResponse(response, 201);
            (0, globals_1.expect)(transfer.description).toBe('Test payment for services');
        });
        (0, globals_1.test)('should handle minimum transfer amount', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 0.01);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            const transfer = utils_1.testUtils.assertSuccessResponse(response, 201);
            (0, globals_1.expect)(transfer.amount).toBe(0.01);
            utils_1.testUtils.assertDecimalPrecision(transfer.amount, 2);
        });
        (0, globals_1.test)('should handle large transfer amounts', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 999.99);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            const transfer = utils_1.testUtils.assertSuccessResponse(response, 201);
            (0, globals_1.expect)(transfer.amount).toBe(999.99);
            utils_1.testUtils.assertDecimalPrecision(transfer.amount, 2);
        });
        (0, globals_1.test)('should require valid PIN for transfer', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 10.00);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            // Should succeed with valid PIN
            utils_1.testUtils.assertSuccessResponse(response, 201);
        });
        (0, globals_1.test)('should generate unique transfer IDs', async () => {
            const transferData1 = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 10.00);
            const transferData2 = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 20.00);
            const [response1, response2] = await Promise.all([
                utils_1.testUtils.post('/api/v1/transfers/send', transferData1, senderUser),
                utils_1.testUtils.post('/api/v1/transfers/send', transferData2, senderUser)
            ]);
            const transfer1 = utils_1.testUtils.assertSuccessResponse(response1, 201);
            const transfer2 = utils_1.testUtils.assertSuccessResponse(response2, 201);
            (0, globals_1.expect)(transfer1.id).not.toBe(transfer2.id);
            (0, globals_1.expect)(transfer1.id).toBeValidUUID();
            (0, globals_1.expect)(transfer2.id).toBeValidUUID();
        });
    });
    (0, globals_1.describe)('POST /api/v1/transfers/send - Invalid Transfers', () => {
        (0, globals_1.test)('should reject transfer with insufficient balance', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 2000.00 // More than available balance
            );
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('insufficient');
        });
        (0, globals_1.test)('should reject transfer to non-existent user', async () => {
            const transferData = utils_1.testUtils.generateTransferData('non-existent-user-id', 'EUR', 10.00);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            utils_1.testUtils.assertErrorResponse(response, 404);
            (0, globals_1.expect)(response.body.error).toContain('recipient');
        });
        (0, globals_1.test)('should reject transfer to self', async () => {
            const transferData = utils_1.testUtils.generateTransferData(senderUser.id, // Same as sender
            'EUR', 10.00);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('self');
        });
        (0, globals_1.test)('should reject transfer with invalid currency', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'USD', // Invalid currency
            10.00);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('currency');
        });
        (0, globals_1.test)('should reject transfer with zero amount', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 0.00);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('amount');
        });
        (0, globals_1.test)('should reject transfer with negative amount', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', -10.00);
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('amount');
        });
        (0, globals_1.test)('should reject transfer with invalid PIN', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 10.00);
            transferData.pin = 'wrong-pin';
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('PIN');
        });
        (0, globals_1.test)('should reject transfer with missing required fields', async () => {
            const incompleteData = [
                { currency: 'EUR', amount: 10.00, pin: '123456' }, // Missing recipientId
                { recipientId: recipientUser.id, amount: 10.00, pin: '123456' }, // Missing currency
                { recipientId: recipientUser.id, currency: 'EUR', pin: '123456' }, // Missing amount
                { recipientId: recipientUser.id, currency: 'EUR', amount: 10.00 } // Missing pin
            ];
            for (const data of incompleteData) {
                const response = await utils_1.testUtils.post('/api/v1/transfers/send', data, senderUser);
                utils_1.testUtils.assertErrorResponse(response, 400);
            }
        });
        (0, globals_1.test)('should reject transfer with invalid amount precision', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 10.123 // Too many decimal places
            );
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('precision');
        });
        (0, globals_1.test)('should reject transfer with description too long', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 10.00);
            transferData.description = 'a'.repeat(501); // Assuming 500 char limit
            const response = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('description');
        });
    });
    (0, globals_1.describe)('GET /api/v1/transfers/history - Transaction History', () => {
        (0, globals_1.test)('should return transfer history', async () => {
            const response = await utils_1.testUtils.get('/api/v1/transfers/history', senderUser);
            const history = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(history).toHaveProperty('transfers');
            (0, globals_1.expect)(history).toHaveProperty('pagination');
            (0, globals_1.expect)(Array.isArray(history.transfers)).toBe(true);
            // Check transfer structure
            if (history.transfers.length > 0) {
                history.transfers.forEach((transfer) => {
                    utils_1.testUtils.assertValidTransfer(transfer);
                });
            }
            utils_1.testUtils.assertResponseTime(response, 200);
        });
        (0, globals_1.test)('should support pagination', async () => {
            const response = await utils_1.testUtils.get('/api/v1/transfers/history?limit=5&offset=0', senderUser);
            const history = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(history.transfers.length).toBeLessThanOrEqual(5);
            (0, globals_1.expect)(history.pagination).toHaveProperty('limit');
            (0, globals_1.expect)(history.pagination).toHaveProperty('offset');
            (0, globals_1.expect)(history.pagination).toHaveProperty('total');
        });
        (0, globals_1.test)('should filter by currency', async () => {
            const response = await utils_1.testUtils.get('/api/v1/transfers/history?currency=EUR', senderUser);
            const history = utils_1.testUtils.assertSuccessResponse(response, 200);
            history.transfers.forEach((transfer) => {
                (0, globals_1.expect)(transfer.currency).toBe('EUR');
            });
        });
        (0, globals_1.test)('should filter by status', async () => {
            const response = await utils_1.testUtils.get('/api/v1/transfers/history?status=completed', senderUser);
            const history = utils_1.testUtils.assertSuccessResponse(response, 200);
            history.transfers.forEach((transfer) => {
                (0, globals_1.expect)(transfer.status).toBe('completed');
            });
        });
        (0, globals_1.test)('should sort by date descending by default', async () => {
            const response = await utils_1.testUtils.get('/api/v1/transfers/history', senderUser);
            const history = utils_1.testUtils.assertSuccessResponse(response, 200);
            if (history.transfers.length > 1) {
                utils_1.testUtils.assertSortedByDate(history.transfers, 'createdAt', true);
            }
        });
        (0, globals_1.test)('should include both sent and received transfers', async () => {
            const response = await utils_1.testUtils.get('/api/v1/transfers/history', recipientUser);
            const history = utils_1.testUtils.assertSuccessResponse(response, 200);
            // Should include transfers where user is either sender or recipient
            history.transfers.forEach((transfer) => {
                const isInvolved = transfer.fromUserId === recipientUser.id ||
                    transfer.toUserId === recipientUser.id;
                (0, globals_1.expect)(isInvolved).toBe(true);
            });
        });
    });
    (0, globals_1.describe)('Transfer Balance Updates', () => {
        (0, globals_1.test)('should update sender balance after transfer', async () => {
            // Get initial balance
            const initialResponse = await utils_1.testUtils.get('/api/v1/wallets/EUR', userWithBalance);
            const initialBalance = utils_1.testUtils.assertSuccessResponse(initialResponse, 200);
            // Send transfer
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 100.00);
            const transferResponse = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, userWithBalance);
            utils_1.testUtils.assertSuccessResponse(transferResponse, 201);
            // Wait for transfer processing
            await utils_1.testUtils.waitFor(async () => {
                const balanceResponse = await utils_1.testUtils.get('/api/v1/wallets/EUR', userWithBalance);
                const currentBalance = utils_1.testUtils.assertSuccessResponse(balanceResponse, 200);
                return currentBalance.availableBalance < initialBalance.availableBalance;
            }, 5000);
            // Check updated balance
            const finalResponse = await utils_1.testUtils.get('/api/v1/wallets/EUR', userWithBalance);
            const finalBalance = utils_1.testUtils.assertSuccessResponse(finalResponse, 200);
            (0, globals_1.expect)(finalBalance.availableBalance).toBe(initialBalance.availableBalance - 100.00);
        });
        (0, globals_1.test)('should update recipient balance after transfer', async () => {
            // Get initial balance
            const initialResponse = await utils_1.testUtils.get('/api/v1/wallets/EUR', recipientUser);
            const initialBalance = utils_1.testUtils.assertSuccessResponse(initialResponse, 200);
            // Send transfer to recipient
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 50.00);
            const transferResponse = await utils_1.testUtils.post('/api/v1/transfers/send', transferData, userWithBalance);
            utils_1.testUtils.assertSuccessResponse(transferResponse, 201);
            // Wait for transfer processing
            await utils_1.testUtils.waitFor(async () => {
                const balanceResponse = await utils_1.testUtils.get('/api/v1/wallets/EUR', recipientUser);
                const currentBalance = utils_1.testUtils.assertSuccessResponse(balanceResponse, 200);
                return currentBalance.availableBalance > initialBalance.availableBalance;
            }, 5000);
            // Check updated balance
            const finalResponse = await utils_1.testUtils.get('/api/v1/wallets/EUR', recipientUser);
            const finalBalance = utils_1.testUtils.assertSuccessResponse(finalResponse, 200);
            (0, globals_1.expect)(finalBalance.availableBalance).toBe(initialBalance.availableBalance + 50.00);
        });
        (0, globals_1.test)('should maintain total system balance', async () => {
            // Get all user balances before transfer
            const senderBefore = await utils_1.testUtils.get('/api/v1/wallets/EUR', senderUser);
            const recipientBefore = await utils_1.testUtils.get('/api/v1/wallets/EUR', recipientUser);
            const senderBalanceBefore = utils_1.testUtils.assertSuccessResponse(senderBefore, 200);
            const recipientBalanceBefore = utils_1.testUtils.assertSuccessResponse(recipientBefore, 200);
            const totalBefore = senderBalanceBefore.totalBalance + recipientBalanceBefore.totalBalance;
            // Send transfer
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 25.00);
            await utils_1.testUtils.post('/api/v1/transfers/send', transferData, senderUser);
            // Wait for processing
            await utils_1.testUtils.waitFor(async () => true, 2000);
            // Get balances after transfer
            const senderAfter = await utils_1.testUtils.get('/api/v1/wallets/EUR', senderUser);
            const recipientAfter = await utils_1.testUtils.get('/api/v1/wallets/EUR', recipientUser);
            const senderBalanceAfter = utils_1.testUtils.assertSuccessResponse(senderAfter, 200);
            const recipientBalanceAfter = utils_1.testUtils.assertSuccessResponse(recipientAfter, 200);
            const totalAfter = senderBalanceAfter.totalBalance + recipientBalanceAfter.totalBalance;
            // Total system balance should remain the same
            (0, globals_1.expect)(totalAfter).toBe(totalBefore);
        });
    });
    (0, globals_1.describe)('Transfer Performance', () => {
        (0, globals_1.test)('should process transfers within 500ms', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 10.00);
            const { response, passed } = await utils_1.testUtils.testPerformance('POST', '/api/v1/transfers/send', 500, senderUser, transferData);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertSuccessResponse(response, 201);
        });
        (0, globals_1.test)('should handle concurrent transfers', async () => {
            const transferData = utils_1.testUtils.generateTransferData(recipientUser.id, 'EUR', 1.00);
            const responses = await utils_1.testUtils.testConcurrency('POST', '/api/v1/transfers/send', 5, // Limit concurrent transfers to avoid balance issues
            senderUser, transferData);
            (0, globals_1.expect)(responses).toHaveLength(5);
            responses.forEach(response => {
                // Some may succeed, some may fail due to insufficient balance
                (0, globals_1.expect)([201, 400]).toContain(response.status);
                utils_1.testUtils.assertResponseTime(response, 1000);
            });
        });
        (0, globals_1.test)('should respond quickly for transfer history', async () => {
            const { response, passed } = await utils_1.testUtils.testPerformance('GET', '/api/v1/transfers/history', 200, senderUser);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertSuccessResponse(response, 200);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,