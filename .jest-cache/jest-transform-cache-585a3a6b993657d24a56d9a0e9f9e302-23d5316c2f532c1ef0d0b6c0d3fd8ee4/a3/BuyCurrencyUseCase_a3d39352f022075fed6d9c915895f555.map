{"version":3,"names":["cov_1gh42lu5wq","actualCoverage","ResultFactory","ValidationResultFactory","ErrorCodes","Money","Currency","UserId","Transaction","Wallet","InsufficientBalanceException","UserNotFoundException","WalletNotFoundException","KycRequiredException","UnsupportedCurrencyPairException","StaleExchangeRateException","BuyCurrencyUseCase","constructor","userRepository","walletRepository","transactionRepository","unitOfWork","exchangeRateService","feeCalculationService","f","s","execute","command","validationResult","validateCommand","isValid","b","error","errors","map","e","message","join","INVALID_INPUT","validationErrors","userId","fromString","fromCurrency","fromCode","toCurrency","fromAmount","fromNumber","isPairSupported","code","result","user","findById","canPerformTransactions","kycStatus","exchangeResult","calculateExchangeAmount","expectedRate","slippage","Math","abs","rate","maxSlippage","fromWallet","findByUserIdAndCurrency","toWallet","create","feeResult","calculateFee","totalFromAmount","add","totalFee","hasSufficientAvailableBalance","availableBalance","id","transaction","createBuy","markAsProcessing","withdraw","deposit","outputAmount","markAsCompleted","save","success","transactionId","value","amount","toAmount","exchangeRate","fee","netToAmount","executedAt","completedAt","Date","USER_NOT_FOUND","currency","WALLET_NOT_FOUND","INSUFFICIENT_BALANCE","requestedAmount","availableAmount","KYC_REQUIRED","currentStatus","currentKycStatus","requiredAction","rateAge","console","UNEXPECTED_ERROR","trim","length","push","field","isSupported","failure"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\BuyCurrencyUseCase.ts"],"sourcesContent":["/**\n * Buy Currency Use Case\n * \n * Handles currency exchange operations (buying AOA with EUR).\n * Validates exchange rates, calculates fees, and processes the exchange.\n */\n\nimport {\n  UseCase,\n  Command,\n  Result,\n  SuccessResult,\n  ErrorResult,\n  ResultFactory,\n  ValidationResult,\n  ValidationResultFactory,\n  ErrorCodes\n} from '../common/UseCase'\n\nimport {\n  Money,\n  Currency,\n  EUR,\n  AOA,\n  UserId,\n  Transaction,\n  User,\n  Wallet,\n  ExchangeRateService,\n  FeeCalculationService,\n  InsufficientBalanceException,\n  UserNotFoundException,\n  WalletNotFoundException,\n  KycRequiredException,\n  UnsupportedCurrencyPairException,\n  StaleExchangeRateException\n} from '../../domain'\n\nimport {\n  UserRepository,\n  WalletRepository,\n  TransactionRepository,\n  UnitOfWork\n} from '../../domain/repositories'\n\n/**\n * Buy Currency Command\n */\nexport interface BuyCurrencyCommand extends Command {\n  readonly type: 'BUY_CURRENCY'\n  readonly userId: string\n  readonly fromCurrency: string // Currency to spend (usually EUR)\n  readonly toCurrency: string   // Currency to buy (usually AOA)\n  readonly fromAmount: number   // Amount to spend\n  readonly expectedRate?: number // Expected exchange rate for validation\n  readonly maxSlippage?: number  // Maximum acceptable slippage percentage\n}\n\n/**\n * Buy Currency Result\n */\nexport interface BuyCurrencyResult extends SuccessResult<{\n  transactionId: string\n  fromAmount: number\n  toAmount: number\n  exchangeRate: number\n  fee: number\n  netToAmount: number\n  executedAt: Date\n}> {}\n\n/**\n * Buy Currency Use Case Implementation\n */\nexport class BuyCurrencyUseCase implements UseCase<BuyCurrencyCommand, BuyCurrencyResult | ErrorResult> {\n  constructor(\n    private readonly userRepository: UserRepository,\n    private readonly walletRepository: WalletRepository,\n    private readonly transactionRepository: TransactionRepository,\n    private readonly unitOfWork: UnitOfWork,\n    private readonly exchangeRateService: ExchangeRateService,\n    private readonly feeCalculationService: FeeCalculationService\n  ) {}\n\n  async execute(command: BuyCurrencyCommand): Promise<BuyCurrencyResult | ErrorResult> {\n    try {\n      // 1. Validate input\n      const validationResult = this.validateCommand(command)\n      if (!validationResult.isValid) {\n        return ResultFactory.error(\n          `Validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`,\n          ErrorCodes.INVALID_INPUT,\n          { validationErrors: validationResult.errors }\n        )\n      }\n\n      // 2. Parse domain objects\n      const userId = UserId.fromString(command.userId)\n      const fromCurrency = Currency.fromCode(command.fromCurrency)\n      const toCurrency = Currency.fromCode(command.toCurrency)\n      const fromAmount = Money.fromNumber(command.fromAmount, fromCurrency)\n\n      // 3. Validate currency pair is supported\n      if (!this.exchangeRateService.isPairSupported(fromCurrency, toCurrency)) {\n        return ResultFactory.error(\n          `Currency pair ${fromCurrency.code}/${toCurrency.code} is not supported`,\n          ErrorCodes.INVALID_INPUT\n        )\n      }\n\n      // 4. Execute business logic within transaction\n      const result = await this.unitOfWork.execute(async () => {\n        // Get user\n        const user = await this.userRepository.findById(userId)\n        if (!user) {\n          throw new UserNotFoundException(userId)\n        }\n\n        // Validate user can perform transactions\n        if (!user.canPerformTransactions()) {\n          throw new KycRequiredException(\n            userId,\n            user.kycStatus,\n            'Complete KYC verification to exchange currency'\n          )\n        }\n\n        // Get current exchange rate\n        const exchangeResult = await this.exchangeRateService.calculateExchangeAmount(\n          fromAmount,\n          toCurrency\n        )\n\n        // Validate exchange rate if expected rate provided\n        if (command.expectedRate) {\n          const slippage = Math.abs(exchangeResult.rate.rate - command.expectedRate) / command.expectedRate * 100\n          const maxSlippage = command.maxSlippage || 2 // Default 2% max slippage\n          \n          if (slippage > maxSlippage) {\n            throw new StaleExchangeRateException(fromCurrency, toCurrency, slippage)\n          }\n        }\n\n        // Get user's wallets\n        const fromWallet = await this.walletRepository.findByUserIdAndCurrency(userId, fromCurrency)\n        if (!fromWallet) {\n          throw new WalletNotFoundException(userId, fromCurrency)\n        }\n\n        let toWallet = await this.walletRepository.findByUserIdAndCurrency(userId, toCurrency)\n        if (!toWallet) {\n          toWallet = Wallet.create(userId, toCurrency)\n        }\n\n        // Calculate fee (on the from currency)\n        const feeResult = this.feeCalculationService.calculateFee(fromAmount, 'buy', user)\n        const totalFromAmount = fromAmount.add(feeResult.totalFee)\n\n        // Validate user has sufficient balance\n        if (!fromWallet.hasSufficientAvailableBalance(totalFromAmount)) {\n          throw new InsufficientBalanceException(\n            fromCurrency,\n            totalFromAmount,\n            fromWallet.availableBalance,\n            fromWallet.id\n          )\n        }\n\n        // Create buy transaction\n        const transaction = Transaction.createBuy(\n          userId,\n          fromAmount,\n          feeResult.totalFee,\n          exchangeResult.rate.rate,\n          `Buy ${toCurrency.code} with ${fromCurrency.code}`\n        )\n\n        // Process the exchange\n        transaction.markAsProcessing()\n\n        // Deduct from source wallet (including fee)\n        fromWallet.withdraw(totalFromAmount)\n\n        // Credit to destination wallet (exchange amount only, no fee)\n        toWallet.deposit(exchangeResult.outputAmount)\n\n        // Mark transaction as completed\n        transaction.markAsCompleted()\n\n        // Save all changes\n        await this.walletRepository.save(fromWallet)\n        await this.walletRepository.save(toWallet)\n        await this.transactionRepository.save(transaction)\n\n        return {\n          transaction,\n          exchangeResult,\n          feeResult\n        }\n      })\n\n      // 5. Return success result\n      return ResultFactory.success({\n        transactionId: result.transaction.id.value,\n        fromAmount: fromAmount.amount,\n        toAmount: result.exchangeResult.outputAmount.amount,\n        exchangeRate: result.exchangeResult.rate.rate,\n        fee: result.feeResult.totalFee.amount,\n        netToAmount: result.exchangeResult.outputAmount.amount,\n        executedAt: result.transaction.completedAt || new Date()\n      })\n\n    } catch (error) {\n      // Handle domain exceptions\n      if (error instanceof UserNotFoundException) {\n        return ResultFactory.error(\n          'User not found',\n          ErrorCodes.USER_NOT_FOUND\n        )\n      }\n\n      if (error instanceof WalletNotFoundException) {\n        return ResultFactory.error(\n          `Wallet not found for currency ${error.currency.code}`,\n          ErrorCodes.WALLET_NOT_FOUND\n        )\n      }\n\n      if (error instanceof InsufficientBalanceException) {\n        return ResultFactory.error(\n          error.message,\n          ErrorCodes.INSUFFICIENT_BALANCE,\n          {\n            currency: error.currency.code,\n            requestedAmount: error.requestedAmount.amount,\n            availableAmount: error.availableAmount.amount\n          }\n        )\n      }\n\n      if (error instanceof KycRequiredException) {\n        return ResultFactory.error(\n          error.message,\n          ErrorCodes.KYC_REQUIRED,\n          {\n            currentStatus: error.currentKycStatus,\n            requiredAction: error.requiredAction\n          }\n        )\n      }\n\n      if (error instanceof UnsupportedCurrencyPairException) {\n        return ResultFactory.error(\n          error.message,\n          ErrorCodes.INVALID_INPUT\n        )\n      }\n\n      if (error instanceof StaleExchangeRateException) {\n        return ResultFactory.error(\n          `Exchange rate has moved too much. Current slippage: ${error.rateAge}%`,\n          ErrorCodes.INVALID_INPUT,\n          {\n            slippage: error.rateAge,\n            fromCurrency: error.fromCurrency.code,\n            toCurrency: error.toCurrency.code\n          }\n        )\n      }\n\n      // Handle unexpected errors\n      console.error('Unexpected error in BuyCurrencyUseCase:', error)\n      return ResultFactory.error(\n        'An unexpected error occurred',\n        ErrorCodes.UNEXPECTED_ERROR\n      )\n    }\n  }\n\n  /**\n   * Validate the buy currency command\n   */\n  private validateCommand(command: BuyCurrencyCommand): ValidationResult {\n    const errors = []\n\n    // Validate user ID\n    if (!command.userId || command.userId.trim().length === 0) {\n      errors.push({\n        field: 'userId',\n        message: 'User ID is required',\n        code: 'REQUIRED'\n      })\n    }\n\n    // Validate from currency\n    if (!command.fromCurrency || !Currency.isSupported(command.fromCurrency)) {\n      errors.push({\n        field: 'fromCurrency',\n        message: 'Invalid or unsupported from currency',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    // Validate to currency\n    if (!command.toCurrency || !Currency.isSupported(command.toCurrency)) {\n      errors.push({\n        field: 'toCurrency',\n        message: 'Invalid or unsupported to currency',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    // Validate currencies are different\n    if (command.fromCurrency === command.toCurrency) {\n      errors.push({\n        field: 'toCurrency',\n        message: 'From and to currencies must be different',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    // Validate from amount\n    if (!command.fromAmount || command.fromAmount <= 0) {\n      errors.push({\n        field: 'fromAmount',\n        message: 'From amount must be greater than zero',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    if (command.fromAmount && command.fromAmount > 100000) {\n      errors.push({\n        field: 'fromAmount',\n        message: 'From amount exceeds maximum limit',\n        code: 'EXCEEDS_LIMIT'\n      })\n    }\n\n    // Validate expected rate if provided\n    if (command.expectedRate && command.expectedRate <= 0) {\n      errors.push({\n        field: 'expectedRate',\n        message: 'Expected rate must be greater than zero',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    // Validate max slippage if provided\n    if (command.maxSlippage && (command.maxSlippage < 0 || command.maxSlippage > 10)) {\n      errors.push({\n        field: 'maxSlippage',\n        message: 'Max slippage must be between 0 and 10 percent',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    return errors.length === 0\n      ? ValidationResultFactory.success()\n      : ValidationResultFactory.failure(errors)\n  }\n}\n"],"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","ignoreList":[]}