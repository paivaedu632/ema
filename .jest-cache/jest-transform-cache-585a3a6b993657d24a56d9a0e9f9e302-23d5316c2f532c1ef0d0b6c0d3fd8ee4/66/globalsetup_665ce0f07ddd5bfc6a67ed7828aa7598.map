{"file":"C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\global-setup.ts","mappings":";AAAA;;;GAGG;;;;;AAUH,8BAoEC;AA5ED,uDAAqD;AACrD,mCAAgC;AAChC,gDAAwB;AAExB,6BAA6B;AAC7B,IAAA,eAAM,EAAC,EAAE,IAAI,EAAE,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC;AAC3D,IAAA,eAAM,EAAC,EAAE,IAAI,EAAE,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,YAAY,CAAC,EAAE,CAAC,CAAC;AAE7C,KAAK,UAAU,WAAW;IACvC,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;IAEhD,IAAI,CAAC;QACH,6BAA6B;QAC7B,MAAM,QAAQ,GAAG,IAAA,0BAAY,EAC3B,OAAO,CAAC,GAAG,CAAC,wBAAyB,EACrC,OAAO,CAAC,GAAG,CAAC,yBAA0B,EACtC;YACE,IAAI,EAAE;gBACJ,gBAAgB,EAAE,KAAK;gBACvB,cAAc,EAAE,KAAK;aACtB;SACF,CACF,CAAC;QAEF,2BAA2B;QAC3B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ;aACnC,IAAI,CAAC,OAAO,CAAC;aACb,MAAM,CAAC,OAAO,CAAC;aACf,KAAK,CAAC,CAAC,CAAC,CAAC;QAEZ,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAC9D,MAAM,IAAI,KAAK,CAAC,+BAA+B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QAClE,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;QAE9C,oCAAoC;QACpC,MAAM,CAAC,WAAW,GAAG,KAAK,IAAI,EAAE;YAC9B,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;YAE3C,IAAI,CAAC;gBACH,+CAA+C;gBAC/C,MAAM,QAAQ;qBACX,IAAI,CAAC,OAAO,CAAC;qBACb,MAAM,EAAE;qBACR,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;gBAE3B,wBAAwB;gBACxB,MAAM,QAAQ;qBACX,IAAI,CAAC,SAAS,CAAC;qBACf,MAAM,EAAE;qBACR,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;gBAErB,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;YAC/C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YACjD,CAAC;QACH,CAAC,CAAC;QAEF,oCAAoC;QACpC,MAAM,CAAC,UAAU,GAAG;YAClB,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,wBAAyB;YAClD,kBAAkB,EAAE,OAAO,CAAC,GAAG,CAAC,yBAA0B;YAC1D,eAAe,EAAE,OAAO,CAAC,GAAG,CAAC,6BAA8B;YAC3D,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,uBAAuB;YAC/D,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,OAAO,CAAC;YAC1D,UAAU,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,OAAO,CAAC;SACzD,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;IAE/C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,KAAK,CAAC,CAAC;QACpD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC","names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\global-setup.ts"],"sourcesContent":["/**\n * Global setup for Jest tests\n * Runs once before all test suites\n */\n\nimport { createClient } from '@supabase/supabase-js';\nimport { config } from 'dotenv';\nimport path from 'path';\n\n// Load environment variables\nconfig({ path: path.resolve(process.cwd(), '.env.test') });\nconfig({ path: path.resolve(process.cwd(), '.env.local') });\n\nexport default async function globalSetup() {\n  console.log('🚀 Starting global test setup...');\n  \n  try {\n    // Verify Supabase connection\n    const supabase = createClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!,\n      {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false\n        }\n      }\n    );\n    \n    // Test database connection\n    const { data, error } = await supabase\n      .from('users')\n      .select('count')\n      .limit(1);\n    \n    if (error) {\n      console.error('❌ Database connection failed:', error.message);\n      throw new Error(`Database connection failed: ${error.message}`);\n    }\n    \n    console.log('✅ Database connection verified');\n    \n    // Create test data cleanup function\n    global.testCleanup = async () => {\n      console.log('🧹 Cleaning up test data...');\n      \n      try {\n        // Clean up test users (those with test emails)\n        await supabase\n          .from('users')\n          .delete()\n          .like('email', '%.test');\n        \n        // Clean up test wallets\n        await supabase\n          .from('wallets')\n          .delete()\n          .in('user_id', []);\n        \n        console.log('✅ Test data cleanup completed');\n      } catch (error) {\n        console.error('❌ Test cleanup failed:', error);\n      }\n    };\n    \n    // Store test configuration globally\n    global.testConfig = {\n      supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      supabaseServiceKey: process.env.SUPABASE_SERVICE_ROLE_KEY!,\n      supabaseAnonKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n      apiBaseUrl: process.env.API_BASE_URL || 'http://localhost:3000',\n      testTimeout: parseInt(process.env.TEST_TIMEOUT || '30000'),\n      apiTimeout: parseInt(process.env.API_TIMEOUT || '10000')\n    };\n    \n    console.log('✅ Global test setup completed');\n    \n  } catch (error) {\n    console.error('❌ Global test setup failed:', error);\n    throw error;\n  }\n}\n\n// Type declarations\ndeclare global {\n  var testCleanup: () => Promise<void>;\n  var testConfig: {\n    supabaseUrl: string;\n    supabaseServiceKey: string;\n    supabaseAnonKey: string;\n    apiBaseUrl: string;\n    testTimeout: number;\n    apiTimeout: number;\n  };\n}\n"],"version":3}