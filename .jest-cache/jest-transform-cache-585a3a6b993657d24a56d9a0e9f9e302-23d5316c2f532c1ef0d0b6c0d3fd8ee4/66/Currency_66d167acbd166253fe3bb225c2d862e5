aaf328f1bd7d6468c6550ca68b1fa0e7
/* istanbul ignore next */
function cov_eznayyvrd() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\Currency.ts";
  var hash = "fdc56e94446ff68303c79849e85a3de7164ad0c4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\Currency.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 29
        },
        end: {
          line: 20,
          column: 1
        }
      },
      "1": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 26
        }
      },
      "2": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 48
        }
      },
      "3": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 44
        }
      },
      "4": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "5": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 123
        }
      },
      "6": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 39
        }
      },
      "7": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 35
        }
      },
      "8": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 35
        }
      },
      "9": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 78
        }
      },
      "10": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 49
        }
      },
      "11": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 72
        }
      },
      "12": {
        start: {
          line: 64,
          column: 52
        },
        end: {
          line: 64,
          column: 70
        }
      },
      "13": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 26
        }
      },
      "14": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 31
        }
      },
      "15": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 33
        }
      },
      "16": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 40
        }
      },
      "17": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 42
        }
      },
      "18": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 36
        }
      },
      "19": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 36
        }
      },
      "20": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 62
        }
      },
      "21": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 81
        }
      },
      "22": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 124,
          column: 56
        }
      },
      "23": {
        start: {
          line: 131,
          column: 27
        },
        end: {
          line: 131,
          column: 70
        }
      },
      "24": {
        start: {
          line: 132,
          column: 23
        },
        end: {
          line: 132,
          column: 45
        }
      },
      "25": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "26": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 63
        }
      },
      "27": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 22
        }
      },
      "28": {
        start: {
          line: 142,
          column: 23
        },
        end: {
          line: 142,
          column: 61
        }
      },
      "29": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 63
        }
      },
      "30": {
        start: {
          line: 149,
          column: 23
        },
        end: {
          line: 149,
          column: 61
        }
      },
      "31": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 52
        }
      },
      "32": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 26
        }
      },
      "33": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 26
        }
      },
      "34": {
        start: {
          line: 166,
          column: 19
        },
        end: {
          line: 166,
          column: 33
        }
      },
      "35": {
        start: {
          line: 167,
          column: 19
        },
        end: {
          line: 167,
          column: 33
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 22
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 22
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 26
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 29
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        loc: {
          start: {
            line: 39,
            column: 17
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 39
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 45,
            column: 5
          }
        },
        loc: {
          start: {
            line: 45,
            column: 17
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 45
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 29
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 51
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 31
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 57
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 29
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 63
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 64,
            column: 44
          },
          end: {
            line: 64,
            column: 45
          }
        },
        loc: {
          start: {
            line: 64,
            column: 52
          },
          end: {
            line: 64,
            column: 70
          }
        },
        line: 64
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 69
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 15
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 75
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 17
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 81
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 24
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 87
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        loc: {
          start: {
            line: 93,
            column: 18
          },
          end: {
            line: 95,
            column: 5
          }
        },
        line: 93
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 99
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 105
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 18
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 111
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 25
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 117
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 33
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 123
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 23
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 129
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 36
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 141
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 24
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 148
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 15
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 155
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 13
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 161
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 112,
            column: 15
          },
          end: {
            line: 112,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 112,
            column: 30
          },
          end: {
            line: 112,
            column: 44
          }
        }, {
          start: {
            line: 112,
            column: 47
          },
          end: {
            line: 112,
            column: 61
          }
        }],
        line: 112
      },
      "2": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\Currency.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\Currency.ts"],
      sourcesContent: ["/**\n * Currency Value Object\n * \n * Represents a currency with validation and formatting capabilities.\n * Follows the Value Object pattern - immutable and equality by value.\n */\n\nexport type CurrencyCode = 'EUR' | 'AOA'\n\ninterface CurrencyInfo {\n  code: CurrencyCode\n  name: string\n  symbol: string\n  decimalPlaces: number\n}\n\nconst SUPPORTED_CURRENCIES: Record<CurrencyCode, CurrencyInfo> = {\n  EUR: {\n    code: 'EUR',\n    name: 'Euro',\n    symbol: '\u20AC',\n    decimalPlaces: 2\n  },\n  AOA: {\n    code: 'AOA',\n    name: 'Kwanza Angolano',\n    symbol: 'Kz',\n    decimalPlaces: 2\n  }\n} as const\n\nexport class Currency {\n  private readonly _code: CurrencyCode\n  private readonly _info: CurrencyInfo\n\n  private constructor(code: CurrencyCode) {\n    this._code = code\n    this._info = SUPPORTED_CURRENCIES[code]\n  }\n\n  /**\n   * Create Currency from currency code\n   */\n  static fromCode(code: string): Currency {\n    const upperCode = code.toUpperCase() as CurrencyCode\n    \n    if (!this.isSupported(upperCode)) {\n      throw new Error(`Unsupported currency: ${code}. Supported currencies: ${this.getSupportedCodes().join(', ')}`)\n    }\n    \n    return new Currency(upperCode)\n  }\n\n  /**\n   * Create EUR currency\n   */\n  static EUR(): Currency {\n    return new Currency('EUR')\n  }\n\n  /**\n   * Create AOA currency\n   */\n  static AOA(): Currency {\n    return new Currency('AOA')\n  }\n\n  /**\n   * Check if currency code is supported\n   */\n  static isSupported(code: string): code is CurrencyCode {\n    return Object.keys(SUPPORTED_CURRENCIES).includes(code.toUpperCase())\n  }\n\n  /**\n   * Get all supported currency codes\n   */\n  static getSupportedCodes(): CurrencyCode[] {\n    return Object.keys(SUPPORTED_CURRENCIES) as CurrencyCode[]\n  }\n\n  /**\n   * Get all supported currencies\n   */\n  static getAllSupported(): Currency[] {\n    return this.getSupportedCodes().map(code => new Currency(code))\n  }\n\n  /**\n   * Get currency code\n   */\n  get code(): CurrencyCode {\n    return this._code\n  }\n\n  /**\n   * Get currency name\n   */\n  get name(): string {\n    return this._info.name\n  }\n\n  /**\n   * Get currency symbol\n   */\n  get symbol(): string {\n    return this._info.symbol\n  }\n\n  /**\n   * Get number of decimal places\n   */\n  get decimalPlaces(): number {\n    return this._info.decimalPlaces\n  }\n\n  /**\n   * Check if this currency equals another\n   */\n  equals(other: Currency): boolean {\n    return this._code === other._code\n  }\n\n  /**\n   * Check if this is EUR\n   */\n  isEUR(): boolean {\n    return this._code === 'EUR'\n  }\n\n  /**\n   * Check if this is AOA\n   */\n  isAOA(): boolean {\n    return this._code === 'AOA'\n  }\n\n  /**\n   * Get the opposite currency (EUR <-> AOA)\n   */\n  getOpposite(): Currency {\n    return this.isEUR() ? Currency.AOA() : Currency.EUR()\n  }\n\n  /**\n   * Format amount with currency symbol\n   */\n  formatAmount(amount: number): string {\n    return `${this._info.symbol}${amount.toFixed(this._info.decimalPlaces)}`\n  }\n\n  /**\n   * Format amount for input (without symbol)\n   */\n  formatAmountForInput(amount: number): string {\n    return amount.toFixed(this._info.decimalPlaces)\n  }\n\n  /**\n   * Parse amount from string input\n   */\n  parseAmount(input: string): number {\n    // Remove currency symbol and whitespace\n    const cleanInput = input.replace(this._info.symbol, '').trim()\n    const amount = parseFloat(cleanInput)\n    \n    if (isNaN(amount)) {\n      throw new Error(`Invalid amount format: ${input}`)\n    }\n    \n    return amount\n  }\n\n  /**\n   * Validate amount precision for this currency\n   */\n  validateAmountPrecision(amount: number): boolean {\n    const factor = Math.pow(10, this._info.decimalPlaces)\n    return Math.round(amount * factor) === amount * factor\n  }\n\n  /**\n   * Round amount to currency precision\n   */\n  roundAmount(amount: number): number {\n    const factor = Math.pow(10, this._info.decimalPlaces)\n    return Math.round(amount * factor) / factor\n  }\n\n  /**\n   * Convert to string representation\n   */\n  toString(): string {\n    return this._code\n  }\n\n  /**\n   * Convert to JSON representation\n   */\n  toJSON(): string {\n    return this._code\n  }\n}\n\n// Export commonly used currencies as constants\nexport const EUR = Currency.EUR()\nexport const AOA = Currency.AOA()\n\n// Export type for external use\nexport type { CurrencyCode }\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fdc56e94446ff68303c79849e85a3de7164ad0c4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_eznayyvrd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_eznayyvrd();
/**
 * Currency Value Object
 *
 * Represents a currency with validation and formatting capabilities.
 * Follows the Value Object pattern - immutable and equality by value.
 */
const SUPPORTED_CURRENCIES =
/* istanbul ignore next */
(cov_eznayyvrd().s[0]++, {
  EUR: {
    code: 'EUR',
    name: 'Euro',
    symbol: '€',
    decimalPlaces: 2
  },
  AOA: {
    code: 'AOA',
    name: 'Kwanza Angolano',
    symbol: 'Kz',
    decimalPlaces: 2
  }
});
export class Currency {
  constructor(code) {
    /* istanbul ignore next */
    cov_eznayyvrd().f[0]++;
    cov_eznayyvrd().s[1]++;
    this._code = code;
    /* istanbul ignore next */
    cov_eznayyvrd().s[2]++;
    this._info = SUPPORTED_CURRENCIES[code];
  }
  /**
   * Create Currency from currency code
   */
  static fromCode(code) {
    /* istanbul ignore next */
    cov_eznayyvrd().f[1]++;
    const upperCode =
    /* istanbul ignore next */
    (cov_eznayyvrd().s[3]++, code.toUpperCase());
    /* istanbul ignore next */
    cov_eznayyvrd().s[4]++;
    if (!this.isSupported(upperCode)) {
      /* istanbul ignore next */
      cov_eznayyvrd().b[0][0]++;
      cov_eznayyvrd().s[5]++;
      throw new Error(`Unsupported currency: ${code}. Supported currencies: ${this.getSupportedCodes().join(', ')}`);
    } else
    /* istanbul ignore next */
    {
      cov_eznayyvrd().b[0][1]++;
    }
    cov_eznayyvrd().s[6]++;
    return new Currency(upperCode);
  }
  /**
   * Create EUR currency
   */
  static EUR() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[2]++;
    cov_eznayyvrd().s[7]++;
    return new Currency('EUR');
  }
  /**
   * Create AOA currency
   */
  static AOA() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[3]++;
    cov_eznayyvrd().s[8]++;
    return new Currency('AOA');
  }
  /**
   * Check if currency code is supported
   */
  static isSupported(code) {
    /* istanbul ignore next */
    cov_eznayyvrd().f[4]++;
    cov_eznayyvrd().s[9]++;
    return Object.keys(SUPPORTED_CURRENCIES).includes(code.toUpperCase());
  }
  /**
   * Get all supported currency codes
   */
  static getSupportedCodes() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[5]++;
    cov_eznayyvrd().s[10]++;
    return Object.keys(SUPPORTED_CURRENCIES);
  }
  /**
   * Get all supported currencies
   */
  static getAllSupported() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[6]++;
    cov_eznayyvrd().s[11]++;
    return this.getSupportedCodes().map(code => {
      /* istanbul ignore next */
      cov_eznayyvrd().f[7]++;
      cov_eznayyvrd().s[12]++;
      return new Currency(code);
    });
  }
  /**
   * Get currency code
   */
  get code() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[8]++;
    cov_eznayyvrd().s[13]++;
    return this._code;
  }
  /**
   * Get currency name
   */
  get name() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[9]++;
    cov_eznayyvrd().s[14]++;
    return this._info.name;
  }
  /**
   * Get currency symbol
   */
  get symbol() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[10]++;
    cov_eznayyvrd().s[15]++;
    return this._info.symbol;
  }
  /**
   * Get number of decimal places
   */
  get decimalPlaces() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[11]++;
    cov_eznayyvrd().s[16]++;
    return this._info.decimalPlaces;
  }
  /**
   * Check if this currency equals another
   */
  equals(other) {
    /* istanbul ignore next */
    cov_eznayyvrd().f[12]++;
    cov_eznayyvrd().s[17]++;
    return this._code === other._code;
  }
  /**
   * Check if this is EUR
   */
  isEUR() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[13]++;
    cov_eznayyvrd().s[18]++;
    return this._code === 'EUR';
  }
  /**
   * Check if this is AOA
   */
  isAOA() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[14]++;
    cov_eznayyvrd().s[19]++;
    return this._code === 'AOA';
  }
  /**
   * Get the opposite currency (EUR <-> AOA)
   */
  getOpposite() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[15]++;
    cov_eznayyvrd().s[20]++;
    return this.isEUR() ?
    /* istanbul ignore next */
    (cov_eznayyvrd().b[1][0]++, Currency.AOA()) :
    /* istanbul ignore next */
    (cov_eznayyvrd().b[1][1]++, Currency.EUR());
  }
  /**
   * Format amount with currency symbol
   */
  formatAmount(amount) {
    /* istanbul ignore next */
    cov_eznayyvrd().f[16]++;
    cov_eznayyvrd().s[21]++;
    return `${this._info.symbol}${amount.toFixed(this._info.decimalPlaces)}`;
  }
  /**
   * Format amount for input (without symbol)
   */
  formatAmountForInput(amount) {
    /* istanbul ignore next */
    cov_eznayyvrd().f[17]++;
    cov_eznayyvrd().s[22]++;
    return amount.toFixed(this._info.decimalPlaces);
  }
  /**
   * Parse amount from string input
   */
  parseAmount(input) {
    /* istanbul ignore next */
    cov_eznayyvrd().f[18]++;
    // Remove currency symbol and whitespace
    const cleanInput =
    /* istanbul ignore next */
    (cov_eznayyvrd().s[23]++, input.replace(this._info.symbol, '').trim());
    const amount =
    /* istanbul ignore next */
    (cov_eznayyvrd().s[24]++, parseFloat(cleanInput));
    /* istanbul ignore next */
    cov_eznayyvrd().s[25]++;
    if (isNaN(amount)) {
      /* istanbul ignore next */
      cov_eznayyvrd().b[2][0]++;
      cov_eznayyvrd().s[26]++;
      throw new Error(`Invalid amount format: ${input}`);
    } else
    /* istanbul ignore next */
    {
      cov_eznayyvrd().b[2][1]++;
    }
    cov_eznayyvrd().s[27]++;
    return amount;
  }
  /**
   * Validate amount precision for this currency
   */
  validateAmountPrecision(amount) {
    /* istanbul ignore next */
    cov_eznayyvrd().f[19]++;
    const factor =
    /* istanbul ignore next */
    (cov_eznayyvrd().s[28]++, Math.pow(10, this._info.decimalPlaces));
    /* istanbul ignore next */
    cov_eznayyvrd().s[29]++;
    return Math.round(amount * factor) === amount * factor;
  }
  /**
   * Round amount to currency precision
   */
  roundAmount(amount) {
    /* istanbul ignore next */
    cov_eznayyvrd().f[20]++;
    const factor =
    /* istanbul ignore next */
    (cov_eznayyvrd().s[30]++, Math.pow(10, this._info.decimalPlaces));
    /* istanbul ignore next */
    cov_eznayyvrd().s[31]++;
    return Math.round(amount * factor) / factor;
  }
  /**
   * Convert to string representation
   */
  toString() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[21]++;
    cov_eznayyvrd().s[32]++;
    return this._code;
  }
  /**
   * Convert to JSON representation
   */
  toJSON() {
    /* istanbul ignore next */
    cov_eznayyvrd().f[22]++;
    cov_eznayyvrd().s[33]++;
    return this._code;
  }
}
// Export commonly used currencies as constants
export const EUR =
/* istanbul ignore next */
(cov_eznayyvrd().s[34]++, Currency.EUR());
export const AOA =
/* istanbul ignore next */
(cov_eznayyvrd().s[35]++, Currency.AOA());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,