{"version":3,"names":["cov_24zb5h9bpn","actualCoverage","TRANSACTION_LIMITS","s","EUR","min","max","AOA","EXCHANGE_RATE_VALIDATION","FRONTEND_MARGIN","MARKET_OFFERS_MARGIN","API_BASELINE_MARGIN","FALLBACK_RATES","EUR_TO_AOA","AOA_TO_EUR","formatAmountWithCurrency","VALIDATION_MESSAGES","AMOUNT","REQUIRED","INVALID","MIN","currency","f","MAX","INSUFFICIENT_BALANCE","EXCHANGE_RATE","INVALID_POSITIVE","OUT_OF_RANGE","toFixed","CURRENCY","GENERAL","NETWORK_ERROR","SERVER_ERROR","getTransactionLimits","validateTransactionAmount","amount","availableBalance","limits","b","isValid","error","undefined","validateExchangeRateFormat","exchangeRate","isNaN","calculateExchangeRateRange","baselineRate","margin","validateExchangeRateRange","proposedRate","range","convertExchangeRate","rate","fromCurrency","toCurrency"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\utils\\transaction-validation.ts"],"sourcesContent":["/**\n * Shared validation constants and utilities for EmaPay transactions\n * Ensures consistency between frontend and backend validation\n */\n\n// Transaction limits by currency\nexport const TRANSACTION_LIMITS = {\n  EUR: {\n    min: 1,\n    max: 10000\n  },\n  AOA: {\n    min: 1000,\n    max: 1000000000\n  }\n} as const\n\n// Exchange rate validation constants\nexport const EXCHANGE_RATE_VALIDATION = {\n  // Frontend validation margins (more lenient for UX)\n  FRONTEND_MARGIN: 0.20, // 20% margin for frontend validation\n  \n  // Backend validation margins (stricter for security)\n  MARKET_OFFERS_MARGIN: 0.20, // 20% margin for existing offers\n  API_BASELINE_MARGIN: 0.50, // 50% margin for API baseline\n  \n  // Fallback rates for frontend validation (1 EUR = X AOA format)\n  FALLBACK_RATES: {\n    EUR_TO_AOA: 1100.00, // Updated to match BAI API format\n    AOA_TO_EUR: 0.000909  // Inverse for compatibility (1/1100)\n  }\n} as const\n\nimport { formatAmountWithCurrency, type Currency } from '@/lib/format'\n\n// Portuguese error messages for consistency\nexport const VALIDATION_MESSAGES = {\n  AMOUNT: {\n    REQUIRED: \"Digite um valor\",\n    INVALID: \"Digite um valor válido\",\n    MIN: (min: number, currency: string) => `Valor mínimo: ${formatAmountWithCurrency(min, currency as Currency)}`,\n    MAX: (max: number, currency: string) => `Valor máximo: ${formatAmountWithCurrency(max, currency as Currency)}`,\n    INSUFFICIENT_BALANCE: \"Seu saldo não é suficiente\"\n  },\n  EXCHANGE_RATE: {\n    REQUIRED: \"Taxa de câmbio é obrigatória\",\n    INVALID: \"Digite uma taxa válida\",\n    INVALID_POSITIVE: \"Taxa de câmbio inválida. Deve ser um número positivo.\",\n    OUT_OF_RANGE: \"Taxa de câmbio fora do intervalo aceitável\",\n    MIN: (min: number) => `Valor mínimo: ${min.toFixed(2)}`,\n    MAX: (max: number) => `Valor máximo: ${max.toFixed(2)} AOA`\n  },\n  CURRENCY: {\n    INVALID: \"Moeda inválida. Deve ser EUR ou AOA\"\n  },\n  GENERAL: {\n    NETWORK_ERROR: \"Erro ao processar. Tente novamente.\",\n    SERVER_ERROR: \"Erro interno do servidor\"\n  }\n} as const\n\n// Currency type definition\nexport type Currency = 'EUR' | 'AOA'\n\n/**\n * Get transaction limits for a specific currency\n */\nexport function getTransactionLimits(currency: Currency) {\n  return TRANSACTION_LIMITS[currency]\n}\n\n/**\n * Validate amount against currency limits\n */\nexport function validateTransactionAmount(\n  amount: number, \n  currency: Currency, \n  availableBalance?: number\n): { isValid: boolean; error?: string } {\n  const limits = getTransactionLimits(currency)\n  \n  if (amount <= 0) {\n    return { isValid: false, error: VALIDATION_MESSAGES.AMOUNT.INVALID }\n  }\n  \n  if (amount < limits.min) {\n    return { isValid: false, error: VALIDATION_MESSAGES.AMOUNT.MIN(limits.min, currency) }\n  }\n  \n  if (amount > limits.max) {\n    return { isValid: false, error: VALIDATION_MESSAGES.AMOUNT.MAX(limits.max, currency) }\n  }\n  \n  if (availableBalance !== undefined && amount > availableBalance) {\n    return { isValid: false, error: VALIDATION_MESSAGES.AMOUNT.INSUFFICIENT_BALANCE }\n  }\n  \n  return { isValid: true }\n}\n\n/**\n * Validate exchange rate format (basic validation)\n */\nexport function validateExchangeRateFormat(exchangeRate: number): { isValid: boolean; error?: string } {\n  if (isNaN(exchangeRate) || exchangeRate <= 0) {\n    return { isValid: false, error: VALIDATION_MESSAGES.EXCHANGE_RATE.INVALID }\n  }\n  \n  return { isValid: true }\n}\n\n/**\n * Calculate exchange rate range for frontend validation\n */\nexport function calculateExchangeRateRange(\n  baselineRate: number, \n  margin: number = EXCHANGE_RATE_VALIDATION.FRONTEND_MARGIN\n): { min: number; max: number } {\n  return {\n    min: baselineRate * (1 - margin),\n    max: baselineRate * (1 + margin)\n  }\n}\n\n/**\n * Validate exchange rate against a baseline with margin\n */\nexport function validateExchangeRateRange(\n  proposedRate: number,\n  baselineRate: number,\n  margin: number = EXCHANGE_RATE_VALIDATION.FRONTEND_MARGIN\n): { isValid: boolean; error?: string; range?: { min: number; max: number } } {\n  const range = calculateExchangeRateRange(baselineRate, margin)\n  \n  if (proposedRate < range.min) {\n    return { \n      isValid: false, \n      error: VALIDATION_MESSAGES.EXCHANGE_RATE.MIN(range.min),\n      range \n    }\n  }\n  \n  if (proposedRate > range.max) {\n    return { \n      isValid: false, \n      error: VALIDATION_MESSAGES.EXCHANGE_RATE.MAX(range.max),\n      range \n    }\n  }\n  \n  return { isValid: true, range }\n}\n\n// Formatting functions are in @/lib/format - use those instead\n\n/**\n * Convert exchange rate between different formats\n */\nexport function convertExchangeRate(\n  rate: number,\n  fromCurrency: Currency,\n  toCurrency: Currency\n): number {\n  if (fromCurrency === toCurrency) return rate\n  \n  // If converting from EUR->AOA to AOA->EUR or vice versa\n  return 1 / rate\n}\n"],"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","ignoreList":[]}