{"version":3,"names":["cov_ie0p0kn52","actualCoverage","Money","Currency","FeeCalculationService","constructor","f","s","feeStructures","Map","initializeDefaultFeeStructures","calculateFee","amount","transactionType","user","feeStructure","getFeeStructure","currency","b","Error","code","adjustedStructure","applyUserDiscounts","fixedComponent","fixedFee","percentageAmount","multiply","percentageFee","percentageComponent","fromNumber","totalBeforeConstraints","add","totalFee","isLessThan","minimumFee","isGreaterThan","maximumFee","netAmount","subtract","baseFee","feeBreakdown","appliedRate","calculateExchangeFee","inputAmount","outputAmount","calculateNetworkFee","isExternal","zero","networkFeeStructure","getNetworkFeeStructure","getFeeEstimate","result","feePercentage","estimatedFee","meetsMinimumFeeRequirement","calculatedFee","isGreaterThanOrEqual","key","get","isKycApproved","Object","assign","structure","isEUR","eurCurrency","EUR","aoaCurrency","AOA","set"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\services\\FeeCalculationService.ts"],"sourcesContent":["/**\n * Fee Calculation Domain Service\n * \n * Handles fee calculations for different transaction types.\n * Contains business logic for fee structures and calculations.\n */\n\nimport { Money } from '../value-objects/Money'\nimport { Currency } from '../value-objects/Currency'\nimport { TransactionType } from '../entities/Transaction'\nimport { User } from '../entities/User'\n\nexport interface FeeStructure {\n  transactionType: TransactionType\n  currency: Currency\n  fixedFee: Money\n  percentageFee: number // As decimal (0.02 = 2%)\n  minimumFee: Money\n  maximumFee: Money\n}\n\nexport interface FeeCalculationResult {\n  baseFee: Money\n  percentageFee: Money\n  totalFee: Money\n  netAmount: Money\n  feeBreakdown: {\n    fixedComponent: Money\n    percentageComponent: Money\n    appliedRate: number\n  }\n}\n\nexport class FeeCalculationService {\n  private readonly feeStructures: Map<string, FeeStructure> = new Map()\n\n  constructor() {\n    this.initializeDefaultFeeStructures()\n  }\n\n  /**\n   * Calculate fee for a transaction\n   */\n  calculateFee(\n    amount: Money,\n    transactionType: TransactionType,\n    user?: User\n  ): FeeCalculationResult {\n    const feeStructure = this.getFeeStructure(transactionType, amount.currency)\n    \n    if (!feeStructure) {\n      throw new Error(`No fee structure found for ${transactionType} in ${amount.currency.code}`)\n    }\n\n    // Apply user-specific discounts if applicable\n    const adjustedStructure = this.applyUserDiscounts(feeStructure, user)\n\n    // Calculate fixed fee component\n    const fixedComponent = adjustedStructure.fixedFee\n\n    // Calculate percentage fee component\n    const percentageAmount = amount.multiply(adjustedStructure.percentageFee)\n    const percentageComponent = Money.fromNumber(percentageAmount.amount, amount.currency)\n\n    // Calculate total fee before min/max constraints\n    const totalBeforeConstraints = fixedComponent.add(percentageComponent)\n\n    // Apply minimum and maximum constraints\n    let totalFee = totalBeforeConstraints\n    if (totalFee.isLessThan(adjustedStructure.minimumFee)) {\n      totalFee = adjustedStructure.minimumFee\n    } else if (totalFee.isGreaterThan(adjustedStructure.maximumFee)) {\n      totalFee = adjustedStructure.maximumFee\n    }\n\n    // Calculate net amount\n    const netAmount = amount.subtract(totalFee)\n\n    return {\n      baseFee: fixedComponent,\n      percentageFee: percentageComponent,\n      totalFee,\n      netAmount,\n      feeBreakdown: {\n        fixedComponent,\n        percentageComponent,\n        appliedRate: adjustedStructure.percentageFee\n      }\n    }\n  }\n\n  /**\n   * Calculate fee for currency exchange\n   */\n  calculateExchangeFee(\n    inputAmount: Money,\n    outputAmount: Money,\n    transactionType: 'buy' | 'sell',\n    user?: User\n  ): FeeCalculationResult {\n    // Use the input currency for fee calculation\n    return this.calculateFee(inputAmount, transactionType, user)\n  }\n\n  /**\n   * Calculate network/processing fee for external transactions\n   */\n  calculateNetworkFee(\n    amount: Money,\n    transactionType: TransactionType,\n    isExternal: boolean = false\n  ): Money {\n    if (!isExternal) {\n      return Money.zero(amount.currency)\n    }\n\n    // External transaction fees\n    const networkFeeStructure = this.getNetworkFeeStructure(amount.currency)\n    return networkFeeStructure.fixedFee\n  }\n\n  /**\n   * Get fee estimate for display purposes\n   */\n  getFeeEstimate(\n    amount: Money,\n    transactionType: TransactionType,\n    user?: User\n  ): { estimatedFee: Money; feePercentage: number } {\n    const result = this.calculateFee(amount, transactionType, user)\n    const feePercentage = (result.totalFee.amount / amount.amount) * 100\n\n    return {\n      estimatedFee: result.totalFee,\n      feePercentage\n    }\n  }\n\n  /**\n   * Check if transaction amount meets minimum fee requirements\n   */\n  meetsMinimumFeeRequirement(\n    amount: Money,\n    transactionType: TransactionType\n  ): boolean {\n    const feeStructure = this.getFeeStructure(transactionType, amount.currency)\n    if (!feeStructure) return false\n\n    const calculatedFee = this.calculateFee(amount, transactionType)\n    return calculatedFee.totalFee.isGreaterThanOrEqual(feeStructure.minimumFee)\n  }\n\n  /**\n   * Get fee structure for transaction type and currency\n   */\n  private getFeeStructure(\n    transactionType: TransactionType,\n    currency: Currency\n  ): FeeStructure | undefined {\n    const key = `${transactionType}-${currency.code}`\n    return this.feeStructures.get(key)\n  }\n\n  /**\n   * Apply user-specific fee discounts\n   */\n  private applyUserDiscounts(\n    feeStructure: FeeStructure,\n    user?: User\n  ): FeeStructure {\n    if (!user) {\n      return feeStructure\n    }\n\n    // KYC-approved users get reduced fees\n    if (user.isKycApproved()) {\n      return {\n        ...feeStructure,\n        percentageFee: feeStructure.percentageFee * 0.8, // 20% discount\n        fixedFee: feeStructure.fixedFee.multiply(0.8)\n      }\n    }\n\n    return feeStructure\n  }\n\n  /**\n   * Get network fee structure for external transactions\n   */\n  private getNetworkFeeStructure(currency: Currency): FeeStructure {\n    const key = `network-${currency.code}`\n    const structure = this.feeStructures.get(key)\n    \n    if (!structure) {\n      // Default network fee\n      return {\n        transactionType: 'send',\n        currency,\n        fixedFee: Money.fromNumber(currency.isEUR() ? 2 : 2400, currency), // 2 EUR or 2400 AOA\n        percentageFee: 0,\n        minimumFee: Money.fromNumber(currency.isEUR() ? 1 : 1200, currency),\n        maximumFee: Money.fromNumber(currency.isEUR() ? 10 : 12000, currency)\n      }\n    }\n\n    return structure\n  }\n\n  /**\n   * Initialize default fee structures\n   */\n  private initializeDefaultFeeStructures(): void {\n    const eurCurrency = Currency.EUR()\n    const aoaCurrency = Currency.AOA()\n\n    // Send transaction fees\n    this.feeStructures.set('send-EUR', {\n      transactionType: 'send',\n      currency: eurCurrency,\n      fixedFee: Money.fromNumber(0.5, eurCurrency),\n      percentageFee: 0.015, // 1.5%\n      minimumFee: Money.fromNumber(0.5, eurCurrency),\n      maximumFee: Money.fromNumber(25, eurCurrency)\n    })\n\n    this.feeStructures.set('send-AOA', {\n      transactionType: 'send',\n      currency: aoaCurrency,\n      fixedFee: Money.fromNumber(600, aoaCurrency),\n      percentageFee: 0.015, // 1.5%\n      minimumFee: Money.fromNumber(600, aoaCurrency),\n      maximumFee: Money.fromNumber(30000, aoaCurrency)\n    })\n\n    // Buy transaction fees (buying AOA with EUR)\n    this.feeStructures.set('buy-EUR', {\n      transactionType: 'buy',\n      currency: eurCurrency,\n      fixedFee: Money.fromNumber(1, eurCurrency),\n      percentageFee: 0.02, // 2%\n      minimumFee: Money.fromNumber(1, eurCurrency),\n      maximumFee: Money.fromNumber(50, eurCurrency)\n    })\n\n    // Sell transaction fees (selling AOA for EUR)\n    this.feeStructures.set('sell-AOA', {\n      transactionType: 'sell',\n      currency: aoaCurrency,\n      fixedFee: Money.fromNumber(1200, aoaCurrency),\n      percentageFee: 0.02, // 2%\n      minimumFee: Money.fromNumber(1200, aoaCurrency),\n      maximumFee: Money.fromNumber(60000, aoaCurrency)\n    })\n\n    // Deposit fees (usually free or minimal)\n    this.feeStructures.set('deposit-EUR', {\n      transactionType: 'deposit',\n      currency: eurCurrency,\n      fixedFee: Money.zero(eurCurrency),\n      percentageFee: 0,\n      minimumFee: Money.zero(eurCurrency),\n      maximumFee: Money.fromNumber(5, eurCurrency)\n    })\n\n    this.feeStructures.set('deposit-AOA', {\n      transactionType: 'deposit',\n      currency: aoaCurrency,\n      fixedFee: Money.zero(aoaCurrency),\n      percentageFee: 0,\n      minimumFee: Money.zero(aoaCurrency),\n      maximumFee: Money.fromNumber(6000, aoaCurrency)\n    })\n\n    // Withdraw fees\n    this.feeStructures.set('withdraw-EUR', {\n      transactionType: 'withdraw',\n      currency: eurCurrency,\n      fixedFee: Money.fromNumber(2, eurCurrency),\n      percentageFee: 0.005, // 0.5%\n      minimumFee: Money.fromNumber(2, eurCurrency),\n      maximumFee: Money.fromNumber(20, eurCurrency)\n    })\n\n    this.feeStructures.set('withdraw-AOA', {\n      transactionType: 'withdraw',\n      currency: aoaCurrency,\n      fixedFee: Money.fromNumber(2400, aoaCurrency),\n      percentageFee: 0.005, // 0.5%\n      minimumFee: Money.fromNumber(2400, aoaCurrency),\n      maximumFee: Money.fromNumber(24000, aoaCurrency)\n    })\n  }\n}\n"],"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","ignoreList":[]}