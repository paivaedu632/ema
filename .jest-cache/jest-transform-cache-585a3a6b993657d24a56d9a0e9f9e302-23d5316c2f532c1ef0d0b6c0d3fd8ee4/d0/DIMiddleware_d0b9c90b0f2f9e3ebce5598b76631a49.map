{"version":3,"names":["cov_2got4z3d80","actualCoverage","getContainer","ScopedServiceManager","v4","uuidv4","requestContexts","s","Map","createRequestContext","request","f","requestId","startTime","Date","now","userId","extractUserIdFromRequest","scopedServiceManager","createRequestScope","context","metadata","userAgent","headers","get","ip","b","method","url","set","getRequestContext","cleanupRequestContext","clearScope","delete","duration","console","log","authHeader","undefined","sessionCookie","cookies","withDIMiddleware","handler","response","error","DIAwareController","setContext","resolveScoped","serviceName","Error","resolve","resolveSingleton","container","getRequestMetadata","_a","getRequestId","getUserId","message","level","timestamp","toISOString","logMessage","toUpperCase","warn","RequestScoped","target","propertyKey","Object","defineProperty","enumerable","configurable","Singleton","setupRequestContextCleanup","setInterval","maxAge","entries","getRequestContextStats","activeRequests","size","totalRequests","averageRequestDuration"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\middleware\\DIMiddleware.ts"],"sourcesContent":["/**\n * Dependency Injection Middleware\n * \n * Integrates the DI container with Next.js middleware for request-scoped services.\n * Provides request-specific service resolution and cleanup.\n */\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getContainer } from '../di/Container'\nimport { ScopedServiceManager } from '../di/ServiceLocator'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport interface RequestContext {\n  requestId: string\n  userId?: string\n  startTime: number\n  scopedServiceManager: ScopedServiceManager\n  metadata: Record<string, any>\n}\n\n// Store request contexts\nconst requestContexts = new Map<string, RequestContext>()\n\n/**\n * Create request context with scoped services\n */\nexport function createRequestContext(request: NextRequest): RequestContext {\n  const requestId = uuidv4()\n  const startTime = Date.now()\n  \n  // Extract user ID from request if available\n  const userId = extractUserIdFromRequest(request)\n  \n  // Create scoped service manager\n  const scopedServiceManager = ScopedServiceManager.createRequestScope(requestId)\n  \n  const context: RequestContext = {\n    requestId,\n    userId,\n    startTime,\n    scopedServiceManager,\n    metadata: {\n      userAgent: request.headers.get('user-agent'),\n      ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip'),\n      method: request.method,\n      url: request.url\n    }\n  }\n  \n  requestContexts.set(requestId, context)\n  \n  return context\n}\n\n/**\n * Get request context by ID\n */\nexport function getRequestContext(requestId: string): RequestContext | undefined {\n  return requestContexts.get(requestId)\n}\n\n/**\n * Cleanup request context\n */\nexport function cleanupRequestContext(requestId: string): void {\n  const context = requestContexts.get(requestId)\n  if (context) {\n    // Clear scoped services\n    context.scopedServiceManager.clearScope()\n    \n    // Remove from map\n    requestContexts.delete(requestId)\n    \n    // Log request completion\n    const duration = Date.now() - context.startTime\n    console.log(`Request ${requestId} completed in ${duration}ms`)\n  }\n}\n\n/**\n * Extract user ID from request\n */\nfunction extractUserIdFromRequest(request: NextRequest): string | undefined {\n  // Try to extract from authorization header\n  const authHeader = request.headers.get('authorization')\n  if (authHeader) {\n    // This would depend on your auth implementation\n    // For Clerk, you might extract from the session token\n    return undefined // Placeholder\n  }\n  \n  // Try to extract from cookies\n  const sessionCookie = request.cookies.get('__session')\n  if (sessionCookie) {\n    // Extract user ID from session cookie\n    return undefined // Placeholder\n  }\n  \n  return undefined\n}\n\n/**\n * DI Middleware for Next.js\n */\nexport function withDIMiddleware(\n  handler: (request: NextRequest, context: RequestContext) => Promise<NextResponse>\n) {\n  return async (request: NextRequest): Promise<NextResponse> => {\n    const context = createRequestContext(request)\n    \n    try {\n      // Add request ID to response headers\n      const response = await handler(request, context)\n      response.headers.set('x-request-id', context.requestId)\n      \n      return response\n    } catch (error) {\n      console.error(`Request ${context.requestId} failed:`, error)\n      throw error\n    } finally {\n      // Cleanup request context\n      cleanupRequestContext(context.requestId)\n    }\n  }\n}\n\n/**\n * Enhanced Base Controller with DI Middleware support\n */\nexport abstract class DIAwareController {\n  protected context?: RequestContext\n\n  /**\n   * Set request context\n   */\n  setContext(context: RequestContext): void {\n    this.context = context\n  }\n\n  /**\n   * Resolve service with request scope\n   */\n  protected resolveScoped<T>(serviceName: string): T {\n    if (!this.context) {\n      throw new Error('Request context not available')\n    }\n    \n    return this.context.scopedServiceManager.resolve<T>(serviceName)\n  }\n\n  /**\n   * Resolve singleton service\n   */\n  protected resolveSingleton<T>(serviceName: string): T {\n    const container = getContainer()\n    return container.resolve<T>(serviceName)\n  }\n\n  /**\n   * Get request metadata\n   */\n  protected getRequestMetadata(): Record<string, any> {\n    return this.context?.metadata || {}\n  }\n\n  /**\n   * Get request ID\n   */\n  protected getRequestId(): string {\n    return this.context?.requestId || 'unknown'\n  }\n\n  /**\n   * Get user ID from context\n   */\n  protected getUserId(): string | undefined {\n    return this.context?.userId\n  }\n\n  /**\n   * Log with request context\n   */\n  protected log(message: string, level: 'info' | 'warn' | 'error' = 'info'): void {\n    const requestId = this.getRequestId()\n    const timestamp = new Date().toISOString()\n    const logMessage = `[${timestamp}] [${requestId}] [${level.toUpperCase()}] ${message}`\n    \n    switch (level) {\n      case 'error':\n        console.error(logMessage)\n        break\n      case 'warn':\n        console.warn(logMessage)\n        break\n      default:\n        console.log(logMessage)\n        break\n    }\n  }\n}\n\n/**\n * Request-scoped service decorator\n */\nexport function RequestScoped(serviceName: string) {\n  return function (target: any, propertyKey: string) {\n    Object.defineProperty(target, propertyKey, {\n      get: function () {\n        if (!this.context) {\n          throw new Error('Request context not available for scoped service resolution')\n        }\n        return this.context.scopedServiceManager.resolve(serviceName)\n      },\n      enumerable: true,\n      configurable: false\n    })\n  }\n}\n\n/**\n * Singleton service decorator\n */\nexport function Singleton(serviceName: string) {\n  return function (target: any, propertyKey: string) {\n    Object.defineProperty(target, propertyKey, {\n      get: () => getContainer().resolve(serviceName),\n      enumerable: true,\n      configurable: false\n    })\n  }\n}\n\n/**\n * Cleanup middleware for long-running processes\n */\nexport function setupRequestContextCleanup(): void {\n  // Cleanup old request contexts every 5 minutes\n  setInterval(() => {\n    const now = Date.now()\n    const maxAge = 5 * 60 * 1000 // 5 minutes\n    \n    for (const [requestId, context] of requestContexts.entries()) {\n      if (now - context.startTime > maxAge) {\n        cleanupRequestContext(requestId)\n      }\n    }\n  }, 60 * 1000) // Run every minute\n}\n\n/**\n * Get request context statistics\n */\nexport function getRequestContextStats(): {\n  activeRequests: number\n  totalRequests: number\n  averageRequestDuration: number\n} {\n  const activeRequests = requestContexts.size\n  \n  // This would need to be tracked separately for total requests\n  // and average duration calculations\n  return {\n    activeRequests,\n    totalRequests: 0, // Placeholder\n    averageRequestDuration: 0 // Placeholder\n  }\n}\n\n// Initialize cleanup on module load\nsetupRequestContextCleanup()\n"],"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","ignoreList":[]}