{"version":3,"names":["cov_1w7nfw9d7","actualCoverage","NextResponse","auth","ErrorCodes","BaseController","getAuthenticatedUser","request","f","userId","s","b","Error","id","email","clerkUserId","parseRequestBody","body","json","error","getQueryParams","url","URL","params","searchParams","forEach","value","key","getPathParams","pattern","pathSegments","pathname","split","filter","Boolean","patternSegments","i","length","patternSegment","startsWith","endsWith","paramName","slice","createSuccessResponse","data","status","response","success","timestamp","Date","toISOString","createErrorResponse","errorCode","details","handleUseCaseResult","result","statusCode","getHttpStatusFromErrorCode","handleUnexpectedError","console","errorMessage","message","UNEXPECTED_ERROR","validateRequiredFields","requiredFields","missingFields","field","trim","push","INVALID_INPUT","REQUIRED_FIELD_MISSING","INVALID_FORMAT","USER_NOT_FOUND","WALLET_NOT_FOUND","TRANSACTION_NOT_FOUND","KYC_REQUIRED","USER_NOT_ACTIVE","INSUFFICIENT_BALANCE","TRANSACTION_LIMIT_EXCEEDED","EXTERNAL_SERVICE_ERROR","DATABASE_ERROR","executeWithErrorHandling","action"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\presentation\\controllers\\BaseController.ts"],"sourcesContent":["/**\n * Base Controller\n * \n * Provides common functionality for API controllers including:\n * - Request validation\n * - Authentication handling\n * - Response formatting\n * - Error handling\n */\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { auth } from '@clerk/nextjs/server'\nimport { \n  Result, \n  ErrorResult, \n  SuccessResult, \n  ErrorCodes \n} from '../../application/common/UseCase'\n\nexport interface AuthenticatedUser {\n  id: string\n  email: string\n  clerkUserId: string\n}\n\nexport interface ApiResponse<T = any> {\n  success: boolean\n  data?: T\n  error?: string\n  errorCode?: string\n  details?: Record<string, any>\n  timestamp: string\n}\n\nexport abstract class BaseController {\n  /**\n   * Get authenticated user from request\n   */\n  protected async getAuthenticatedUser(request: NextRequest): Promise<AuthenticatedUser> {\n    const { userId } = await auth()\n\n    if (!userId) {\n      throw new Error('User not authenticated')\n    }\n\n    // In a real implementation, you might want to fetch user details from your database\n    // For now, we'll use the Clerk user ID and extract email from the request or token\n    return {\n      id: userId,\n      email: '', // Would be populated from user repository\n      clerkUserId: userId\n    }\n  }\n\n  /**\n   * Parse and validate JSON request body\n   */\n  protected async parseRequestBody<T>(request: NextRequest): Promise<T> {\n    try {\n      const body = await request.json()\n      return body as T\n    } catch (error) {\n      throw new Error('Invalid JSON in request body')\n    }\n  }\n\n  /**\n   * Extract query parameters from request\n   */\n  protected getQueryParams(request: NextRequest): Record<string, string> {\n    const url = new URL(request.url)\n    const params: Record<string, string> = {}\n    \n    url.searchParams.forEach((value, key) => {\n      params[key] = value\n    })\n    \n    return params\n  }\n\n  /**\n   * Extract path parameters from request URL\n   */\n  protected getPathParams(request: NextRequest, pattern: string): Record<string, string> {\n    const url = new URL(request.url)\n    const pathSegments = url.pathname.split('/').filter(Boolean)\n    const patternSegments = pattern.split('/').filter(Boolean)\n    \n    const params: Record<string, string> = {}\n    \n    for (let i = 0; i < patternSegments.length; i++) {\n      const patternSegment = patternSegments[i]\n      if (patternSegment.startsWith('[') && patternSegment.endsWith(']')) {\n        const paramName = patternSegment.slice(1, -1)\n        params[paramName] = pathSegments[i] || ''\n      }\n    }\n    \n    return params\n  }\n\n  /**\n   * Create success response\n   */\n  protected createSuccessResponse<T>(\n    data: T,\n    status: number = 200\n  ): NextResponse<ApiResponse<T>> {\n    const response: ApiResponse<T> = {\n      success: true,\n      data,\n      timestamp: new Date().toISOString()\n    }\n    \n    return NextResponse.json(response, { status })\n  }\n\n  /**\n   * Create error response\n   */\n  protected createErrorResponse(\n    error: string,\n    errorCode: string,\n    status: number = 400,\n    details?: Record<string, any>\n  ): NextResponse<ApiResponse> {\n    const response: ApiResponse = {\n      success: false,\n      error,\n      errorCode,\n      details,\n      timestamp: new Date().toISOString()\n    }\n    \n    return NextResponse.json(response, { status })\n  }\n\n  /**\n   * Convert use case result to HTTP response\n   */\n  protected handleUseCaseResult<T>(\n    result: SuccessResult<T> | ErrorResult\n  ): NextResponse<ApiResponse<T>> {\n    if (result.success) {\n      return this.createSuccessResponse(result.data)\n    }\n\n    // Map error codes to HTTP status codes\n    const statusCode = this.getHttpStatusFromErrorCode(result.errorCode)\n    \n    return this.createErrorResponse(\n      result.error,\n      result.errorCode,\n      statusCode,\n      result.details\n    )\n  }\n\n  /**\n   * Handle unexpected errors\n   */\n  protected handleUnexpectedError(error: unknown): NextResponse<ApiResponse> {\n    console.error('Unexpected error in API controller:', error)\n    \n    const errorMessage = error instanceof Error ? error.message : 'An unexpected error occurred'\n    \n    return this.createErrorResponse(\n      errorMessage,\n      ErrorCodes.UNEXPECTED_ERROR,\n      500\n    )\n  }\n\n  /**\n   * Validate required fields in request body\n   */\n  protected validateRequiredFields(\n    body: Record<string, any>,\n    requiredFields: string[]\n  ): string[] {\n    const missingFields: string[] = []\n    \n    for (const field of requiredFields) {\n      if (!body[field] || (typeof body[field] === 'string' && body[field].trim() === '')) {\n        missingFields.push(field)\n      }\n    }\n    \n    return missingFields\n  }\n\n  /**\n   * Map error codes to HTTP status codes\n   */\n  private getHttpStatusFromErrorCode(errorCode: string): number {\n    switch (errorCode) {\n      case ErrorCodes.INVALID_INPUT:\n      case ErrorCodes.REQUIRED_FIELD_MISSING:\n      case ErrorCodes.INVALID_FORMAT:\n        return 400 // Bad Request\n        \n      case ErrorCodes.USER_NOT_FOUND:\n      case ErrorCodes.WALLET_NOT_FOUND:\n      case ErrorCodes.TRANSACTION_NOT_FOUND:\n        return 404 // Not Found\n        \n      case ErrorCodes.KYC_REQUIRED:\n      case ErrorCodes.USER_NOT_ACTIVE:\n        return 403 // Forbidden\n        \n      case ErrorCodes.INSUFFICIENT_BALANCE:\n      case ErrorCodes.TRANSACTION_LIMIT_EXCEEDED:\n        return 422 // Unprocessable Entity\n        \n      case ErrorCodes.EXTERNAL_SERVICE_ERROR:\n        return 502 // Bad Gateway\n        \n      case ErrorCodes.DATABASE_ERROR:\n      case ErrorCodes.UNEXPECTED_ERROR:\n        return 500 // Internal Server Error\n        \n      default:\n        return 400 // Default to Bad Request\n    }\n  }\n\n  /**\n   * Execute controller action with error handling\n   */\n  protected async executeWithErrorHandling<T>(\n    action: () => Promise<NextResponse<ApiResponse<T>>>\n  ): Promise<NextResponse<ApiResponse<T>>> {\n    try {\n      return await action()\n    } catch (error) {\n      return this.handleUnexpectedError(error) as NextResponse<ApiResponse<T>>\n    }\n  }\n}\n"],"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","ignoreList":[]}