{"version":3,"names":["cov_1qzqzsog8f","actualCoverage","withAuth","createSuccessResponse","ErrorResponses","withErrorHandling","withCors","validateRequestBody","pinSetSchema","setUserPin","createHash","pinSetHandler","request","user","f","validation","s","success","b","validationError","error","pin","confirmPin","data","pinHash","update","userId","digest","result","user_id","pin_hash","databaseError","responseData","pinSet","timestamp","Date","toISOString","console","internalError","POST"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\security\\pin\\route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { withAuth, AuthenticatedUser } from '@/lib/auth/middleware';\nimport { createSuccessResponse, ErrorResponses, withErrorHandling } from '@/lib/api/responses';\nimport { withCors } from '@/lib/api/cors';\nimport { validateRequestBody } from '@/lib/validation/helpers';\nimport { pinSetSchema } from '@/lib/validation/schemas';\nimport { setUserPin } from '@/lib/database/functions';\nimport { createHash } from 'crypto';\n\nasync function pinSetHandler(request: NextRequest, user: AuthenticatedUser) {\n  // Validate request body\n  const validation = await validateRequestBody(request, pinSetSchema);\n  if (!validation.success) {\n    return ErrorResponses.validationError(validation.error!);\n  }\n\n  const { pin, confirmPin } = validation.data!;\n\n  // Double-check PIN confirmation (schema already validates this)\n  if (pin !== confirmPin) {\n    return ErrorResponses.validationError(\"PINs don't match\");\n  }\n\n  try {\n    // Hash the PIN before storing\n    const pinHash = createHash('sha256').update(pin + user.userId).digest('hex');\n\n    // Set/update user PIN\n    const result = await setUserPin({\n      user_id: user.userId,\n      pin_hash: pinHash\n    });\n\n    if (!result.success) {\n      return ErrorResponses.databaseError(result.error);\n    }\n\n    const responseData = {\n      userId: user.userId,\n      pinSet: true,\n      timestamp: new Date().toISOString()\n    };\n\n    return createSuccessResponse(responseData, 'PIN set successfully');\n\n  } catch (error) {\n    console.error('PIN set error:', error);\n    return ErrorResponses.internalError('Failed to set PIN');\n  }\n}\n\nexport const POST = withCors(withErrorHandling(withAuth(pinSetHandler)));\n"],"mappings":"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","ignoreList":[]}