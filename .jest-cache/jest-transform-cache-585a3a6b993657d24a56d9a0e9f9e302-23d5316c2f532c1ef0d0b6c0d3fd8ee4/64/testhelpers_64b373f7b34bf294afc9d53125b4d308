0757c815ac21ecd8928452974725f596
"use strict";
/**
 * Test Helper Utilities
 * Common utilities and assertions for EmaPay API tests
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.helpers = exports.TestHelpers = void 0;
/**
 * Test assertion helpers
 */
class TestHelpers {
    /**
     * Assert that response is a successful API response
     */
    static assertSuccessResponse(response, expectedStatus = 200) {
        expect(response.status).toBe(expectedStatus);
        expect(response.body).toHaveProperty('success', true);
        expect(response.body).toHaveProperty('data');
        expect(response.body.error).toBeUndefined();
        return response.body.data;
    }
    /**
     * Assert that response is an error API response
     */
    static assertErrorResponse(response, expectedStatus, expectedErrorCode) {
        expect(response.status).toBe(expectedStatus);
        expect(response.body).toHaveProperty('success', false);
        expect(response.body).toHaveProperty('error');
        expect(response.body.data).toBeUndefined();
        if (expectedErrorCode) {
            expect(response.body.code).toBe(expectedErrorCode);
        }
    }
    /**
     * Assert that response time is within acceptable limits
     */
    static assertResponseTime(response, maxTimeMs) {
        expect(response.responseTime).toHaveResponseTime(maxTimeMs);
    }
    /**
     * Assert that user data is valid
     */
    static assertValidUserData(userData) {
        expect(userData).toHaveProperty('userId');
        expect(userData.userId).toBeValidUUID();
        if (userData.email) {
            expect(userData.email).toBeValidEmail();
        }
        expect(userData).toHaveProperty('authenticated', true);
    }
    /**
     * Assert that wallet balance is valid
     */
    static assertValidWalletBalance(balance) {
        expect(balance).toHaveProperty('currency');
        expect(balance.currency).toBeValidCurrency();
        expect(balance).toHaveProperty('availableBalance');
        expect(balance.availableBalance).toBeValidAmount();
        expect(balance).toHaveProperty('reservedBalance');
        expect(balance.reservedBalance).toBeValidAmount();
        expect(balance).toHaveProperty('totalBalance');
        expect(balance.totalBalance).toBeValidAmount();
        // Total balance should equal available + reserved
        expect(balance.totalBalance).toBe(balance.availableBalance + balance.reservedBalance);
    }
    /**
     * Assert that transfer data is valid
     */
    static assertValidTransfer(transfer) {
        expect(transfer).toHaveProperty('id');
        expect(transfer.id).toBeValidUUID();
        expect(transfer).toHaveProperty('fromUserId');
        expect(transfer.fromUserId).toBeValidUUID();
        expect(transfer).toHaveProperty('toUserId');
        expect(transfer.toUserId).toBeValidUUID();
        expect(transfer).toHaveProperty('currency');
        expect(transfer.currency).toBeValidCurrency();
        expect(transfer).toHaveProperty('amount');
        expect(transfer.amount).toBeValidAmount();
        expect(transfer).toHaveProperty('status');
        expect(['pending', 'completed', 'failed', 'cancelled']).toContain(transfer.status);
        expect(transfer).toHaveProperty('createdAt');
        expect(new Date(transfer.createdAt)).toBeInstanceOf(Date);
    }
    /**
     * Assert that order data is valid
     */
    static assertValidOrder(order) {
        expect(order).toHaveProperty('id');
        expect(order.id).toBeValidUUID();
        expect(order).toHaveProperty('userId');
        expect(order.userId).toBeValidUUID();
        expect(order).toHaveProperty('side');
        expect(['buy', 'sell']).toContain(order.side);
        expect(order).toHaveProperty('currency');
        expect(order.currency).toBeValidCurrency();
        expect(order).toHaveProperty('amount');
        expect(order.amount).toBeValidAmount();
        if (order.price) {
            expect(order.price).toBeValidAmount();
        }
        expect(order).toHaveProperty('status');
        expect(['pending', 'filled', 'cancelled', 'partial']).toContain(order.status);
        expect(order).toHaveProperty('createdAt');
        expect(new Date(order.createdAt)).toBeInstanceOf(Date);
    }
    /**
     * Assert that market data is valid
     */
    static assertValidMarketData(marketData) {
        expect(marketData).toHaveProperty('pair');
        expect(marketData.pair).toBe('EUR/AOA');
        if (marketData.lastPrice) {
            expect(marketData.lastPrice).toBeValidAmount();
        }
        if (marketData.volume24h) {
            expect(marketData.volume24h).toBeValidAmount();
        }
        if (marketData.change24h) {
            expect(typeof marketData.change24h).toBe('number');
        }
    }
    /**
     * Assert that order book data is valid
     */
    static assertValidOrderBook(orderBook) {
        expect(orderBook).toHaveProperty('bids');
        expect(orderBook).toHaveProperty('asks');
        expect(orderBook).toHaveProperty('timestamp');
        expect(Array.isArray(orderBook.bids)).toBe(true);
        expect(Array.isArray(orderBook.asks)).toBe(true);
        // Check bid/ask structure
        orderBook.bids.forEach((bid) => {
            expect(bid).toHaveProperty('price');
            expect(bid).toHaveProperty('amount');
            expect(bid.price).toBeValidAmount();
            expect(bid.amount).toBeValidAmount();
        });
        orderBook.asks.forEach((ask) => {
            expect(ask).toHaveProperty('price');
            expect(ask).toHaveProperty('amount');
            expect(ask.price).toBeValidAmount();
            expect(ask.amount).toBeValidAmount();
        });
    }
    /**
     * Generate test data for transfers
     */
    static generateTransferData(recipientId, currency = 'EUR', amount = 10.50) {
        return {
            recipientId,
            currency,
            amount,
            pin: '123456',
            description: `Test transfer ${Date.now()}`
        };
    }
    /**
     * Generate test data for limit orders
     */
    static generateLimitOrderData(side = 'buy', currency = 'EUR', amount = 100, price = 650) {
        return {
            side,
            currency,
            amount,
            price,
            pin: '123456'
        };
    }
    /**
     * Generate test data for market orders
     */
    static generateMarketOrderData(side = 'buy', currency = 'EUR', amount = 100) {
        return {
            side,
            currency,
            amount,
            pin: '123456'
        };
    }
    /**
     * Wait for a condition to be true
     */
    static async waitFor(condition, timeoutMs = 5000, intervalMs = 100) {
        const startTime = Date.now();
        while (Date.now() - startTime < timeoutMs) {
            if (await condition()) {
                return;
            }
            await new Promise(resolve => setTimeout(resolve, intervalMs));
        }
        throw new Error(`Condition not met within ${timeoutMs}ms`);
    }
    /**
     * Create a test PIN for users
     */
    static generateTestPin() {
        return '123456'; // Standard test PIN
    }
    /**
     * Validate decimal precision
     */
    static assertDecimalPrecision(value, maxDecimals = 2) {
        const decimalPlaces = (value.toString().split('.')[1] || '').length;
        expect(decimalPlaces).toBeLessThanOrEqual(maxDecimals);
    }
    /**
     * Assert that arrays are sorted correctly
     */
    static assertSortedByDate(items, dateField = 'createdAt', descending = true) {
        for (let i = 1; i < items.length; i++) {
            const current = new Date(items[i][dateField]).getTime();
            const previous = new Date(items[i - 1][dateField]).getTime();
            if (descending) {
                expect(current).toBeLessThanOrEqual(previous);
            }
            else {
                expect(current).toBeGreaterThanOrEqual(previous);
            }
        }
    }
}
exports.TestHelpers = TestHelpers;
exports.helpers = TestHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,