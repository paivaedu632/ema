{"version":3,"names":["z","CurrencySchema","cov_1y87mfr7uk","s","enum","message","PositiveNumberSchema","number","positive","createAmountSchema","currency","f","limits","EUR","min","max","AOA","StringToNumberSchema","string","transform","val","num","parseFloat","isNaN","b","Error","pipe","UUIDSchema","uuid","EmailSchema","email","OrderSideSchema","OrderTypeSchema","PlaceOrderSchema","object","side","type","base_currency","quote_currency","quantity","price","optional","dynamic_pricing_enabled","boolean","default","refine","data","path","PaginationQuerySchema","page","coerce","int","limit","validateRequestBody","request","schema","body","json","parse","error","ZodError","errorMessage","issues","map","err","join","validateQueryParams","searchParams","params","Object","fromEntries","entries","safeValidate","result","success"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\validation.ts"],"sourcesContent":["import { z } from 'zod'\nimport { NextRequest } from 'next/server'\n\n// ===== BASIC VALIDATION SCHEMAS =====\n\n/**\n * Currency validation schema\n */\nexport const CurrencySchema = z.enum(['EUR', 'AOA'], {\n  message: 'Moeda deve ser \"EUR\" ou \"AOA\"'\n})\n\n/**\n * Positive number validation schema\n */\nexport const PositiveNumberSchema = z.number().positive({\n  message: 'Valor deve ser um número positivo'\n})\n\n/**\n * Create amount validation schema with currency-specific limits\n */\nexport const createAmountSchema = (currency: 'EUR' | 'AOA') => {\n  const limits = {\n    EUR: { min: 0.01, max: 50000 },\n    AOA: { min: 1, max: 20000000 }\n  }\n  \n  return z.number()\n    .min(limits[currency].min, `Valor mínimo para ${currency}: ${limits[currency].min}`)\n    .max(limits[currency].max, `Valor máximo para ${currency}: ${limits[currency].max}`)\n}\n\n/**\n * String to number conversion schema\n */\nexport const StringToNumberSchema = z.string()\n  .transform((val) => {\n    const num = parseFloat(val)\n    if (isNaN(num)) {\n      throw new Error('Valor deve ser um número válido')\n    }\n    return num\n  })\n  .pipe(PositiveNumberSchema)\n\n/**\n * UUID validation schema\n */\nexport const UUIDSchema = z.string().uuid({\n  message: 'ID deve ser um UUID válido'\n})\n\n/**\n * Email validation schema\n */\nexport const EmailSchema = z.string()\n  .email({ message: 'Email deve ter um formato válido' })\n  .min(1, { message: 'Email é obrigatório' })\n\n// ===== ORDER VALIDATION SCHEMAS (for testing) =====\n\n/**\n * Order side validation schema\n */\nexport const OrderSideSchema = z.enum(['buy', 'sell'], {\n  message: 'Lado da ordem deve ser \"buy\" ou \"sell\"'\n})\n\n/**\n * Order type validation schema\n */\nexport const OrderTypeSchema = z.enum(['limit', 'market'], {\n  message: 'Tipo de ordem deve ser \"limit\" ou \"market\"'\n})\n\n/**\n * Order placement validation schema (for testing purposes)\n */\nexport const PlaceOrderSchema = z.object({\n  side: OrderSideSchema,\n  type: OrderTypeSchema,\n  base_currency: CurrencySchema,\n  quote_currency: CurrencySchema,\n  quantity: PositiveNumberSchema,\n  price: PositiveNumberSchema.optional(),\n  dynamic_pricing_enabled: z.boolean().optional().default(false)\n}).refine((data) => {\n  // Ensure currencies are different\n  if (data.base_currency === data.quote_currency) {\n    return false\n  }\n  return true\n}, {\n  message: 'Base and quote currencies must be different',\n  path: ['quote_currency']\n}).refine((data) => {\n  // Price required for limit orders\n  if (data.type === 'limit' && !data.price) {\n    return false\n  }\n  return true\n}, {\n  message: 'Price is required for limit orders',\n  path: ['price']\n})\n\n// ===== PAGINATION VALIDATION SCHEMAS =====\n\n/**\n * Pagination query validation schema\n */\nexport const PaginationQuerySchema = z.object({\n  page: z.coerce.number().int().min(1).default(1),\n  limit: z.coerce.number().int().min(1).max(100).default(20)\n})\n\n// ===== VALIDATION UTILITIES =====\n\n/**\n * Validate request body with Zod schema\n */\nexport async function validateRequestBody<T>(\n  request: NextRequest,\n  schema: z.ZodSchema<T>\n): Promise<T> {\n  try {\n    const body = await request.json()\n    return schema.parse(body)\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.issues\n        .map((err: any) => `${err.path.join('.')}: ${err.message}`)\n        .join(', ')\n      throw new Error(`Validation error: ${errorMessage}`)\n    }\n    throw new Error('Invalid JSON in request body')\n  }\n}\n\n/**\n * Validate query parameters with Zod schema\n */\nexport function validateQueryParams<T>(\n  searchParams: URLSearchParams,\n  schema: z.ZodSchema<T>\n): T {\n  try {\n    const params = Object.fromEntries(searchParams.entries())\n    return schema.parse(params)\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.issues\n        .map((err: any) => `${err.path.join('.')}: ${err.message}`)\n        .join(', ')\n      throw new Error(`Query validation error: ${errorMessage}`)\n    }\n    throw new Error('Invalid query parameters')\n  }\n}\n\n/**\n * Safe validation that returns result with success/error\n */\nexport function safeValidate<T>(\n  data: unknown,\n  schema: z.ZodSchema<T>\n): { success: true; data: T } | { success: false; error: string } {\n  try {\n    const result = schema.parse(data)\n    return { success: true, data: result }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.issues\n        .map((err: any) => `${err.path.join('.')}: ${err.message}`)\n        .join(', ')\n      return { success: false, error: errorMessage }\n    }\n    return { success: false, error: 'Validation failed' }\n  }\n}\n"],"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","ignoreList":[]}