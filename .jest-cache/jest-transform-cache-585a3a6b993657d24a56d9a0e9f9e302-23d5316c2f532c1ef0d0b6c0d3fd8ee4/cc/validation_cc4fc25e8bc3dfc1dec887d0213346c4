d638ea4c830b6fd28bbac71f12d2e023
/* istanbul ignore next */
function cov_1y87mfr7uk() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\validation.ts";
  var hash = "580ac35e76d26f7271b23f5a5a6a226566101d45";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\validation.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 30
        },
        end: {
          line: 8,
          column: 2
        }
      },
      "1": {
        start: {
          line: 12,
          column: 36
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "2": {
        start: {
          line: 18,
          column: 34
        },
        end: {
          line: 26,
          column: 1
        }
      },
      "3": {
        start: {
          line: 19,
          column: 19
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "4": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 93
        }
      },
      "5": {
        start: {
          line: 30,
          column: 36
        },
        end: {
          line: 38,
          column: 31
        }
      },
      "6": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 31
        }
      },
      "7": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "8": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 59
        }
      },
      "9": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 15
        }
      },
      "10": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 44,
          column: 2
        }
      },
      "11": {
        start: {
          line: 48,
          column: 27
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "12": {
        start: {
          line: 55,
          column: 31
        },
        end: {
          line: 57,
          column: 2
        }
      },
      "13": {
        start: {
          line: 61,
          column: 31
        },
        end: {
          line: 63,
          column: 2
        }
      },
      "14": {
        start: {
          line: 67,
          column: 32
        },
        end: {
          line: 93,
          column: 2
        }
      },
      "15": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      "16": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 21
        }
      },
      "17": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 16
        }
      },
      "18": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 88,
          column: 5
        }
      },
      "19": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 21
        }
      },
      "20": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 16
        }
      },
      "21": {
        start: {
          line: 98,
          column: 37
        },
        end: {
          line: 101,
          column: 2
        }
      },
      "22": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "23": {
        start: {
          line: 108,
          column: 21
        },
        end: {
          line: 108,
          column: 41
        }
      },
      "24": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 34
        }
      },
      "25": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "26": {
        start: {
          line: 113,
          column: 33
        },
        end: {
          line: 115,
          column: 27
        }
      },
      "27": {
        start: {
          line: 114,
          column: 30
        },
        end: {
          line: 114,
          column: 69
        }
      },
      "28": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 65
        }
      },
      "29": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 56
        }
      },
      "30": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 137,
          column: 5
        }
      },
      "31": {
        start: {
          line: 126,
          column: 23
        },
        end: {
          line: 126,
          column: 65
        }
      },
      "32": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 36
        }
      },
      "33": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "34": {
        start: {
          line: 131,
          column: 33
        },
        end: {
          line: 133,
          column: 27
        }
      },
      "35": {
        start: {
          line: 132,
          column: 30
        },
        end: {
          line: 132,
          column: 69
        }
      },
      "36": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 71
        }
      },
      "37": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 52
        }
      },
      "38": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "39": {
        start: {
          line: 144,
          column: 23
        },
        end: {
          line: 144,
          column: 41
        }
      },
      "40": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 47
        }
      },
      "41": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "42": {
        start: {
          line: 149,
          column: 33
        },
        end: {
          line: 151,
          column: 27
        }
      },
      "43": {
        start: {
          line: 150,
          column: 30
        },
        end: {
          line: 150,
          column: 69
        }
      },
      "44": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 152,
          column: 59
        }
      },
      "45": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 34
          },
          end: {
            line: 18,
            column: 35
          }
        },
        loc: {
          start: {
            line: 18,
            column: 48
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 31,
            column: 15
          },
          end: {
            line: 31,
            column: 16
          }
        },
        loc: {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 31
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 75,
            column: 10
          },
          end: {
            line: 75,
            column: 11
          }
        },
        loc: {
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 75
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 84,
            column: 10
          },
          end: {
            line: 84,
            column: 11
          }
        },
        loc: {
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 84
      },
      "4": {
        name: "validateRequestBody",
        decl: {
          start: {
            line: 106,
            column: 22
          },
          end: {
            line: 106,
            column: 41
          }
        },
        loc: {
          start: {
            line: 106,
            column: 59
          },
          end: {
            line: 120,
            column: 1
          }
        },
        line: 106
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 114,
            column: 21
          },
          end: {
            line: 114,
            column: 22
          }
        },
        loc: {
          start: {
            line: 114,
            column: 30
          },
          end: {
            line: 114,
            column: 69
          }
        },
        line: 114
      },
      "6": {
        name: "validateQueryParams",
        decl: {
          start: {
            line: 124,
            column: 16
          },
          end: {
            line: 124,
            column: 35
          }
        },
        loc: {
          start: {
            line: 124,
            column: 58
          },
          end: {
            line: 138,
            column: 1
          }
        },
        line: 124
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 132,
            column: 21
          },
          end: {
            line: 132,
            column: 22
          }
        },
        loc: {
          start: {
            line: 132,
            column: 30
          },
          end: {
            line: 132,
            column: 69
          }
        },
        line: 132
      },
      "8": {
        name: "safeValidate",
        decl: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 142,
            column: 28
          }
        },
        loc: {
          start: {
            line: 142,
            column: 43
          },
          end: {
            line: 156,
            column: 1
          }
        },
        line: 142
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 150,
            column: 21
          },
          end: {
            line: 150,
            column: 22
          }
        },
        loc: {
          start: {
            line: 150,
            column: 30
          },
          end: {
            line: 150,
            column: 69
          }
        },
        line: 150
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 86,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 86,
            column: 29
          }
        }, {
          start: {
            line: 86,
            column: 33
          },
          end: {
            line: 86,
            column: 44
          }
        }],
        line: 86
      },
      "4": {
        loc: {
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "5": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "6": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\validation.ts",
      mappings: "AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAA;AAGvB,uCAAuC;AAEvC;;GAEG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE;IACnD,OAAO,EAAE,+BAA+B;CACzC,CAAC,CAAA;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC;IACtD,OAAO,EAAE,mCAAmC;CAC7C,CAAC,CAAA;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,QAAuB,EAAE,EAAE;IAC5D,MAAM,MAAM,GAAG;QACb,GAAG,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE;QAC9B,GAAG,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE;KAC/B,CAAA;IAED,OAAO,CAAC,CAAC,MAAM,EAAE;SACd,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,qBAAqB,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;SACnF,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,qBAAqB,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC,CAAA;AACxF,CAAC,CAAA;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,CAAC,MAAM,EAAE;KAC3C,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;IACjB,MAAM,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;IAC3B,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAA;IACpD,CAAC;IACD,OAAO,GAAG,CAAA;AACZ,CAAC,CAAC;KACD,IAAI,CAAC,oBAAoB,CAAC,CAAA;AAE7B;;GAEG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IACxC,OAAO,EAAE,4BAA4B;CACtC,CAAC,CAAA;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,CAAC,MAAM,EAAE;KAClC,KAAK,CAAC,EAAE,OAAO,EAAE,kCAAkC,EAAE,CAAC;KACtD,GAAG,CAAC,CAAC,EAAE,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC,CAAA;AAE7C,qDAAqD;AAErD;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE;IACrD,OAAO,EAAE,wCAAwC;CAClD,CAAC,CAAA;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE;IACzD,OAAO,EAAE,4CAA4C;CACtD,CAAC,CAAA;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC;IACvC,IAAI,EAAE,eAAe;IACrB,IAAI,EAAE,eAAe;IACrB,aAAa,EAAE,cAAc;IAC7B,cAAc,EAAE,cAAc;IAC9B,QAAQ,EAAE,oBAAoB;IAC9B,KAAK,EAAE,oBAAoB,CAAC,QAAQ,EAAE;IACtC,uBAAuB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;CAC/D,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;IACjB,kCAAkC;IAClC,IAAI,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,cAAc,EAAE,CAAC;QAC/C,OAAO,KAAK,CAAA;IACd,CAAC;IACD,OAAO,IAAI,CAAA;AACb,CAAC,EAAE;IACD,OAAO,EAAE,6CAA6C;IACtD,IAAI,EAAE,CAAC,gBAAgB,CAAC;CACzB,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE;IACjB,kCAAkC;IAClC,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QACzC,OAAO,KAAK,CAAA;IACd,CAAC;IACD,OAAO,IAAI,CAAA;AACb,CAAC,EAAE;IACD,OAAO,EAAE,oCAAoC;IAC7C,IAAI,EAAE,CAAC,OAAO,CAAC;CAChB,CAAC,CAAA;AAEF,4CAA4C;AAE5C;;GAEG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,CAAC,MAAM,CAAC;IAC5C,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/C,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC;CAC3D,CAAC,CAAA;AAEF,mCAAmC;AAEnC;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB,CACvC,OAAoB,EACpB,MAAsB;IAEtB,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAA;QACjC,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;IAC3B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;YAChC,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM;iBAC9B,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC;iBAC1D,IAAI,CAAC,IAAI,CAAC,CAAA;YACb,MAAM,IAAI,KAAK,CAAC,qBAAqB,YAAY,EAAE,CAAC,CAAA;QACtD,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAA;IACjD,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,mBAAmB,CACjC,YAA6B,EAC7B,MAAsB;IAEtB,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAA;QACzD,OAAO,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IAC7B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;YAChC,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM;iBAC9B,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC;iBAC1D,IAAI,CAAC,IAAI,CAAC,CAAA;YACb,MAAM,IAAI,KAAK,CAAC,2BAA2B,YAAY,EAAE,CAAC,CAAA;QAC5D,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;IAC7C,CAAC;AACH,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,YAAY,CAC1B,IAAa,EACb,MAAsB;IAEtB,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QACjC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAA;IACxC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;YAChC,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM;iBAC9B,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC;iBAC1D,IAAI,CAAC,IAAI,CAAC,CAAA;YACb,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,CAAA;QAChD,CAAC;QACD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAA;IACvD,CAAC;AACH,CAAC",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\validation.ts"],
      sourcesContent: ["import { z } from 'zod'\nimport { NextRequest } from 'next/server'\n\n// ===== BASIC VALIDATION SCHEMAS =====\n\n/**\n * Currency validation schema\n */\nexport const CurrencySchema = z.enum(['EUR', 'AOA'], {\n  message: 'Moeda deve ser \"EUR\" ou \"AOA\"'\n})\n\n/**\n * Positive number validation schema\n */\nexport const PositiveNumberSchema = z.number().positive({\n  message: 'Valor deve ser um n\xFAmero positivo'\n})\n\n/**\n * Create amount validation schema with currency-specific limits\n */\nexport const createAmountSchema = (currency: 'EUR' | 'AOA') => {\n  const limits = {\n    EUR: { min: 0.01, max: 50000 },\n    AOA: { min: 1, max: 20000000 }\n  }\n  \n  return z.number()\n    .min(limits[currency].min, `Valor m\xEDnimo para ${currency}: ${limits[currency].min}`)\n    .max(limits[currency].max, `Valor m\xE1ximo para ${currency}: ${limits[currency].max}`)\n}\n\n/**\n * String to number conversion schema\n */\nexport const StringToNumberSchema = z.string()\n  .transform((val) => {\n    const num = parseFloat(val)\n    if (isNaN(num)) {\n      throw new Error('Valor deve ser um n\xFAmero v\xE1lido')\n    }\n    return num\n  })\n  .pipe(PositiveNumberSchema)\n\n/**\n * UUID validation schema\n */\nexport const UUIDSchema = z.string().uuid({\n  message: 'ID deve ser um UUID v\xE1lido'\n})\n\n/**\n * Email validation schema\n */\nexport const EmailSchema = z.string()\n  .email({ message: 'Email deve ter um formato v\xE1lido' })\n  .min(1, { message: 'Email \xE9 obrigat\xF3rio' })\n\n// ===== ORDER VALIDATION SCHEMAS (for testing) =====\n\n/**\n * Order side validation schema\n */\nexport const OrderSideSchema = z.enum(['buy', 'sell'], {\n  message: 'Lado da ordem deve ser \"buy\" ou \"sell\"'\n})\n\n/**\n * Order type validation schema\n */\nexport const OrderTypeSchema = z.enum(['limit', 'market'], {\n  message: 'Tipo de ordem deve ser \"limit\" ou \"market\"'\n})\n\n/**\n * Order placement validation schema (for testing purposes)\n */\nexport const PlaceOrderSchema = z.object({\n  side: OrderSideSchema,\n  type: OrderTypeSchema,\n  base_currency: CurrencySchema,\n  quote_currency: CurrencySchema,\n  quantity: PositiveNumberSchema,\n  price: PositiveNumberSchema.optional(),\n  dynamic_pricing_enabled: z.boolean().optional().default(false)\n}).refine((data) => {\n  // Ensure currencies are different\n  if (data.base_currency === data.quote_currency) {\n    return false\n  }\n  return true\n}, {\n  message: 'Base and quote currencies must be different',\n  path: ['quote_currency']\n}).refine((data) => {\n  // Price required for limit orders\n  if (data.type === 'limit' && !data.price) {\n    return false\n  }\n  return true\n}, {\n  message: 'Price is required for limit orders',\n  path: ['price']\n})\n\n// ===== PAGINATION VALIDATION SCHEMAS =====\n\n/**\n * Pagination query validation schema\n */\nexport const PaginationQuerySchema = z.object({\n  page: z.coerce.number().int().min(1).default(1),\n  limit: z.coerce.number().int().min(1).max(100).default(20)\n})\n\n// ===== VALIDATION UTILITIES =====\n\n/**\n * Validate request body with Zod schema\n */\nexport async function validateRequestBody<T>(\n  request: NextRequest,\n  schema: z.ZodSchema<T>\n): Promise<T> {\n  try {\n    const body = await request.json()\n    return schema.parse(body)\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.issues\n        .map((err: any) => `${err.path.join('.')}: ${err.message}`)\n        .join(', ')\n      throw new Error(`Validation error: ${errorMessage}`)\n    }\n    throw new Error('Invalid JSON in request body')\n  }\n}\n\n/**\n * Validate query parameters with Zod schema\n */\nexport function validateQueryParams<T>(\n  searchParams: URLSearchParams,\n  schema: z.ZodSchema<T>\n): T {\n  try {\n    const params = Object.fromEntries(searchParams.entries())\n    return schema.parse(params)\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.issues\n        .map((err: any) => `${err.path.join('.')}: ${err.message}`)\n        .join(', ')\n      throw new Error(`Query validation error: ${errorMessage}`)\n    }\n    throw new Error('Invalid query parameters')\n  }\n}\n\n/**\n * Safe validation that returns result with success/error\n */\nexport function safeValidate<T>(\n  data: unknown,\n  schema: z.ZodSchema<T>\n): { success: true; data: T } | { success: false; error: string } {\n  try {\n    const result = schema.parse(data)\n    return { success: true, data: result }\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      const errorMessage = error.issues\n        .map((err: any) => `${err.path.join('.')}: ${err.message}`)\n        .join(', ')\n      return { success: false, error: errorMessage }\n    }\n    return { success: false, error: 'Validation failed' }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "580ac35e76d26f7271b23f5a5a6a226566101d45"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1y87mfr7uk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1y87mfr7uk();
import { z } from 'zod';
// ===== BASIC VALIDATION SCHEMAS =====
/**
 * Currency validation schema
 */
export const CurrencySchema =
/* istanbul ignore next */
(cov_1y87mfr7uk().s[0]++, z.enum(['EUR', 'AOA'], {
  message: 'Moeda deve ser "EUR" ou "AOA"'
}));
/**
 * Positive number validation schema
 */
export const PositiveNumberSchema =
/* istanbul ignore next */
(cov_1y87mfr7uk().s[1]++, z.number().positive({
  message: 'Valor deve ser um número positivo'
}));
/**
 * Create amount validation schema with currency-specific limits
 */
/* istanbul ignore next */
cov_1y87mfr7uk().s[2]++;
export const createAmountSchema = currency => {
  /* istanbul ignore next */
  cov_1y87mfr7uk().f[0]++;
  const limits =
  /* istanbul ignore next */
  (cov_1y87mfr7uk().s[3]++, {
    EUR: {
      min: 0.01,
      max: 50000
    },
    AOA: {
      min: 1,
      max: 20000000
    }
  });
  /* istanbul ignore next */
  cov_1y87mfr7uk().s[4]++;
  return z.number().min(limits[currency].min, `Valor mínimo para ${currency}: ${limits[currency].min}`).max(limits[currency].max, `Valor máximo para ${currency}: ${limits[currency].max}`);
};
/**
 * String to number conversion schema
 */
export const StringToNumberSchema =
/* istanbul ignore next */
(cov_1y87mfr7uk().s[5]++, z.string().transform(val => {
  /* istanbul ignore next */
  cov_1y87mfr7uk().f[1]++;
  const num =
  /* istanbul ignore next */
  (cov_1y87mfr7uk().s[6]++, parseFloat(val));
  /* istanbul ignore next */
  cov_1y87mfr7uk().s[7]++;
  if (isNaN(num)) {
    /* istanbul ignore next */
    cov_1y87mfr7uk().b[0][0]++;
    cov_1y87mfr7uk().s[8]++;
    throw new Error('Valor deve ser um número válido');
  } else
  /* istanbul ignore next */
  {
    cov_1y87mfr7uk().b[0][1]++;
  }
  cov_1y87mfr7uk().s[9]++;
  return num;
}).pipe(PositiveNumberSchema));
/**
 * UUID validation schema
 */
export const UUIDSchema =
/* istanbul ignore next */
(cov_1y87mfr7uk().s[10]++, z.string().uuid({
  message: 'ID deve ser um UUID válido'
}));
/**
 * Email validation schema
 */
export const EmailSchema =
/* istanbul ignore next */
(cov_1y87mfr7uk().s[11]++, z.string().email({
  message: 'Email deve ter um formato válido'
}).min(1, {
  message: 'Email é obrigatório'
}));
// ===== ORDER VALIDATION SCHEMAS (for testing) =====
/**
 * Order side validation schema
 */
export const OrderSideSchema =
/* istanbul ignore next */
(cov_1y87mfr7uk().s[12]++, z.enum(['buy', 'sell'], {
  message: 'Lado da ordem deve ser "buy" ou "sell"'
}));
/**
 * Order type validation schema
 */
export const OrderTypeSchema =
/* istanbul ignore next */
(cov_1y87mfr7uk().s[13]++, z.enum(['limit', 'market'], {
  message: 'Tipo de ordem deve ser "limit" ou "market"'
}));
/**
 * Order placement validation schema (for testing purposes)
 */
export const PlaceOrderSchema =
/* istanbul ignore next */
(cov_1y87mfr7uk().s[14]++, z.object({
  side: OrderSideSchema,
  type: OrderTypeSchema,
  base_currency: CurrencySchema,
  quote_currency: CurrencySchema,
  quantity: PositiveNumberSchema,
  price: PositiveNumberSchema.optional(),
  dynamic_pricing_enabled: z.boolean().optional().default(false)
}).refine(data => {
  /* istanbul ignore next */
  cov_1y87mfr7uk().f[2]++;
  cov_1y87mfr7uk().s[15]++;
  // Ensure currencies are different
  if (data.base_currency === data.quote_currency) {
    /* istanbul ignore next */
    cov_1y87mfr7uk().b[1][0]++;
    cov_1y87mfr7uk().s[16]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_1y87mfr7uk().b[1][1]++;
  }
  cov_1y87mfr7uk().s[17]++;
  return true;
}, {
  message: 'Base and quote currencies must be different',
  path: ['quote_currency']
}).refine(data => {
  /* istanbul ignore next */
  cov_1y87mfr7uk().f[3]++;
  cov_1y87mfr7uk().s[18]++;
  // Price required for limit orders
  if (
  /* istanbul ignore next */
  (cov_1y87mfr7uk().b[3][0]++, data.type === 'limit') &&
  /* istanbul ignore next */
  (cov_1y87mfr7uk().b[3][1]++, !data.price)) {
    /* istanbul ignore next */
    cov_1y87mfr7uk().b[2][0]++;
    cov_1y87mfr7uk().s[19]++;
    return false;
  } else
  /* istanbul ignore next */
  {
    cov_1y87mfr7uk().b[2][1]++;
  }
  cov_1y87mfr7uk().s[20]++;
  return true;
}, {
  message: 'Price is required for limit orders',
  path: ['price']
}));
// ===== PAGINATION VALIDATION SCHEMAS =====
/**
 * Pagination query validation schema
 */
export const PaginationQuerySchema =
/* istanbul ignore next */
(cov_1y87mfr7uk().s[21]++, z.object({
  page: z.coerce.number().int().min(1).default(1),
  limit: z.coerce.number().int().min(1).max(100).default(20)
}));
// ===== VALIDATION UTILITIES =====
/**
 * Validate request body with Zod schema
 */
export async function validateRequestBody(request, schema) {
  /* istanbul ignore next */
  cov_1y87mfr7uk().f[4]++;
  cov_1y87mfr7uk().s[22]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_1y87mfr7uk().s[23]++, await request.json());
    /* istanbul ignore next */
    cov_1y87mfr7uk().s[24]++;
    return schema.parse(body);
  } catch (error) {
    /* istanbul ignore next */
    cov_1y87mfr7uk().s[25]++;
    if (error instanceof z.ZodError) {
      /* istanbul ignore next */
      cov_1y87mfr7uk().b[4][0]++;
      const errorMessage =
      /* istanbul ignore next */
      (cov_1y87mfr7uk().s[26]++, error.issues.map(err => {
        /* istanbul ignore next */
        cov_1y87mfr7uk().f[5]++;
        cov_1y87mfr7uk().s[27]++;
        return `${err.path.join('.')}: ${err.message}`;
      }).join(', '));
      /* istanbul ignore next */
      cov_1y87mfr7uk().s[28]++;
      throw new Error(`Validation error: ${errorMessage}`);
    } else
    /* istanbul ignore next */
    {
      cov_1y87mfr7uk().b[4][1]++;
    }
    cov_1y87mfr7uk().s[29]++;
    throw new Error('Invalid JSON in request body');
  }
}
/**
 * Validate query parameters with Zod schema
 */
export function validateQueryParams(searchParams, schema) {
  /* istanbul ignore next */
  cov_1y87mfr7uk().f[6]++;
  cov_1y87mfr7uk().s[30]++;
  try {
    const params =
    /* istanbul ignore next */
    (cov_1y87mfr7uk().s[31]++, Object.fromEntries(searchParams.entries()));
    /* istanbul ignore next */
    cov_1y87mfr7uk().s[32]++;
    return schema.parse(params);
  } catch (error) {
    /* istanbul ignore next */
    cov_1y87mfr7uk().s[33]++;
    if (error instanceof z.ZodError) {
      /* istanbul ignore next */
      cov_1y87mfr7uk().b[5][0]++;
      const errorMessage =
      /* istanbul ignore next */
      (cov_1y87mfr7uk().s[34]++, error.issues.map(err => {
        /* istanbul ignore next */
        cov_1y87mfr7uk().f[7]++;
        cov_1y87mfr7uk().s[35]++;
        return `${err.path.join('.')}: ${err.message}`;
      }).join(', '));
      /* istanbul ignore next */
      cov_1y87mfr7uk().s[36]++;
      throw new Error(`Query validation error: ${errorMessage}`);
    } else
    /* istanbul ignore next */
    {
      cov_1y87mfr7uk().b[5][1]++;
    }
    cov_1y87mfr7uk().s[37]++;
    throw new Error('Invalid query parameters');
  }
}
/**
 * Safe validation that returns result with success/error
 */
export function safeValidate(data, schema) {
  /* istanbul ignore next */
  cov_1y87mfr7uk().f[8]++;
  cov_1y87mfr7uk().s[38]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_1y87mfr7uk().s[39]++, schema.parse(data));
    /* istanbul ignore next */
    cov_1y87mfr7uk().s[40]++;
    return {
      success: true,
      data: result
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1y87mfr7uk().s[41]++;
    if (error instanceof z.ZodError) {
      /* istanbul ignore next */
      cov_1y87mfr7uk().b[6][0]++;
      const errorMessage =
      /* istanbul ignore next */
      (cov_1y87mfr7uk().s[42]++, error.issues.map(err => {
        /* istanbul ignore next */
        cov_1y87mfr7uk().f[9]++;
        cov_1y87mfr7uk().s[43]++;
        return `${err.path.join('.')}: ${err.message}`;
      }).join(', '));
      /* istanbul ignore next */
      cov_1y87mfr7uk().s[44]++;
      return {
        success: false,
        error: errorMessage
      };
    } else
    /* istanbul ignore next */
    {
      cov_1y87mfr7uk().b[6][1]++;
    }
    cov_1y87mfr7uk().s[45]++;
    return {
      success: false,
      error: 'Validation failed'
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,