73f3667d04c4b1d7a6e3ea6351f9e4a4
"use strict";
/**
 * Environment setup for tests
 * Loads test-specific environment variables
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv_1 = require("dotenv");
const path_1 = __importDefault(require("path"));
// Load test environment variables
(0, dotenv_1.config)({ path: path_1.default.resolve(process.cwd(), '.env.test') });
// Fallback to local environment if test env doesn't exist
(0, dotenv_1.config)({ path: path_1.default.resolve(process.cwd(), '.env.local') });
// Set test-specific environment variables
process.env.NODE_ENV = 'test';
process.env.NEXT_PUBLIC_APP_ENV = 'test';
// Database configuration for tests
process.env.SUPABASE_TEST_MODE = 'true';
// Disable external services in tests
process.env.DISABLE_WEBHOOKS = 'true';
process.env.DISABLE_EMAILS = 'true';
process.env.DISABLE_SMS = 'true';
// Test timeouts
process.env.TEST_TIMEOUT = '30000';
process.env.API_TIMEOUT = '10000';
// Logging configuration for tests
process.env.LOG_LEVEL = 'error'; // Reduce noise in test output
// JWT configuration for tests
process.env.JWT_TEST_EXPIRY = '1h'; // Shorter expiry for tests
console.log('ðŸ§ª Test environment configured');
console.log(`ðŸ“Š Database URL: ${process.env.NEXT_PUBLIC_SUPABASE_URL ? 'Configured' : 'Missing'}`);
console.log(`ðŸ”‘ Service Key: ${process.env.SUPABASE_SERVICE_ROLE_KEY ? 'Configured' : 'Missing'}`);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVc2VyXFxEb2N1bWVudHNcXEdpdEh1YlxcZW1hXFx0ZXN0c1xcZW52LXNldHVwLnRzIiwibWFwcGluZ3MiOiI7QUFBQTs7O0dBR0c7Ozs7O0FBRUgsbUNBQWdDO0FBQ2hDLGdEQUF3QjtBQUV4QixrQ0FBa0M7QUFDbEMsSUFBQSxlQUFNLEVBQUMsRUFBRSxJQUFJLEVBQUUsY0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRTNELDBEQUEwRDtBQUMxRCxJQUFBLGVBQU0sRUFBQyxFQUFFLElBQUksRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFNUQsMENBQTBDO0FBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixHQUFHLE1BQU0sQ0FBQztBQUV6QyxtQ0FBbUM7QUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxNQUFNLENBQUM7QUFFeEMscUNBQXFDO0FBQ3JDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEdBQUcsTUFBTSxDQUFDO0FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQztBQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUM7QUFFakMsZ0JBQWdCO0FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztBQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUM7QUFFbEMsa0NBQWtDO0FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxDQUFDLDhCQUE4QjtBQUUvRCw4QkFBOEI7QUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLENBQUMsMkJBQTJCO0FBRS9ELE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDbkcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVXNlclxcRG9jdW1lbnRzXFxHaXRIdWJcXGVtYVxcdGVzdHNcXGVudi1zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVudmlyb25tZW50IHNldHVwIGZvciB0ZXN0c1xuICogTG9hZHMgdGVzdC1zcGVjaWZpYyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAqL1xuXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdkb3RlbnYnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbi8vIExvYWQgdGVzdCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbmNvbmZpZyh7IHBhdGg6IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnLmVudi50ZXN0JykgfSk7XG5cbi8vIEZhbGxiYWNrIHRvIGxvY2FsIGVudmlyb25tZW50IGlmIHRlc3QgZW52IGRvZXNuJ3QgZXhpc3RcbmNvbmZpZyh7IHBhdGg6IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAnLmVudi5sb2NhbCcpIH0pO1xuXG4vLyBTZXQgdGVzdC1zcGVjaWZpYyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbnByb2Nlc3MuZW52Lk5PREVfRU5WID0gJ3Rlc3QnO1xucHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBQX0VOViA9ICd0ZXN0JztcblxuLy8gRGF0YWJhc2UgY29uZmlndXJhdGlvbiBmb3IgdGVzdHNcbnByb2Nlc3MuZW52LlNVUEFCQVNFX1RFU1RfTU9ERSA9ICd0cnVlJztcblxuLy8gRGlzYWJsZSBleHRlcm5hbCBzZXJ2aWNlcyBpbiB0ZXN0c1xucHJvY2Vzcy5lbnYuRElTQUJMRV9XRUJIT09LUyA9ICd0cnVlJztcbnByb2Nlc3MuZW52LkRJU0FCTEVfRU1BSUxTID0gJ3RydWUnO1xucHJvY2Vzcy5lbnYuRElTQUJMRV9TTVMgPSAndHJ1ZSc7XG5cbi8vIFRlc3QgdGltZW91dHNcbnByb2Nlc3MuZW52LlRFU1RfVElNRU9VVCA9ICczMDAwMCc7XG5wcm9jZXNzLmVudi5BUElfVElNRU9VVCA9ICcxMDAwMCc7XG5cbi8vIExvZ2dpbmcgY29uZmlndXJhdGlvbiBmb3IgdGVzdHNcbnByb2Nlc3MuZW52LkxPR19MRVZFTCA9ICdlcnJvcic7IC8vIFJlZHVjZSBub2lzZSBpbiB0ZXN0IG91dHB1dFxuXG4vLyBKV1QgY29uZmlndXJhdGlvbiBmb3IgdGVzdHNcbnByb2Nlc3MuZW52LkpXVF9URVNUX0VYUElSWSA9ICcxaCc7IC8vIFNob3J0ZXIgZXhwaXJ5IGZvciB0ZXN0c1xuXG5jb25zb2xlLmxvZygn8J+nqiBUZXN0IGVudmlyb25tZW50IGNvbmZpZ3VyZWQnKTtcbmNvbnNvbGUubG9nKGDwn5OKIERhdGFiYXNlIFVSTDogJHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgPyAnQ29uZmlndXJlZCcgOiAnTWlzc2luZyd9YCk7XG5jb25zb2xlLmxvZyhg8J+UkSBTZXJ2aWNlIEtleTogJHtwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZID8gJ0NvbmZpZ3VyZWQnIDogJ01pc3NpbmcnfWApO1xuIl0sInZlcnNpb24iOjN9