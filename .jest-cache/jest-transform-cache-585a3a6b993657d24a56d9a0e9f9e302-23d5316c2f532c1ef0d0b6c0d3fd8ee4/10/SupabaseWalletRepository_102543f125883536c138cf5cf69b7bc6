966edbe5f764b0437b1615fcdd975601
/* istanbul ignore next */
function cov_1rcfntemj3() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\repositories\\SupabaseWalletRepository.ts";
  var hash = "a799297fdaa64e80a81ebd760f9195dc5f78a212";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\repositories\\SupabaseWalletRepository.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 33
        }
      },
      "1": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "2": {
        start: {
          line: 18,
          column: 36
        },
        end: {
          line: 22,
          column: 25
        }
      },
      "3": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "4": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 26,
          column: 17
        }
      },
      "5": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 32
        }
      },
      "6": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 120
        }
      },
      "7": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 42
        }
      },
      "8": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "9": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 28
        }
      },
      "10": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 108
        }
      },
      "11": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "12": {
        start: {
          line: 40,
          column: 36
        },
        end: {
          line: 45,
          column: 25
        }
      },
      "13": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 51,
          column: 13
        }
      },
      "14": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 49,
          column: 17
        }
      },
      "15": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 48,
          column: 32
        }
      },
      "16": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 150
        }
      },
      "17": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 52,
          column: 42
        }
      },
      "18": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "19": {
        start: {
          line: 56,
          column: 16
        },
        end: {
          line: 56,
          column: 28
        }
      },
      "20": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 138
        }
      },
      "21": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "22": {
        start: {
          line: 63,
          column: 36
        },
        end: {
          line: 67,
          column: 34
        }
      },
      "23": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 70,
          column: 13
        }
      },
      "24": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 69,
          column: 130
        }
      },
      "25": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 64
        }
      },
      "26": {
        start: {
          line: 71,
          column: 38
        },
        end: {
          line: 71,
          column: 62
        }
      },
      "27": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 76,
          column: 13
        }
      },
      "28": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 28
        }
      },
      "29": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 118
        }
      },
      "30": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "31": {
        start: {
          line: 82,
          column: 29
        },
        end: {
          line: 82,
          column: 48
        }
      },
      "32": {
        start: {
          line: 83,
          column: 29
        },
        end: {
          line: 83,
          column: 57
        }
      },
      "33": {
        start: {
          line: 84,
          column: 30
        },
        end: {
          line: 88,
          column: 14
        }
      },
      "34": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "35": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 110
        }
      },
      "36": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "37": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 28
        }
      },
      "38": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 97
        }
      },
      "39": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "40": {
        start: {
          line: 102,
          column: 30
        },
        end: {
          line: 102,
          column: 92
        }
      },
      "41": {
        start: {
          line: 102,
          column: 52
        },
        end: {
          line: 102,
          column: 91
        }
      },
      "42": {
        start: {
          line: 103,
          column: 30
        },
        end: {
          line: 107,
          column: 14
        }
      },
      "43": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "44": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 124
        }
      },
      "45": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "46": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 28
        }
      },
      "47": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 111
        }
      },
      "48": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "49": {
        start: {
          line: 121,
          column: 30
        },
        end: {
          line: 124,
          column: 35
        }
      },
      "50": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "51": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 114
        }
      },
      "52": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "53": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 28
        }
      },
      "54": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 101
        }
      },
      "55": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "56": {
        start: {
          line: 138,
          column: 36
        },
        end: {
          line: 143,
          column: 25
        }
      },
      "57": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "58": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 142
        }
      },
      "59": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 147,
          column: 33
        }
      },
      "60": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "61": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 28
        }
      },
      "62": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 130
        }
      },
      "63": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "64": {
        start: {
          line: 158,
          column: 36
        },
        end: {
          line: 161,
          column: 44
        }
      },
      "65": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "66": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 146
        }
      },
      "67": {
        start: {
          line: 165,
          column: 31
        },
        end: {
          line: 165,
          column: 40
        }
      },
      "68": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "69": {
        start: {
          line: 167,
          column: 33
        },
        end: {
          line: 167,
          column: 67
        }
      },
      "70": {
        start: {
          line: 168,
          column: 37
        },
        end: {
          line: 168,
          column: 87
        }
      },
      "71": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 83
        }
      },
      "72": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 30
        }
      },
      "73": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "74": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 28
        }
      },
      "75": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 135
        }
      },
      "76": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "77": {
        start: {
          line: 182,
          column: 36
        },
        end: {
          line: 186,
          column: 58
        }
      },
      "78": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "79": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 156
        }
      },
      "80": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 190,
          column: 64
        }
      },
      "81": {
        start: {
          line: 190,
          column: 38
        },
        end: {
          line: 190,
          column: 62
        }
      },
      "82": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 195,
          column: 13
        }
      },
      "83": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 28
        }
      },
      "84": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 144
        }
      },
      "85": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "86": {
        start: {
          line: 201,
          column: 36
        },
        end: {
          line: 205,
          column: 42
        }
      },
      "87": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "88": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 152
        }
      },
      "89": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 64
        }
      },
      "90": {
        start: {
          line: 209,
          column: 38
        },
        end: {
          line: 209,
          column: 62
        }
      },
      "91": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "92": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 28
        }
      },
      "93": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 140
        }
      },
      "94": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "95": {
        start: {
          line: 220,
          column: 36
        },
        end: {
          line: 222,
          column: 72
        }
      },
      "96": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "97": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 135
        }
      },
      "98": {
        start: {
          line: 226,
          column: 43
        },
        end: {
          line: 226,
          column: 52
        }
      },
      "99": {
        start: {
          line: 227,
          column: 43
        },
        end: {
          line: 227,
          column: 52
        }
      },
      "100": {
        start: {
          line: 228,
          column: 32
        },
        end: {
          line: 228,
          column: 33
        }
      },
      "101": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "102": {
        start: {
          line: 230,
          column: 33
        },
        end: {
          line: 230,
          column: 67
        }
      },
      "103": {
        start: {
          line: 232,
          column: 37
        },
        end: {
          line: 232,
          column: 97
        }
      },
      "104": {
        start: {
          line: 233,
          column: 33
        },
        end: {
          line: 233,
          column: 103
        }
      },
      "105": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 63
        }
      },
      "106": {
        start: {
          line: 236,
          column: 40
        },
        end: {
          line: 236,
          column: 100
        }
      },
      "107": {
        start: {
          line: 237,
          column: 36
        },
        end: {
          line: 237,
          column: 108
        }
      },
      "108": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 66
        }
      },
      "109": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 242,
          column: 17
        }
      },
      "110": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 36
        }
      },
      "111": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 249,
          column: 14
        }
      },
      "112": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "113": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 28
        }
      },
      "114": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 255,
          column: 124
        }
      },
      "115": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "116": {
        start: {
          line: 260,
          column: 36
        },
        end: {
          line: 264,
          column: 57
        }
      },
      "117": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 267,
          column: 13
        }
      },
      "118": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 150
        }
      },
      "119": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 64
        }
      },
      "120": {
        start: {
          line: 268,
          column: 38
        },
        end: {
          line: 268,
          column: 62
        }
      },
      "121": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 273,
          column: 13
        }
      },
      "122": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 272,
          column: 28
        }
      },
      "123": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 138
        }
      },
      "124": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "125": {
        start: {
          line: 280,
          column: 30
        },
        end: {
          line: 284,
          column: 14
        }
      },
      "126": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "127": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 129
        }
      },
      "128": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "129": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 28
        }
      },
      "130": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 116
        }
      },
      "131": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "132": {
        start: {
          line: 299,
          column: 30
        },
        end: {
          line: 303,
          column: 14
        }
      },
      "133": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 306,
          column: 13
        }
      },
      "134": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 305,
          column: 122
        }
      },
      "135": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 311,
          column: 13
        }
      },
      "136": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 28
        }
      },
      "137": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 111
        }
      },
      "138": {
        start: {
          line: 319,
          column: 25
        },
        end: {
          line: 319,
          column: 61
        }
      },
      "139": {
        start: {
          line: 320,
          column: 33
        },
        end: {
          line: 320,
          column: 87
        }
      },
      "140": {
        start: {
          line: 321,
          column: 32
        },
        end: {
          line: 321,
          column: 85
        }
      },
      "141": {
        start: {
          line: 322,
          column: 25
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "142": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 45
        }
      },
      "143": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 345,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 52
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 5
          }
        },
        loc: {
          start: {
            line: 61,
            column: 31
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 61
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 71,
            column: 28
          },
          end: {
            line: 71,
            column: 29
          }
        },
        loc: {
          start: {
            line: 71,
            column: 38
          },
          end: {
            line: 71,
            column: 62
          }
        },
        line: 71
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        loc: {
          start: {
            line: 80,
            column: 23
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 80
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 100
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 102,
            column: 42
          },
          end: {
            line: 102,
            column: 43
          }
        },
        loc: {
          start: {
            line: 102,
            column: 52
          },
          end: {
            line: 102,
            column: 91
          }
        },
        line: 102
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 119
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 54
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 136
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 156,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        loc: {
          start: {
            line: 156,
            column: 42
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 156
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 180,
            column: 4
          },
          end: {
            line: 180,
            column: 5
          }
        },
        loc: {
          start: {
            line: 180,
            column: 52
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 180
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 190,
            column: 28
          },
          end: {
            line: 190,
            column: 29
          }
        },
        loc: {
          start: {
            line: 190,
            column: 38
          },
          end: {
            line: 190,
            column: 62
          }
        },
        line: 190
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 44
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 199
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 209,
            column: 28
          },
          end: {
            line: 209,
            column: 29
          }
        },
        loc: {
          start: {
            line: 209,
            column: 38
          },
          end: {
            line: 209,
            column: 62
          }
        },
        line: 209
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 32
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 218
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 53
          },
          end: {
            line: 276,
            column: 5
          }
        },
        line: 258
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 268,
            column: 28
          },
          end: {
            line: 268,
            column: 29
          }
        },
        loc: {
          start: {
            line: 268,
            column: 38
          },
          end: {
            line: 268,
            column: 62
          }
        },
        line: 268
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        loc: {
          start: {
            line: 277,
            column: 81
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 277
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 58
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 296
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 26
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 318
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 336,
            column: 4
          },
          end: {
            line: 336,
            column: 5
          }
        },
        loc: {
          start: {
            line: 336,
            column: 28
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 336
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 26,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 26,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 51,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 12
          },
          end: {
            line: 70,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 76,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 91,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "10": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "11": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "12": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "13": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "14": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 146,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 146,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "15": {
        loc: {
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 144,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 144,
            column: 21
          }
        }, {
          start: {
            line: 144,
            column: 25
          },
          end: {
            line: 144,
            column: 50
          }
        }],
        line: 144
      },
      "16": {
        loc: {
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 12
          },
          end: {
            line: 152,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "17": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "18": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "19": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "20": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 195,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "21": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 208,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "22": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "23": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "24": {
        loc: {
          start: {
            line: 232,
            column: 37
          },
          end: {
            line: 232,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 37
          },
          end: {
            line: 232,
            column: 73
          }
        }, {
          start: {
            line: 232,
            column: 77
          },
          end: {
            line: 232,
            column: 97
          }
        }],
        line: 232
      },
      "25": {
        loc: {
          start: {
            line: 236,
            column: 40
          },
          end: {
            line: 236,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 40
          },
          end: {
            line: 236,
            column: 76
          }
        }, {
          start: {
            line: 236,
            column: 80
          },
          end: {
            line: 236,
            column: 100
          }
        }],
        line: 236
      },
      "26": {
        loc: {
          start: {
            line: 240,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 16
          },
          end: {
            line: 242,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "27": {
        loc: {
          start: {
            line: 240,
            column: 20
          },
          end: {
            line: 240,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 240,
            column: 20
          },
          end: {
            line: 240,
            column: 48
          }
        }, {
          start: {
            line: 240,
            column: 52
          },
          end: {
            line: 240,
            column: 79
          }
        }],
        line: 240
      },
      "28": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "29": {
        loc: {
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 267,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 12
          },
          end: {
            line: 267,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "30": {
        loc: {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 273,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 273,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "31": {
        loc: {
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 287,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "32": {
        loc: {
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "33": {
        loc: {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "34": {
        loc: {
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 12
          },
          end: {
            line: 311,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\repositories\\SupabaseWalletRepository.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\repositories\\SupabaseWalletRepository.ts"],
      sourcesContent: ["/**\n * Supabase Wallet Repository Implementation\n * \n * Implements WalletRepository interface using Supabase as the data store.\n * Handles mapping between domain entities and database records.\n */\n\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { WalletRepository } from '../../domain/repositories/WalletRepository'\nimport { Wallet, WalletSnapshot } from '../../domain/entities/Wallet'\nimport { WalletId, UserId } from '../../domain/value-objects/EntityId'\nimport { Currency } from '../../domain/value-objects/Currency'\nimport { Money } from '../../domain/value-objects/Money'\nimport { EntityNotFoundError, RepositoryError } from '../../domain/repositories'\n\ninterface DatabaseWallet {\n  id: string\n  user_id: string\n  currency: string\n  available_balance: number\n  reserved_balance: number\n  created_at: string\n  updated_at: string\n}\n\nexport class SupabaseWalletRepository implements WalletRepository {\n  constructor(private readonly supabase: SupabaseClient) {}\n\n  async findById(id: WalletId): Promise<Wallet | null> {\n    try {\n      const { data, error } = await this.supabase\n        .from('wallets')\n        .select('*')\n        .eq('id', id.value)\n        .single()\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null // Not found\n        }\n        throw new RepositoryError(\n          `Failed to find wallet by ID: ${error.message}`,\n          'findById',\n          'Wallet',\n          error\n        )\n      }\n\n      return this.mapToDomain(data)\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding wallet by ID`,\n        'findById',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async findByUserIdAndCurrency(userId: UserId, currency: Currency): Promise<Wallet | null> {\n    try {\n      const { data, error } = await this.supabase\n        .from('wallets')\n        .select('*')\n        .eq('user_id', userId.value)\n        .eq('currency', currency.code)\n        .single()\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null // Not found\n        }\n        throw new RepositoryError(\n          `Failed to find wallet by user and currency: ${error.message}`,\n          'findByUserIdAndCurrency',\n          'Wallet',\n          error\n        )\n      }\n\n      return this.mapToDomain(data)\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding wallet by user and currency`,\n        'findByUserIdAndCurrency',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async findByUserId(userId: UserId): Promise<Wallet[]> {\n    try {\n      const { data, error } = await this.supabase\n        .from('wallets')\n        .select('*')\n        .eq('user_id', userId.value)\n        .order('currency')\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to find wallets by user ID: ${error.message}`,\n          'findByUserId',\n          'Wallet',\n          error\n        )\n      }\n\n      return data.map(wallet => this.mapToDomain(wallet))\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding wallets by user ID`,\n        'findByUserId',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async save(wallet: Wallet): Promise<void> {\n    try {\n      const snapshot = wallet.toSnapshot()\n      const dbWallet = this.mapToDatabase(snapshot)\n\n      const { error } = await this.supabase\n        .from('wallets')\n        .upsert(dbWallet, {\n          onConflict: 'id'\n        })\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to save wallet: ${error.message}`,\n          'save',\n          'Wallet',\n          error\n        )\n      }\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error saving wallet`,\n        'save',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async saveMany(wallets: Wallet[]): Promise<void> {\n    try {\n      const dbWallets = wallets.map(wallet => this.mapToDatabase(wallet.toSnapshot()))\n\n      const { error } = await this.supabase\n        .from('wallets')\n        .upsert(dbWallets, {\n          onConflict: 'id'\n        })\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to save multiple wallets: ${error.message}`,\n          'saveMany',\n          'Wallet',\n          error\n        )\n      }\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error saving multiple wallets`,\n        'saveMany',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async delete(id: WalletId): Promise<void> {\n    try {\n      const { error } = await this.supabase\n        .from('wallets')\n        .delete()\n        .eq('id', id.value)\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to delete wallet: ${error.message}`,\n          'delete',\n          'Wallet',\n          error\n        )\n      }\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error deleting wallet`,\n        'delete',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async existsByUserIdAndCurrency(userId: UserId, currency: Currency): Promise<boolean> {\n    try {\n      const { data, error } = await this.supabase\n        .from('wallets')\n        .select('id')\n        .eq('user_id', userId.value)\n        .eq('currency', currency.code)\n        .single()\n\n      if (error && error.code !== 'PGRST116') {\n        throw new RepositoryError(\n          `Failed to check wallet existence: ${error.message}`,\n          'existsByUserIdAndCurrency',\n          'Wallet',\n          error\n        )\n      }\n\n      return data !== null\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error checking wallet existence`,\n        'existsByUserIdAndCurrency',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async getTotalBalanceByUserId(userId: UserId): Promise<Map<Currency, Money>> {\n    try {\n      const { data, error } = await this.supabase\n        .from('wallets')\n        .select('currency, available_balance, reserved_balance')\n        .eq('user_id', userId.value)\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to get total balance by user ID: ${error.message}`,\n          'getTotalBalanceByUserId',\n          'Wallet',\n          error\n        )\n      }\n\n      const balanceMap = new Map<Currency, Money>()\n      \n      for (const wallet of data) {\n        const currency = Currency.fromCode(wallet.currency)\n        const totalBalance = wallet.available_balance + wallet.reserved_balance\n        balanceMap.set(currency, Money.fromNumber(totalBalance, currency))\n      }\n\n      return balanceMap\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error getting total balance by user ID`,\n        'getTotalBalanceByUserId',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async findWithBalanceAbove(currency: Currency, threshold: Money): Promise<Wallet[]> {\n    try {\n      const { data, error } = await this.supabase\n        .from('wallets')\n        .select('*')\n        .eq('currency', currency.code)\n        .gt('available_balance', threshold.amount)\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to find wallets with balance above threshold: ${error.message}`,\n          'findWithBalanceAbove',\n          'Wallet',\n          error\n        )\n      }\n\n      return data.map(wallet => this.mapToDomain(wallet))\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding wallets with balance above threshold`,\n        'findWithBalanceAbove',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async findWithReservedBalance(currency: Currency): Promise<Wallet[]> {\n    try {\n      const { data, error } = await this.supabase\n        .from('wallets')\n        .select('*')\n        .eq('currency', currency.code)\n        .gt('reserved_balance', 0)\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to find wallets with reserved balance: ${error.message}`,\n          'findWithReservedBalance',\n          'Wallet',\n          error\n        )\n      }\n\n      return data.map(wallet => this.mapToDomain(wallet))\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding wallets with reserved balance`,\n        'findWithReservedBalance',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async getWalletStatistics(): Promise<{\n    totalWallets: number\n    totalBalanceByCurrency: Map<Currency, Money>\n    totalReservedByurrency: Map<Currency, Money>\n    activeWallets: number\n  }> {\n    try {\n      const { data, error } = await this.supabase\n        .from('wallets')\n        .select('currency, available_balance, reserved_balance')\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to get wallet statistics: ${error.message}`,\n          'getWalletStatistics',\n          'Wallet',\n          error\n        )\n      }\n\n      const totalBalanceByCurrency = new Map<Currency, Money>()\n      const totalReservedByurrency = new Map<Currency, Money>()\n      let activeWallets = 0\n\n      for (const wallet of data) {\n        const currency = Currency.fromCode(wallet.currency)\n        \n        // Aggregate total balances\n        const currentTotal = totalBalanceByCurrency.get(currency) || Money.zero(currency)\n        const newTotal = currentTotal.add(Money.fromNumber(wallet.available_balance, currency))\n        totalBalanceByCurrency.set(currency, newTotal)\n\n        // Aggregate reserved balances\n        const currentReserved = totalReservedByurrency.get(currency) || Money.zero(currency)\n        const newReserved = currentReserved.add(Money.fromNumber(wallet.reserved_balance, currency))\n        totalReservedByurrency.set(currency, newReserved)\n\n        // Count active wallets (with any balance)\n        if (wallet.available_balance > 0 || wallet.reserved_balance > 0) {\n          activeWallets++\n        }\n      }\n\n      return {\n        totalWallets: data.length,\n        totalBalanceByCurrency,\n        totalReservedByurrency,\n        activeWallets\n      }\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error getting wallet statistics`,\n        'getWalletStatistics',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async findUpdatedWithinRange(startDate: Date, endDate: Date): Promise<Wallet[]> {\n    try {\n      const { data, error } = await this.supabase\n        .from('wallets')\n        .select('*')\n        .gte('updated_at', startDate.toISOString())\n        .lte('updated_at', endDate.toISOString())\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to find wallets updated within range: ${error.message}`,\n          'findUpdatedWithinRange',\n          'Wallet',\n          error\n        )\n      }\n\n      return data.map(wallet => this.mapToDomain(wallet))\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding wallets updated within range`,\n        'findUpdatedWithinRange',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async updateBalance(\n    walletId: WalletId,\n    availableBalanceChange: Money,\n    reservedBalanceChange: Money\n  ): Promise<void> {\n    try {\n      // This would ideally use a stored procedure for atomic updates\n      const { error } = await this.supabase.rpc('update_wallet_balance', {\n        wallet_id: walletId.value,\n        available_change: availableBalanceChange.amount,\n        reserved_change: reservedBalanceChange.amount\n      })\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to update wallet balance: ${error.message}`,\n          'updateBalance',\n          'Wallet',\n          error\n        )\n      }\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error updating wallet balance`,\n        'updateBalance',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  async transferFunds(\n    fromWalletId: WalletId,\n    toWalletId: WalletId,\n    amount: Money\n  ): Promise<void> {\n    try {\n      // This would use a stored procedure for atomic transfer\n      const { error } = await this.supabase.rpc('transfer_wallet_funds', {\n        from_wallet_id: fromWalletId.value,\n        to_wallet_id: toWalletId.value,\n        transfer_amount: amount.amount\n      })\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to transfer funds: ${error.message}`,\n          'transferFunds',\n          'Wallet',\n          error\n        )\n      }\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error transferring funds`,\n        'transferFunds',\n        'Wallet',\n        error as Error\n      )\n    }\n  }\n\n  /**\n   * Map database record to domain entity\n   */\n  private mapToDomain(dbWallet: DatabaseWallet): Wallet {\n    const currency = Currency.fromCode(dbWallet.currency)\n    const availableBalance = Money.fromNumber(dbWallet.available_balance, currency)\n    const reservedBalance = Money.fromNumber(dbWallet.reserved_balance, currency)\n\n    const snapshot: WalletSnapshot = {\n      id: WalletId.fromString(dbWallet.id),\n      userId: UserId.fromString(dbWallet.user_id),\n      currency,\n      availableBalance,\n      reservedBalance,\n      createdAt: new Date(dbWallet.created_at),\n      updatedAt: new Date(dbWallet.updated_at)\n    }\n\n    return Wallet.fromSnapshot(snapshot)\n  }\n\n  /**\n   * Map domain entity to database record\n   */\n  private mapToDatabase(snapshot: WalletSnapshot): Partial<DatabaseWallet> {\n    return {\n      id: snapshot.id.value,\n      user_id: snapshot.userId.value,\n      currency: snapshot.currency.code,\n      available_balance: snapshot.availableBalance.amount,\n      reserved_balance: snapshot.reservedBalance.amount,\n      created_at: snapshot.createdAt.toISOString(),\n      updated_at: snapshot.updatedAt.toISOString()\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a799297fdaa64e80a81ebd760f9195dc5f78a212"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1rcfntemj3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1rcfntemj3();
/**
 * Supabase Wallet Repository Implementation
 *
 * Implements WalletRepository interface using Supabase as the data store.
 * Handles mapping between domain entities and database records.
 */
import { Wallet } from '../../domain/entities/Wallet';
import { WalletId, UserId } from '../../domain/value-objects/EntityId';
import { Currency } from '../../domain/value-objects/Currency';
import { Money } from '../../domain/value-objects/Money';
import { RepositoryError } from '../../domain/repositories';
export class SupabaseWalletRepository {
  constructor(supabase) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[0]++;
    cov_1rcfntemj3().s[0]++;
    this.supabase = supabase;
  }
  async findById(id) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[1]++;
    cov_1rcfntemj3().s[1]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[2]++, await this.supabase.from('wallets').select('*').eq('id', id.value).single());
      /* istanbul ignore next */
      cov_1rcfntemj3().s[3]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[0][0]++;
        cov_1rcfntemj3().s[4]++;
        if (error.code === 'PGRST116') {
          /* istanbul ignore next */
          cov_1rcfntemj3().b[1][0]++;
          cov_1rcfntemj3().s[5]++;
          return null; // Not found
        } else
        /* istanbul ignore next */
        {
          cov_1rcfntemj3().b[1][1]++;
        }
        cov_1rcfntemj3().s[6]++;
        throw new RepositoryError(`Failed to find wallet by ID: ${error.message}`, 'findById', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[0][1]++;
      }
      cov_1rcfntemj3().s[7]++;
      return this.mapToDomain(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[8]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[2][0]++;
        cov_1rcfntemj3().s[9]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[2][1]++;
      }
      cov_1rcfntemj3().s[10]++;
      throw new RepositoryError(`Unexpected error finding wallet by ID`, 'findById', 'Wallet', error);
    }
  }
  async findByUserIdAndCurrency(userId, currency) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[2]++;
    cov_1rcfntemj3().s[11]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[12]++, await this.supabase.from('wallets').select('*').eq('user_id', userId.value).eq('currency', currency.code).single());
      /* istanbul ignore next */
      cov_1rcfntemj3().s[13]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[3][0]++;
        cov_1rcfntemj3().s[14]++;
        if (error.code === 'PGRST116') {
          /* istanbul ignore next */
          cov_1rcfntemj3().b[4][0]++;
          cov_1rcfntemj3().s[15]++;
          return null; // Not found
        } else
        /* istanbul ignore next */
        {
          cov_1rcfntemj3().b[4][1]++;
        }
        cov_1rcfntemj3().s[16]++;
        throw new RepositoryError(`Failed to find wallet by user and currency: ${error.message}`, 'findByUserIdAndCurrency', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[3][1]++;
      }
      cov_1rcfntemj3().s[17]++;
      return this.mapToDomain(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[18]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[5][0]++;
        cov_1rcfntemj3().s[19]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[5][1]++;
      }
      cov_1rcfntemj3().s[20]++;
      throw new RepositoryError(`Unexpected error finding wallet by user and currency`, 'findByUserIdAndCurrency', 'Wallet', error);
    }
  }
  async findByUserId(userId) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[3]++;
    cov_1rcfntemj3().s[21]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[22]++, await this.supabase.from('wallets').select('*').eq('user_id', userId.value).order('currency'));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[23]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[6][0]++;
        cov_1rcfntemj3().s[24]++;
        throw new RepositoryError(`Failed to find wallets by user ID: ${error.message}`, 'findByUserId', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[6][1]++;
      }
      cov_1rcfntemj3().s[25]++;
      return data.map(wallet => {
        /* istanbul ignore next */
        cov_1rcfntemj3().f[4]++;
        cov_1rcfntemj3().s[26]++;
        return this.mapToDomain(wallet);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[27]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[7][0]++;
        cov_1rcfntemj3().s[28]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[7][1]++;
      }
      cov_1rcfntemj3().s[29]++;
      throw new RepositoryError(`Unexpected error finding wallets by user ID`, 'findByUserId', 'Wallet', error);
    }
  }
  async save(wallet) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[5]++;
    cov_1rcfntemj3().s[30]++;
    try {
      const snapshot =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[31]++, wallet.toSnapshot());
      const dbWallet =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[32]++, this.mapToDatabase(snapshot));
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[33]++, await this.supabase.from('wallets').upsert(dbWallet, {
        onConflict: 'id'
      }));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[34]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[8][0]++;
        cov_1rcfntemj3().s[35]++;
        throw new RepositoryError(`Failed to save wallet: ${error.message}`, 'save', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[8][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[36]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[9][0]++;
        cov_1rcfntemj3().s[37]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[9][1]++;
      }
      cov_1rcfntemj3().s[38]++;
      throw new RepositoryError(`Unexpected error saving wallet`, 'save', 'Wallet', error);
    }
  }
  async saveMany(wallets) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[6]++;
    cov_1rcfntemj3().s[39]++;
    try {
      const dbWallets =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[40]++, wallets.map(wallet => {
        /* istanbul ignore next */
        cov_1rcfntemj3().f[7]++;
        cov_1rcfntemj3().s[41]++;
        return this.mapToDatabase(wallet.toSnapshot());
      }));
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[42]++, await this.supabase.from('wallets').upsert(dbWallets, {
        onConflict: 'id'
      }));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[43]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[10][0]++;
        cov_1rcfntemj3().s[44]++;
        throw new RepositoryError(`Failed to save multiple wallets: ${error.message}`, 'saveMany', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[10][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[45]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[11][0]++;
        cov_1rcfntemj3().s[46]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[11][1]++;
      }
      cov_1rcfntemj3().s[47]++;
      throw new RepositoryError(`Unexpected error saving multiple wallets`, 'saveMany', 'Wallet', error);
    }
  }
  async delete(id) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[8]++;
    cov_1rcfntemj3().s[48]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[49]++, await this.supabase.from('wallets').delete().eq('id', id.value));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[50]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[12][0]++;
        cov_1rcfntemj3().s[51]++;
        throw new RepositoryError(`Failed to delete wallet: ${error.message}`, 'delete', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[12][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[52]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[13][0]++;
        cov_1rcfntemj3().s[53]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[13][1]++;
      }
      cov_1rcfntemj3().s[54]++;
      throw new RepositoryError(`Unexpected error deleting wallet`, 'delete', 'Wallet', error);
    }
  }
  async existsByUserIdAndCurrency(userId, currency) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[9]++;
    cov_1rcfntemj3().s[55]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[56]++, await this.supabase.from('wallets').select('id').eq('user_id', userId.value).eq('currency', currency.code).single());
      /* istanbul ignore next */
      cov_1rcfntemj3().s[57]++;
      if (
      /* istanbul ignore next */
      (cov_1rcfntemj3().b[15][0]++, error) &&
      /* istanbul ignore next */
      (cov_1rcfntemj3().b[15][1]++, error.code !== 'PGRST116')) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[14][0]++;
        cov_1rcfntemj3().s[58]++;
        throw new RepositoryError(`Failed to check wallet existence: ${error.message}`, 'existsByUserIdAndCurrency', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[14][1]++;
      }
      cov_1rcfntemj3().s[59]++;
      return data !== null;
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[60]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[16][0]++;
        cov_1rcfntemj3().s[61]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[16][1]++;
      }
      cov_1rcfntemj3().s[62]++;
      throw new RepositoryError(`Unexpected error checking wallet existence`, 'existsByUserIdAndCurrency', 'Wallet', error);
    }
  }
  async getTotalBalanceByUserId(userId) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[10]++;
    cov_1rcfntemj3().s[63]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[64]++, await this.supabase.from('wallets').select('currency, available_balance, reserved_balance').eq('user_id', userId.value));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[65]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[17][0]++;
        cov_1rcfntemj3().s[66]++;
        throw new RepositoryError(`Failed to get total balance by user ID: ${error.message}`, 'getTotalBalanceByUserId', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[17][1]++;
      }
      const balanceMap =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[67]++, new Map());
      /* istanbul ignore next */
      cov_1rcfntemj3().s[68]++;
      for (const wallet of data) {
        const currency =
        /* istanbul ignore next */
        (cov_1rcfntemj3().s[69]++, Currency.fromCode(wallet.currency));
        const totalBalance =
        /* istanbul ignore next */
        (cov_1rcfntemj3().s[70]++, wallet.available_balance + wallet.reserved_balance);
        /* istanbul ignore next */
        cov_1rcfntemj3().s[71]++;
        balanceMap.set(currency, Money.fromNumber(totalBalance, currency));
      }
      /* istanbul ignore next */
      cov_1rcfntemj3().s[72]++;
      return balanceMap;
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[73]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[18][0]++;
        cov_1rcfntemj3().s[74]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[18][1]++;
      }
      cov_1rcfntemj3().s[75]++;
      throw new RepositoryError(`Unexpected error getting total balance by user ID`, 'getTotalBalanceByUserId', 'Wallet', error);
    }
  }
  async findWithBalanceAbove(currency, threshold) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[11]++;
    cov_1rcfntemj3().s[76]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[77]++, await this.supabase.from('wallets').select('*').eq('currency', currency.code).gt('available_balance', threshold.amount));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[78]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[19][0]++;
        cov_1rcfntemj3().s[79]++;
        throw new RepositoryError(`Failed to find wallets with balance above threshold: ${error.message}`, 'findWithBalanceAbove', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[19][1]++;
      }
      cov_1rcfntemj3().s[80]++;
      return data.map(wallet => {
        /* istanbul ignore next */
        cov_1rcfntemj3().f[12]++;
        cov_1rcfntemj3().s[81]++;
        return this.mapToDomain(wallet);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[82]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[20][0]++;
        cov_1rcfntemj3().s[83]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[20][1]++;
      }
      cov_1rcfntemj3().s[84]++;
      throw new RepositoryError(`Unexpected error finding wallets with balance above threshold`, 'findWithBalanceAbove', 'Wallet', error);
    }
  }
  async findWithReservedBalance(currency) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[13]++;
    cov_1rcfntemj3().s[85]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[86]++, await this.supabase.from('wallets').select('*').eq('currency', currency.code).gt('reserved_balance', 0));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[87]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[21][0]++;
        cov_1rcfntemj3().s[88]++;
        throw new RepositoryError(`Failed to find wallets with reserved balance: ${error.message}`, 'findWithReservedBalance', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[21][1]++;
      }
      cov_1rcfntemj3().s[89]++;
      return data.map(wallet => {
        /* istanbul ignore next */
        cov_1rcfntemj3().f[14]++;
        cov_1rcfntemj3().s[90]++;
        return this.mapToDomain(wallet);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[91]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[22][0]++;
        cov_1rcfntemj3().s[92]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[22][1]++;
      }
      cov_1rcfntemj3().s[93]++;
      throw new RepositoryError(`Unexpected error finding wallets with reserved balance`, 'findWithReservedBalance', 'Wallet', error);
    }
  }
  async getWalletStatistics() {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[15]++;
    cov_1rcfntemj3().s[94]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[95]++, await this.supabase.from('wallets').select('currency, available_balance, reserved_balance'));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[96]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[23][0]++;
        cov_1rcfntemj3().s[97]++;
        throw new RepositoryError(`Failed to get wallet statistics: ${error.message}`, 'getWalletStatistics', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[23][1]++;
      }
      const totalBalanceByCurrency =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[98]++, new Map());
      const totalReservedByurrency =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[99]++, new Map());
      let activeWallets =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[100]++, 0);
      /* istanbul ignore next */
      cov_1rcfntemj3().s[101]++;
      for (const wallet of data) {
        const currency =
        /* istanbul ignore next */
        (cov_1rcfntemj3().s[102]++, Currency.fromCode(wallet.currency));
        // Aggregate total balances
        const currentTotal =
        /* istanbul ignore next */
        (cov_1rcfntemj3().s[103]++,
        /* istanbul ignore next */
        (cov_1rcfntemj3().b[24][0]++, totalBalanceByCurrency.get(currency)) ||
        /* istanbul ignore next */
        (cov_1rcfntemj3().b[24][1]++, Money.zero(currency)));
        const newTotal =
        /* istanbul ignore next */
        (cov_1rcfntemj3().s[104]++, currentTotal.add(Money.fromNumber(wallet.available_balance, currency)));
        /* istanbul ignore next */
        cov_1rcfntemj3().s[105]++;
        totalBalanceByCurrency.set(currency, newTotal);
        // Aggregate reserved balances
        const currentReserved =
        /* istanbul ignore next */
        (cov_1rcfntemj3().s[106]++,
        /* istanbul ignore next */
        (cov_1rcfntemj3().b[25][0]++, totalReservedByurrency.get(currency)) ||
        /* istanbul ignore next */
        (cov_1rcfntemj3().b[25][1]++, Money.zero(currency)));
        const newReserved =
        /* istanbul ignore next */
        (cov_1rcfntemj3().s[107]++, currentReserved.add(Money.fromNumber(wallet.reserved_balance, currency)));
        /* istanbul ignore next */
        cov_1rcfntemj3().s[108]++;
        totalReservedByurrency.set(currency, newReserved);
        // Count active wallets (with any balance)
        /* istanbul ignore next */
        cov_1rcfntemj3().s[109]++;
        if (
        /* istanbul ignore next */
        (cov_1rcfntemj3().b[27][0]++, wallet.available_balance > 0) ||
        /* istanbul ignore next */
        (cov_1rcfntemj3().b[27][1]++, wallet.reserved_balance > 0)) {
          /* istanbul ignore next */
          cov_1rcfntemj3().b[26][0]++;
          cov_1rcfntemj3().s[110]++;
          activeWallets++;
        } else
        /* istanbul ignore next */
        {
          cov_1rcfntemj3().b[26][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1rcfntemj3().s[111]++;
      return {
        totalWallets: data.length,
        totalBalanceByCurrency,
        totalReservedByurrency,
        activeWallets
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[112]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[28][0]++;
        cov_1rcfntemj3().s[113]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[28][1]++;
      }
      cov_1rcfntemj3().s[114]++;
      throw new RepositoryError(`Unexpected error getting wallet statistics`, 'getWalletStatistics', 'Wallet', error);
    }
  }
  async findUpdatedWithinRange(startDate, endDate) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[16]++;
    cov_1rcfntemj3().s[115]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[116]++, await this.supabase.from('wallets').select('*').gte('updated_at', startDate.toISOString()).lte('updated_at', endDate.toISOString()));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[117]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[29][0]++;
        cov_1rcfntemj3().s[118]++;
        throw new RepositoryError(`Failed to find wallets updated within range: ${error.message}`, 'findUpdatedWithinRange', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[29][1]++;
      }
      cov_1rcfntemj3().s[119]++;
      return data.map(wallet => {
        /* istanbul ignore next */
        cov_1rcfntemj3().f[17]++;
        cov_1rcfntemj3().s[120]++;
        return this.mapToDomain(wallet);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[121]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[30][0]++;
        cov_1rcfntemj3().s[122]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[30][1]++;
      }
      cov_1rcfntemj3().s[123]++;
      throw new RepositoryError(`Unexpected error finding wallets updated within range`, 'findUpdatedWithinRange', 'Wallet', error);
    }
  }
  async updateBalance(walletId, availableBalanceChange, reservedBalanceChange) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[18]++;
    cov_1rcfntemj3().s[124]++;
    try {
      // This would ideally use a stored procedure for atomic updates
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[125]++, await this.supabase.rpc('update_wallet_balance', {
        wallet_id: walletId.value,
        available_change: availableBalanceChange.amount,
        reserved_change: reservedBalanceChange.amount
      }));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[126]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[31][0]++;
        cov_1rcfntemj3().s[127]++;
        throw new RepositoryError(`Failed to update wallet balance: ${error.message}`, 'updateBalance', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[31][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[128]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[32][0]++;
        cov_1rcfntemj3().s[129]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[32][1]++;
      }
      cov_1rcfntemj3().s[130]++;
      throw new RepositoryError(`Unexpected error updating wallet balance`, 'updateBalance', 'Wallet', error);
    }
  }
  async transferFunds(fromWalletId, toWalletId, amount) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[19]++;
    cov_1rcfntemj3().s[131]++;
    try {
      // This would use a stored procedure for atomic transfer
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1rcfntemj3().s[132]++, await this.supabase.rpc('transfer_wallet_funds', {
        from_wallet_id: fromWalletId.value,
        to_wallet_id: toWalletId.value,
        transfer_amount: amount.amount
      }));
      /* istanbul ignore next */
      cov_1rcfntemj3().s[133]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[33][0]++;
        cov_1rcfntemj3().s[134]++;
        throw new RepositoryError(`Failed to transfer funds: ${error.message}`, 'transferFunds', 'Wallet', error);
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[33][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1rcfntemj3().s[135]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1rcfntemj3().b[34][0]++;
        cov_1rcfntemj3().s[136]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1rcfntemj3().b[34][1]++;
      }
      cov_1rcfntemj3().s[137]++;
      throw new RepositoryError(`Unexpected error transferring funds`, 'transferFunds', 'Wallet', error);
    }
  }
  /**
   * Map database record to domain entity
   */
  mapToDomain(dbWallet) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[20]++;
    const currency =
    /* istanbul ignore next */
    (cov_1rcfntemj3().s[138]++, Currency.fromCode(dbWallet.currency));
    const availableBalance =
    /* istanbul ignore next */
    (cov_1rcfntemj3().s[139]++, Money.fromNumber(dbWallet.available_balance, currency));
    const reservedBalance =
    /* istanbul ignore next */
    (cov_1rcfntemj3().s[140]++, Money.fromNumber(dbWallet.reserved_balance, currency));
    const snapshot =
    /* istanbul ignore next */
    (cov_1rcfntemj3().s[141]++, {
      id: WalletId.fromString(dbWallet.id),
      userId: UserId.fromString(dbWallet.user_id),
      currency,
      availableBalance,
      reservedBalance,
      createdAt: new Date(dbWallet.created_at),
      updatedAt: new Date(dbWallet.updated_at)
    });
    /* istanbul ignore next */
    cov_1rcfntemj3().s[142]++;
    return Wallet.fromSnapshot(snapshot);
  }
  /**
   * Map domain entity to database record
   */
  mapToDatabase(snapshot) {
    /* istanbul ignore next */
    cov_1rcfntemj3().f[21]++;
    cov_1rcfntemj3().s[143]++;
    return {
      id: snapshot.id.value,
      user_id: snapshot.userId.value,
      currency: snapshot.currency.code,
      available_balance: snapshot.availableBalance.amount,
      reserved_balance: snapshot.reservedBalance.amount,
      created_at: snapshot.createdAt.toISOString(),
      updated_at: snapshot.updatedAt.toISOString()
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,