8cdff8e7080536610693fd79616837da
/* istanbul ignore next */
function cov_13c7p4nkgx() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\index.ts";
  var hash = "b9ddba7372cb994b873f01be25dbbeb32868101a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\index.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 23
        }
      },
      "1": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 35
        }
      },
      "2": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 29
        }
      },
      "3": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 38
        }
      },
      "5": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 74
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 42
        }
      },
      "7": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 89
        }
      },
      "8": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 39
        }
      },
      "9": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 90
        }
      },
      "10": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 47
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 51
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 43
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 34
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {},
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\index.ts",
      mappings: "AAAA;;;;GAIG;AAEH,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAA;AACjD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAA;AACrD,OAAO,EAAE,qBAAqB,EAAkC,MAAM,yBAAyB,CAAA;AAyD/F;;GAEG;AACH,MAAM,OAAO,eAAgB,SAAQ,KAAK;IACxC,YACE,OAAe,EACC,SAAiB,EACjB,MAAc,EACd,KAAa;QAE7B,KAAK,CAAC,OAAO,CAAC,CAAA;QAJE,cAAS,GAAT,SAAS,CAAQ;QACjB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAQ;QAG7B,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAA;IAC/B,CAAC;CACF;AAED,MAAM,OAAO,mBAAoB,SAAQ,eAAe;IACtD,YAAY,MAAc,EAAE,EAAU,EAAE,KAAa;QACnD,KAAK,CAAC,GAAG,MAAM,YAAY,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;QACjE,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAA;IACnC,CAAC;CACF;AAED,MAAM,OAAO,gBAAiB,SAAQ,eAAe;IACnD,YAAY,MAAc,EAAE,EAAU,EAAE,KAAa;QACnD,KAAK,CAAC,4BAA4B,MAAM,YAAY,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;QAChF,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAA;IAChC,CAAC;CACF;AAED,MAAM,OAAO,wBAAyB,SAAQ,eAAe;IAC3D,YAAY,MAAc,EAAE,UAAkB,EAAE,KAAa;QAC3D,KAAK,CAAC,4BAA4B,MAAM,KAAK,UAAU,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAA;QACjF,IAAI,CAAC,IAAI,GAAG,0BAA0B,CAAA;IACxC,CAAC;CACF",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\index.ts"],
      sourcesContent: ["/**\n * Repository Interfaces Export\n * \n * Central export point for all repository interfaces.\n */\n\nexport { UserRepository } from './UserRepository'\nexport { WalletRepository } from './WalletRepository'\nexport { TransactionRepository, type TransactionSearchCriteria } from './TransactionRepository'\n\n/**\n * Unit of Work interface for managing transactions across repositories\n */\nexport interface UnitOfWork {\n  /**\n   * Begin a database transaction\n   */\n  begin(): Promise<void>\n\n  /**\n   * Commit the current transaction\n   */\n  commit(): Promise<void>\n\n  /**\n   * Rollback the current transaction\n   */\n  rollback(): Promise<void>\n\n  /**\n   * Execute a function within a transaction\n   */\n  execute<T>(operation: () => Promise<T>): Promise<T>\n\n  /**\n   * Check if currently in a transaction\n   */\n  isInTransaction(): boolean\n}\n\n/**\n * Repository factory interface for dependency injection\n */\nexport interface RepositoryFactory {\n  /**\n   * Create user repository\n   */\n  createUserRepository(): UserRepository\n\n  /**\n   * Create wallet repository\n   */\n  createWalletRepository(): WalletRepository\n\n  /**\n   * Create transaction repository\n   */\n  createTransactionRepository(): TransactionRepository\n\n  /**\n   * Create unit of work\n   */\n  createUnitOfWork(): UnitOfWork\n}\n\n/**\n * Repository error types\n */\nexport class RepositoryError extends Error {\n  constructor(\n    message: string,\n    public readonly operation: string,\n    public readonly entity: string,\n    public readonly cause?: Error\n  ) {\n    super(message)\n    this.name = 'RepositoryError'\n  }\n}\n\nexport class EntityNotFoundError extends RepositoryError {\n  constructor(entity: string, id: string, cause?: Error) {\n    super(`${entity} with ID ${id} not found`, 'find', entity, cause)\n    this.name = 'EntityNotFoundError'\n  }\n}\n\nexport class ConcurrencyError extends RepositoryError {\n  constructor(entity: string, id: string, cause?: Error) {\n    super(`Concurrency conflict for ${entity} with ID ${id}`, 'save', entity, cause)\n    this.name = 'ConcurrencyError'\n  }\n}\n\nexport class ConstraintViolationError extends RepositoryError {\n  constructor(entity: string, constraint: string, cause?: Error) {\n    super(`Constraint violation for ${entity}: ${constraint}`, 'save', entity, cause)\n    this.name = 'ConstraintViolationError'\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b9ddba7372cb994b873f01be25dbbeb32868101a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_13c7p4nkgx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_13c7p4nkgx();
/**
 * Repository Interfaces Export
 *
 * Central export point for all repository interfaces.
 */
export { UserRepository } from './UserRepository';
export { WalletRepository } from './WalletRepository';
export { TransactionRepository } from './TransactionRepository';
/**
 * Repository error types
 */
export class RepositoryError extends Error {
  constructor(message, operation, entity, cause) {
    /* istanbul ignore next */
    cov_13c7p4nkgx().f[0]++;
    cov_13c7p4nkgx().s[0]++;
    super(message);
    /* istanbul ignore next */
    cov_13c7p4nkgx().s[1]++;
    this.operation = operation;
    /* istanbul ignore next */
    cov_13c7p4nkgx().s[2]++;
    this.entity = entity;
    /* istanbul ignore next */
    cov_13c7p4nkgx().s[3]++;
    this.cause = cause;
    /* istanbul ignore next */
    cov_13c7p4nkgx().s[4]++;
    this.name = 'RepositoryError';
  }
}
export class EntityNotFoundError extends RepositoryError {
  constructor(entity, id, cause) {
    /* istanbul ignore next */
    cov_13c7p4nkgx().f[1]++;
    cov_13c7p4nkgx().s[5]++;
    super(`${entity} with ID ${id} not found`, 'find', entity, cause);
    /* istanbul ignore next */
    cov_13c7p4nkgx().s[6]++;
    this.name = 'EntityNotFoundError';
  }
}
export class ConcurrencyError extends RepositoryError {
  constructor(entity, id, cause) {
    /* istanbul ignore next */
    cov_13c7p4nkgx().f[2]++;
    cov_13c7p4nkgx().s[7]++;
    super(`Concurrency conflict for ${entity} with ID ${id}`, 'save', entity, cause);
    /* istanbul ignore next */
    cov_13c7p4nkgx().s[8]++;
    this.name = 'ConcurrencyError';
  }
}
export class ConstraintViolationError extends RepositoryError {
  constructor(entity, constraint, cause) {
    /* istanbul ignore next */
    cov_13c7p4nkgx().f[3]++;
    cov_13c7p4nkgx().s[9]++;
    super(`Constraint violation for ${entity}: ${constraint}`, 'save', entity, cause);
    /* istanbul ignore next */
    cov_13c7p4nkgx().s[10]++;
    this.name = 'ConstraintViolationError';
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMTNjN3A0bmtneCIsImFjdHVhbENvdmVyYWdlIiwiVXNlclJlcG9zaXRvcnkiLCJXYWxsZXRSZXBvc2l0b3J5IiwiVHJhbnNhY3Rpb25SZXBvc2l0b3J5IiwiUmVwb3NpdG9yeUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJvcGVyYXRpb24iLCJlbnRpdHkiLCJjYXVzZSIsImYiLCJzIiwibmFtZSIsIkVudGl0eU5vdEZvdW5kRXJyb3IiLCJpZCIsIkNvbmN1cnJlbmN5RXJyb3IiLCJDb25zdHJhaW50VmlvbGF0aW9uRXJyb3IiLCJjb25zdHJhaW50Il0sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVc2VyXFxEb2N1bWVudHNcXEdpdEh1YlxcZW1hXFxzcmNcXGRvbWFpblxccmVwb3NpdG9yaWVzXFxpbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlcG9zaXRvcnkgSW50ZXJmYWNlcyBFeHBvcnRcbiAqIFxuICogQ2VudHJhbCBleHBvcnQgcG9pbnQgZm9yIGFsbCByZXBvc2l0b3J5IGludGVyZmFjZXMuXG4gKi9cblxuZXhwb3J0IHsgVXNlclJlcG9zaXRvcnkgfSBmcm9tICcuL1VzZXJSZXBvc2l0b3J5J1xuZXhwb3J0IHsgV2FsbGV0UmVwb3NpdG9yeSB9IGZyb20gJy4vV2FsbGV0UmVwb3NpdG9yeSdcbmV4cG9ydCB7IFRyYW5zYWN0aW9uUmVwb3NpdG9yeSwgdHlwZSBUcmFuc2FjdGlvblNlYXJjaENyaXRlcmlhIH0gZnJvbSAnLi9UcmFuc2FjdGlvblJlcG9zaXRvcnknXG5cbi8qKlxuICogVW5pdCBvZiBXb3JrIGludGVyZmFjZSBmb3IgbWFuYWdpbmcgdHJhbnNhY3Rpb25zIGFjcm9zcyByZXBvc2l0b3JpZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVbml0T2ZXb3JrIHtcbiAgLyoqXG4gICAqIEJlZ2luIGEgZGF0YWJhc2UgdHJhbnNhY3Rpb25cbiAgICovXG4gIGJlZ2luKCk6IFByb21pc2U8dm9pZD5cblxuICAvKipcbiAgICogQ29tbWl0IHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uXG4gICAqL1xuICBjb21taXQoKTogUHJvbWlzZTx2b2lkPlxuXG4gIC8qKlxuICAgKiBSb2xsYmFjayB0aGUgY3VycmVudCB0cmFuc2FjdGlvblxuICAgKi9cbiAgcm9sbGJhY2soKTogUHJvbWlzZTx2b2lkPlxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIGEgZnVuY3Rpb24gd2l0aGluIGEgdHJhbnNhY3Rpb25cbiAgICovXG4gIGV4ZWN1dGU8VD4ob3BlcmF0aW9uOiAoKSA9PiBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPlxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBjdXJyZW50bHkgaW4gYSB0cmFuc2FjdGlvblxuICAgKi9cbiAgaXNJblRyYW5zYWN0aW9uKCk6IGJvb2xlYW5cbn1cblxuLyoqXG4gKiBSZXBvc2l0b3J5IGZhY3RvcnkgaW50ZXJmYWNlIGZvciBkZXBlbmRlbmN5IGluamVjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9zaXRvcnlGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENyZWF0ZSB1c2VyIHJlcG9zaXRvcnlcbiAgICovXG4gIGNyZWF0ZVVzZXJSZXBvc2l0b3J5KCk6IFVzZXJSZXBvc2l0b3J5XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB3YWxsZXQgcmVwb3NpdG9yeVxuICAgKi9cbiAgY3JlYXRlV2FsbGV0UmVwb3NpdG9yeSgpOiBXYWxsZXRSZXBvc2l0b3J5XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0cmFuc2FjdGlvbiByZXBvc2l0b3J5XG4gICAqL1xuICBjcmVhdGVUcmFuc2FjdGlvblJlcG9zaXRvcnkoKTogVHJhbnNhY3Rpb25SZXBvc2l0b3J5XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB1bml0IG9mIHdvcmtcbiAgICovXG4gIGNyZWF0ZVVuaXRPZldvcmsoKTogVW5pdE9mV29ya1xufVxuXG4vKipcbiAqIFJlcG9zaXRvcnkgZXJyb3IgdHlwZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFJlcG9zaXRvcnlFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSBvcGVyYXRpb246IHN0cmluZyxcbiAgICBwdWJsaWMgcmVhZG9ubHkgZW50aXR5OiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IGNhdXNlPzogRXJyb3JcbiAgKSB7XG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSAnUmVwb3NpdG9yeUVycm9yJ1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlOb3RGb3VuZEVycm9yIGV4dGVuZHMgUmVwb3NpdG9yeUVycm9yIHtcbiAgY29uc3RydWN0b3IoZW50aXR5OiBzdHJpbmcsIGlkOiBzdHJpbmcsIGNhdXNlPzogRXJyb3IpIHtcbiAgICBzdXBlcihgJHtlbnRpdHl9IHdpdGggSUQgJHtpZH0gbm90IGZvdW5kYCwgJ2ZpbmQnLCBlbnRpdHksIGNhdXNlKVxuICAgIHRoaXMubmFtZSA9ICdFbnRpdHlOb3RGb3VuZEVycm9yJ1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25jdXJyZW5jeUVycm9yIGV4dGVuZHMgUmVwb3NpdG9yeUVycm9yIHtcbiAgY29uc3RydWN0b3IoZW50aXR5OiBzdHJpbmcsIGlkOiBzdHJpbmcsIGNhdXNlPzogRXJyb3IpIHtcbiAgICBzdXBlcihgQ29uY3VycmVuY3kgY29uZmxpY3QgZm9yICR7ZW50aXR5fSB3aXRoIElEICR7aWR9YCwgJ3NhdmUnLCBlbnRpdHksIGNhdXNlKVxuICAgIHRoaXMubmFtZSA9ICdDb25jdXJyZW5jeUVycm9yJ1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zdHJhaW50VmlvbGF0aW9uRXJyb3IgZXh0ZW5kcyBSZXBvc2l0b3J5RXJyb3Ige1xuICBjb25zdHJ1Y3RvcihlbnRpdHk6IHN0cmluZywgY29uc3RyYWludDogc3RyaW5nLCBjYXVzZT86IEVycm9yKSB7XG4gICAgc3VwZXIoYENvbnN0cmFpbnQgdmlvbGF0aW9uIGZvciAke2VudGl0eX06ICR7Y29uc3RyYWludH1gLCAnc2F2ZScsIGVudGl0eSwgY2F1c2UpXG4gICAgdGhpcy5uYW1lID0gJ0NvbnN0cmFpbnRWaW9sYXRpb25FcnJvcidcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBd0VvQjtJQUFBQSxjQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxjQUFBO0FBeEVwQjs7Ozs7QUFNQSxTQUFTRSxjQUFjLFFBQVEsa0JBQWtCO0FBQ2pELFNBQVNDLGdCQUFnQixRQUFRLG9CQUFvQjtBQUNyRCxTQUFTQyxxQkFBcUIsUUFBd0MseUJBQXlCO0FBeUQvRjs7O0FBR0EsT0FBTSxNQUFPQyxlQUFnQixTQUFRQyxLQUFLO0VBQ3hDQyxZQUNFQyxPQUFlLEVBQ0NDLFNBQWlCLEVBQ2pCQyxNQUFjLEVBQ2RDLEtBQWE7SUFBQTtJQUFBWCxjQUFBLEdBQUFZLENBQUE7SUFBQVosY0FBQSxHQUFBYSxDQUFBO0lBRTdCLEtBQUssQ0FBQ0wsT0FBTyxDQUFDO0lBQUE7SUFBQVIsY0FBQSxHQUFBYSxDQUFBO0lBSkUsS0FBQUosU0FBUyxHQUFUQSxTQUFTO0lBQVE7SUFBQVQsY0FBQSxHQUFBYSxDQUFBO0lBQ2pCLEtBQUFILE1BQU0sR0FBTkEsTUFBTTtJQUFRO0lBQUFWLGNBQUEsR0FBQWEsQ0FBQTtJQUNkLEtBQUFGLEtBQUssR0FBTEEsS0FBSztJQUFRO0lBQUFYLGNBQUEsR0FBQWEsQ0FBQTtJQUc3QixJQUFJLENBQUNDLElBQUksR0FBRyxpQkFBaUI7RUFDL0I7O0FBR0YsT0FBTSxNQUFPQyxtQkFBb0IsU0FBUVYsZUFBZTtFQUN0REUsWUFBWUcsTUFBYyxFQUFFTSxFQUFVLEVBQUVMLEtBQWE7SUFBQTtJQUFBWCxjQUFBLEdBQUFZLENBQUE7SUFBQVosY0FBQSxHQUFBYSxDQUFBO0lBQ25ELEtBQUssQ0FBQyxHQUFHSCxNQUFNLFlBQVlNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRU4sTUFBTSxFQUFFQyxLQUFLLENBQUM7SUFBQTtJQUFBWCxjQUFBLEdBQUFhLENBQUE7SUFDakUsSUFBSSxDQUFDQyxJQUFJLEdBQUcscUJBQXFCO0VBQ25DOztBQUdGLE9BQU0sTUFBT0csZ0JBQWlCLFNBQVFaLGVBQWU7RUFDbkRFLFlBQVlHLE1BQWMsRUFBRU0sRUFBVSxFQUFFTCxLQUFhO0lBQUE7SUFBQVgsY0FBQSxHQUFBWSxDQUFBO0lBQUFaLGNBQUEsR0FBQWEsQ0FBQTtJQUNuRCxLQUFLLENBQUMsNEJBQTRCSCxNQUFNLFlBQVlNLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRU4sTUFBTSxFQUFFQyxLQUFLLENBQUM7SUFBQTtJQUFBWCxjQUFBLEdBQUFhLENBQUE7SUFDaEYsSUFBSSxDQUFDQyxJQUFJLEdBQUcsa0JBQWtCO0VBQ2hDOztBQUdGLE9BQU0sTUFBT0ksd0JBQXlCLFNBQVFiLGVBQWU7RUFDM0RFLFlBQVlHLE1BQWMsRUFBRVMsVUFBa0IsRUFBRVIsS0FBYTtJQUFBO0lBQUFYLGNBQUEsR0FBQVksQ0FBQTtJQUFBWixjQUFBLEdBQUFhLENBQUE7SUFDM0QsS0FBSyxDQUFDLDRCQUE0QkgsTUFBTSxLQUFLUyxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUVULE1BQU0sRUFBRUMsS0FBSyxDQUFDO0lBQUE7SUFBQVgsY0FBQSxHQUFBYSxDQUFBO0lBQ2pGLElBQUksQ0FBQ0MsSUFBSSxHQUFHLDBCQUEwQjtFQUN4QyIsImlnbm9yZUxpc3QiOltdfQ==