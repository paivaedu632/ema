c33bd0498b99b2d560077f2b3c24158b
/* istanbul ignore next */
function cov_1arwvbb2fl() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\utils\\amount-validation.ts";
  var hash = "afe4bc075402820766bdd04224c009a135353eec";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\utils\\amount-validation.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 25
        },
        end: {
          line: 53,
          column: 1
        }
      },
      "1": {
        start: {
          line: 60,
          column: 26
        },
        end: {
          line: 60,
          column: 82
        }
      },
      "2": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "3": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 66,
          column: 10
        }
      },
      "4": {
        start: {
          line: 69,
          column: 18
        },
        end: {
          line: 69,
          column: 116
        }
      },
      "5": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "6": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "7": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 76,
          column: 14
        }
      },
      "8": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "9": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 82,
          column: 14
        }
      },
      "10": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 29
        }
      },
      "11": {
        start: {
          line: 93,
          column: 18
        },
        end: {
          line: 93,
          column: 116
        }
      },
      "12": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 94,
          column: 62
        }
      },
      "13": {
        start: {
          line: 94,
          column: 39
        },
        end: {
          line: 94,
          column: 61
        }
      },
      "14": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 73
        }
      },
      "15": {
        start: {
          line: 102,
          column: 18
        },
        end: {
          line: 102,
          column: 116
        }
      },
      "16": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 62
        }
      },
      "17": {
        start: {
          line: 103,
          column: 39
        },
        end: {
          line: 103,
          column: 61
        }
      },
      "18": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 73
        }
      }
    },
    fnMap: {
      "0": {
        name: "validateAmount",
        decl: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 30
          }
        },
        loc: {
          start: {
            line: 57,
            column: 66
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 57
      },
      "1": {
        name: "getMinimumAmount",
        decl: {
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 91,
            column: 32
          }
        },
        loc: {
          start: {
            line: 91,
            column: 60
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 91
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 94,
            column: 31
          },
          end: {
            line: 94,
            column: 32
          }
        },
        loc: {
          start: {
            line: 94,
            column: 39
          },
          end: {
            line: 94,
            column: 61
          }
        },
        line: 94
      },
      "3": {
        name: "getMaximumAmount",
        decl: {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 100,
            column: 32
          }
        },
        loc: {
          start: {
            line: 100,
            column: 60
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 100
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 103,
            column: 31
          },
          end: {
            line: 103,
            column: 32
          }
        },
        loc: {
          start: {
            line: 103,
            column: 39
          },
          end: {
            line: 103,
            column: 61
          }
        },
        line: 103
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 60,
            column: 26
          },
          end: {
            line: 60,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 60,
            column: 55
          },
          end: {
            line: 60,
            column: 73
          }
        }, {
          start: {
            line: 60,
            column: 76
          },
          end: {
            line: 60,
            column: 82
          }
        }],
        line: 60
      },
      "1": {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 8
          },
          end: {
            line: 62,
            column: 28
          }
        }, {
          start: {
            line: 62,
            column: 32
          },
          end: {
            line: 62,
            column: 49
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 69,
            column: 18
          },
          end: {
            line: 69,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 19
          },
          end: {
            line: 69,
            column: 109
          }
        }, {
          start: {
            line: 69,
            column: 114
          },
          end: {
            line: 69,
            column: 116
          }
        }],
        line: 69
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 19
          },
          end: {
            line: 69,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 69,
            column: 88
          },
          end: {
            line: 69,
            column: 94
          }
        }, {
          start: {
            line: 69,
            column: 97
          },
          end: {
            line: 69,
            column: 109
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 19
          },
          end: {
            line: 69,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 19
          },
          end: {
            line: 69,
            column: 68
          }
        }, {
          start: {
            line: 69,
            column: 72
          },
          end: {
            line: 69,
            column: 85
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 34
          }
        }, {
          start: {
            line: 72,
            column: 38
          },
          end: {
            line: 72,
            column: 62
          }
        }],
        line: 72
      },
      "8": {
        loc: {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "9": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 78,
            column: 34
          }
        }, {
          start: {
            line: 78,
            column: 38
          },
          end: {
            line: 78,
            column: 62
          }
        }],
        line: 78
      },
      "10": {
        loc: {
          start: {
            line: 93,
            column: 18
          },
          end: {
            line: 93,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 93,
            column: 109
          }
        }, {
          start: {
            line: 93,
            column: 114
          },
          end: {
            line: 93,
            column: 116
          }
        }],
        line: 93
      },
      "11": {
        loc: {
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 93,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 93,
            column: 88
          },
          end: {
            line: 93,
            column: 94
          }
        }, {
          start: {
            line: 93,
            column: 97
          },
          end: {
            line: 93,
            column: 109
          }
        }],
        line: 93
      },
      "12": {
        loc: {
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 93,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 19
          },
          end: {
            line: 93,
            column: 68
          }
        }, {
          start: {
            line: 93,
            column: 72
          },
          end: {
            line: 93,
            column: 85
          }
        }],
        line: 93
      },
      "13": {
        loc: {
          start: {
            line: 95,
            column: 11
          },
          end: {
            line: 95,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 95,
            column: 52
          },
          end: {
            line: 95,
            column: 58
          }
        }, {
          start: {
            line: 95,
            column: 61
          },
          end: {
            line: 95,
            column: 72
          }
        }],
        line: 95
      },
      "14": {
        loc: {
          start: {
            line: 95,
            column: 11
          },
          end: {
            line: 95,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 11
          },
          end: {
            line: 95,
            column: 27
          }
        }, {
          start: {
            line: 95,
            column: 31
          },
          end: {
            line: 95,
            column: 49
          }
        }],
        line: 95
      },
      "15": {
        loc: {
          start: {
            line: 102,
            column: 18
          },
          end: {
            line: 102,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 19
          },
          end: {
            line: 102,
            column: 109
          }
        }, {
          start: {
            line: 102,
            column: 114
          },
          end: {
            line: 102,
            column: 116
          }
        }],
        line: 102
      },
      "16": {
        loc: {
          start: {
            line: 102,
            column: 19
          },
          end: {
            line: 102,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 88
          },
          end: {
            line: 102,
            column: 94
          }
        }, {
          start: {
            line: 102,
            column: 97
          },
          end: {
            line: 102,
            column: 109
          }
        }],
        line: 102
      },
      "17": {
        loc: {
          start: {
            line: 102,
            column: 19
          },
          end: {
            line: 102,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 19
          },
          end: {
            line: 102,
            column: 68
          }
        }, {
          start: {
            line: 102,
            column: 72
          },
          end: {
            line: 102,
            column: 85
          }
        }],
        line: 102
      },
      "18": {
        loc: {
          start: {
            line: 104,
            column: 11
          },
          end: {
            line: 104,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 52
          },
          end: {
            line: 104,
            column: 58
          }
        }, {
          start: {
            line: 104,
            column: 61
          },
          end: {
            line: 104,
            column: 72
          }
        }],
        line: 104
      },
      "19": {
        loc: {
          start: {
            line: 104,
            column: 11
          },
          end: {
            line: 104,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 104,
            column: 11
          },
          end: {
            line: 104,
            column: 27
          }
        }, {
          start: {
            line: 104,
            column: 31
          },
          end: {
            line: 104,
            column: 49
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\utils\\amount-validation.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\utils\\amount-validation.ts"],
      sourcesContent: ["/**\n * Amount validation utilities for EmaPay transactions\n * Provides validation rules and error messages for different transaction types\n */\n\nexport type TransactionType = 'buy' | 'sell' | 'send' | 'exchange' | 'deposit'\nexport type Currency = 'AOA' | 'EUR'\n\nexport interface ValidationRule {\n  min?: number\n  max?: number\n  message: string\n}\n\nexport interface ValidationResult {\n  isValid: boolean\n  errorMessage?: string\n}\n\n/**\n * Validation rules for different transaction types and currencies\n */\nconst VALIDATION_RULES: Record<TransactionType, Record<Currency, ValidationRule[]>> = {\n  buy: {\n    AOA: [\n      { min: 10000, message: \"Valor m\xEDnimo: 10,000 AOA\" }\n    ],\n    EUR: [\n      { min: 10, message: \"Valor m\xEDnimo: 10 EUR\" },\n      { max: 50000, message: \"Valor m\xE1ximo: 50,000 EUR\" }\n    ]\n  },\n  sell: {\n    AOA: [\n      { min: 10000, message: \"Valor m\xEDnimo: 10,000 AOA\" }\n    ],\n    EUR: [\n      { min: 10, message: \"Valor m\xEDnimo: 10 EUR\" },\n      { max: 100000, message: \"Valor m\xE1ximo: 100,000 EUR\" }\n    ]\n  },\n  send: {\n    AOA: [\n      { min: 1, message: \"M\xEDnimo: acima de 0 AOA\" },\n      { max: 1000000, message: \"Valor m\xE1ximo: 1,000,000 AOA\" }\n    ],\n    EUR: [\n      { min: 0.01, message: \"M\xEDnimo: acima de 0 EUR\" },\n      { max: 10000, message: \"Valor m\xE1ximo: 10,000 EUR\" }\n    ]\n  },\n  exchange: {\n    AOA: [\n      { min: 0.01, message: \"M\xEDnimo: acima de 0 AOA\" }\n    ],\n    EUR: [\n      { min: 0.01, message: \"M\xEDnimo: acima de 0 EUR\" }\n    ]\n  },\n  deposit: {\n    AOA: [\n      { min: 0.01, message: \"M\xEDnimo: acima de 0 AOA\" }\n    ],\n    EUR: [\n      { min: 0.01, message: \"M\xEDnimo: acima de 0 EUR\" }\n    ]\n  }\n}\n\n/**\n * Validates an amount for a specific transaction type and currency\n */\nexport function validateAmount(\n  amount: string | number,\n  currency: Currency,\n  transactionType: TransactionType\n): ValidationResult {\n  // Convert to number\n  const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount\n  \n  // Check if it's a valid number\n  if (isNaN(numericAmount) || numericAmount < 0) {\n    return {\n      isValid: false,\n      errorMessage: \"Por favor, insira um valor v\xE1lido\"\n    }\n  }\n\n  // Get validation rules for this transaction type and currency\n  const rules = VALIDATION_RULES[transactionType]?.[currency] || []\n  \n  // Check each rule\n  for (const rule of rules) {\n    if (rule.min !== undefined && numericAmount < rule.min) {\n      return {\n        isValid: false,\n        errorMessage: rule.message\n      }\n    }\n    \n    if (rule.max !== undefined && numericAmount > rule.max) {\n      return {\n        isValid: false,\n        errorMessage: rule.message\n      }\n    }\n  }\n\n  return { isValid: true }\n}\n\n// Formatting functions are in @/lib/format - use those instead\n\n/**\n * Gets the minimum amount for a transaction type and currency\n */\nexport function getMinimumAmount(currency: Currency, transactionType: TransactionType): number | undefined {\n  const rules = VALIDATION_RULES[transactionType]?.[currency] || []\n  const minRule = rules.find(rule => rule.min !== undefined)\n  return minRule?.min\n}\n\n/**\n * Gets the maximum amount for a transaction type and currency\n */\nexport function getMaximumAmount(currency: Currency, transactionType: TransactionType): number | undefined {\n  const rules = VALIDATION_RULES[transactionType]?.[currency] || []\n  const maxRule = rules.find(rule => rule.max !== undefined)\n  return maxRule?.max\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "afe4bc075402820766bdd04224c009a135353eec"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1arwvbb2fl = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1arwvbb2fl();
/**
 * Amount validation utilities for EmaPay transactions
 * Provides validation rules and error messages for different transaction types
 */
/**
 * Validation rules for different transaction types and currencies
 */
const VALIDATION_RULES =
/* istanbul ignore next */
(cov_1arwvbb2fl().s[0]++, {
  buy: {
    AOA: [{
      min: 10000,
      message: "Valor mínimo: 10,000 AOA"
    }],
    EUR: [{
      min: 10,
      message: "Valor mínimo: 10 EUR"
    }, {
      max: 50000,
      message: "Valor máximo: 50,000 EUR"
    }]
  },
  sell: {
    AOA: [{
      min: 10000,
      message: "Valor mínimo: 10,000 AOA"
    }],
    EUR: [{
      min: 10,
      message: "Valor mínimo: 10 EUR"
    }, {
      max: 100000,
      message: "Valor máximo: 100,000 EUR"
    }]
  },
  send: {
    AOA: [{
      min: 1,
      message: "Mínimo: acima de 0 AOA"
    }, {
      max: 1000000,
      message: "Valor máximo: 1,000,000 AOA"
    }],
    EUR: [{
      min: 0.01,
      message: "Mínimo: acima de 0 EUR"
    }, {
      max: 10000,
      message: "Valor máximo: 10,000 EUR"
    }]
  },
  exchange: {
    AOA: [{
      min: 0.01,
      message: "Mínimo: acima de 0 AOA"
    }],
    EUR: [{
      min: 0.01,
      message: "Mínimo: acima de 0 EUR"
    }]
  },
  deposit: {
    AOA: [{
      min: 0.01,
      message: "Mínimo: acima de 0 AOA"
    }],
    EUR: [{
      min: 0.01,
      message: "Mínimo: acima de 0 EUR"
    }]
  }
});
/**
 * Validates an amount for a specific transaction type and currency
 */
export function validateAmount(amount, currency, transactionType) {
  /* istanbul ignore next */
  cov_1arwvbb2fl().f[0]++;
  var _a;
  // Convert to number
  const numericAmount =
  /* istanbul ignore next */
  (cov_1arwvbb2fl().s[1]++, typeof amount === 'string' ?
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[0][0]++, parseFloat(amount)) :
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[0][1]++, amount));
  // Check if it's a valid number
  /* istanbul ignore next */
  cov_1arwvbb2fl().s[2]++;
  if (
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[2][0]++, isNaN(numericAmount)) ||
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[2][1]++, numericAmount < 0)) {
    /* istanbul ignore next */
    cov_1arwvbb2fl().b[1][0]++;
    cov_1arwvbb2fl().s[3]++;
    return {
      isValid: false,
      errorMessage: "Por favor, insira um valor válido"
    };
  } else
  /* istanbul ignore next */
  {
    cov_1arwvbb2fl().b[1][1]++;
  }
  // Get validation rules for this transaction type and currency
  const rules =
  /* istanbul ignore next */
  (cov_1arwvbb2fl().s[4]++,
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[3][0]++,
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[5][0]++, (_a = VALIDATION_RULES[transactionType]) === null) ||
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[5][1]++, _a === void 0) ?
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[4][0]++, void 0) :
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[4][1]++, _a[currency])) ||
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[3][1]++, []));
  // Check each rule
  /* istanbul ignore next */
  cov_1arwvbb2fl().s[5]++;
  for (const rule of rules) {
    /* istanbul ignore next */
    cov_1arwvbb2fl().s[6]++;
    if (
    /* istanbul ignore next */
    (cov_1arwvbb2fl().b[7][0]++, rule.min !== undefined) &&
    /* istanbul ignore next */
    (cov_1arwvbb2fl().b[7][1]++, numericAmount < rule.min)) {
      /* istanbul ignore next */
      cov_1arwvbb2fl().b[6][0]++;
      cov_1arwvbb2fl().s[7]++;
      return {
        isValid: false,
        errorMessage: rule.message
      };
    } else
    /* istanbul ignore next */
    {
      cov_1arwvbb2fl().b[6][1]++;
    }
    cov_1arwvbb2fl().s[8]++;
    if (
    /* istanbul ignore next */
    (cov_1arwvbb2fl().b[9][0]++, rule.max !== undefined) &&
    /* istanbul ignore next */
    (cov_1arwvbb2fl().b[9][1]++, numericAmount > rule.max)) {
      /* istanbul ignore next */
      cov_1arwvbb2fl().b[8][0]++;
      cov_1arwvbb2fl().s[9]++;
      return {
        isValid: false,
        errorMessage: rule.message
      };
    } else
    /* istanbul ignore next */
    {
      cov_1arwvbb2fl().b[8][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1arwvbb2fl().s[10]++;
  return {
    isValid: true
  };
}
// Formatting functions are in @/lib/format - use those instead
/**
 * Gets the minimum amount for a transaction type and currency
 */
export function getMinimumAmount(currency, transactionType) {
  /* istanbul ignore next */
  cov_1arwvbb2fl().f[1]++;
  var _a;
  const rules =
  /* istanbul ignore next */
  (cov_1arwvbb2fl().s[11]++,
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[10][0]++,
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[12][0]++, (_a = VALIDATION_RULES[transactionType]) === null) ||
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[12][1]++, _a === void 0) ?
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[11][0]++, void 0) :
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[11][1]++, _a[currency])) ||
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[10][1]++, []));
  const minRule =
  /* istanbul ignore next */
  (cov_1arwvbb2fl().s[12]++, rules.find(rule => {
    /* istanbul ignore next */
    cov_1arwvbb2fl().f[2]++;
    cov_1arwvbb2fl().s[13]++;
    return rule.min !== undefined;
  }));
  /* istanbul ignore next */
  cov_1arwvbb2fl().s[14]++;
  return /* istanbul ignore next */(cov_1arwvbb2fl().b[14][0]++, minRule === null) ||
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[14][1]++, minRule === void 0) ?
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[13][0]++, void 0) :
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[13][1]++, minRule.min);
}
/**
 * Gets the maximum amount for a transaction type and currency
 */
export function getMaximumAmount(currency, transactionType) {
  /* istanbul ignore next */
  cov_1arwvbb2fl().f[3]++;
  var _a;
  const rules =
  /* istanbul ignore next */
  (cov_1arwvbb2fl().s[15]++,
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[15][0]++,
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[17][0]++, (_a = VALIDATION_RULES[transactionType]) === null) ||
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[17][1]++, _a === void 0) ?
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[16][0]++, void 0) :
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[16][1]++, _a[currency])) ||
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[15][1]++, []));
  const maxRule =
  /* istanbul ignore next */
  (cov_1arwvbb2fl().s[16]++, rules.find(rule => {
    /* istanbul ignore next */
    cov_1arwvbb2fl().f[4]++;
    cov_1arwvbb2fl().s[17]++;
    return rule.max !== undefined;
  }));
  /* istanbul ignore next */
  cov_1arwvbb2fl().s[18]++;
  return /* istanbul ignore next */(cov_1arwvbb2fl().b[19][0]++, maxRule === null) ||
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[19][1]++, maxRule === void 0) ?
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[18][0]++, void 0) :
  /* istanbul ignore next */
  (cov_1arwvbb2fl().b[18][1]++, maxRule.max);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,