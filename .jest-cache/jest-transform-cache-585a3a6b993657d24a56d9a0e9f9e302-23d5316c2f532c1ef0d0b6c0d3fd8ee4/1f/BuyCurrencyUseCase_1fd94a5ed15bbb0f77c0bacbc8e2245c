6fbb7df3c4bf39dc46e79745f591d424
/* istanbul ignore next */
function cov_1gh42lu5wq() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\BuyCurrencyUseCase.ts";
  var hash = "936ce972d812190c7e86c19db076b45e2b023770";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\BuyCurrencyUseCase.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "1": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 49
        }
      },
      "2": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 59
        }
      },
      "3": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 37
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 55
        }
      },
      "5": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 59
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "7": {
        start: {
          line: 24,
          column: 37
        },
        end: {
          line: 24,
          column: 66
        }
      },
      "8": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 27,
          column: 13
        }
      },
      "9": {
        start: {
          line: 26,
          column: 16
        },
        end: {
          line: 26,
          column: 196
        }
      },
      "10": {
        start: {
          line: 26,
          column: 98
        },
        end: {
          line: 26,
          column: 107
        }
      },
      "11": {
        start: {
          line: 29,
          column: 27
        },
        end: {
          line: 29,
          column: 60
        }
      },
      "12": {
        start: {
          line: 30,
          column: 33
        },
        end: {
          line: 30,
          column: 72
        }
      },
      "13": {
        start: {
          line: 31,
          column: 31
        },
        end: {
          line: 31,
          column: 68
        }
      },
      "14": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 32,
          column: 81
        }
      },
      "15": {
        start: {
          line: 34,
          column: 12
        },
        end: {
          line: 36,
          column: 13
        }
      },
      "16": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 143
        }
      },
      "17": {
        start: {
          line: 38,
          column: 27
        },
        end: {
          line: 93,
          column: 14
        }
      },
      "18": {
        start: {
          line: 40,
          column: 29
        },
        end: {
          line: 40,
          column: 71
        }
      },
      "19": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 43,
          column: 17
        }
      },
      "20": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 60
        }
      },
      "21": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 47,
          column: 17
        }
      },
      "22": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 125
        }
      },
      "23": {
        start: {
          line: 49,
          column: 39
        },
        end: {
          line: 49,
          column: 117
        }
      },
      "24": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 57,
          column: 17
        }
      },
      "25": {
        start: {
          line: 52,
          column: 37
        },
        end: {
          line: 52,
          column: 123
        }
      },
      "26": {
        start: {
          line: 53,
          column: 40
        },
        end: {
          line: 53,
          column: 64
        }
      },
      "27": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 56,
          column: 21
        }
      },
      "28": {
        start: {
          line: 55,
          column: 24
        },
        end: {
          line: 55,
          column: 97
        }
      },
      "29": {
        start: {
          line: 59,
          column: 35
        },
        end: {
          line: 59,
          column: 108
        }
      },
      "30": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 62,
          column: 17
        }
      },
      "31": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 76
        }
      },
      "32": {
        start: {
          line: 63,
          column: 31
        },
        end: {
          line: 63,
          column: 102
        }
      },
      "33": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 66,
          column: 17
        }
      },
      "34": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 65
        }
      },
      "35": {
        start: {
          line: 68,
          column: 34
        },
        end: {
          line: 68,
          column: 98
        }
      },
      "36": {
        start: {
          line: 69,
          column: 40
        },
        end: {
          line: 69,
          column: 74
        }
      },
      "37": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 73,
          column: 17
        }
      },
      "38": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 134
        }
      },
      "39": {
        start: {
          line: 75,
          column: 36
        },
        end: {
          line: 75,
          column: 175
        }
      },
      "40": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 47
        }
      },
      "41": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 53
        }
      },
      "42": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 62
        }
      },
      "43": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 46
        }
      },
      "44": {
        start: {
          line: 85,
          column: 16
        },
        end: {
          line: 85,
          column: 61
        }
      },
      "45": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 59
        }
      },
      "46": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 67
        }
      },
      "47": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 92,
          column: 18
        }
      },
      "48": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 103,
          column: 15
        }
      },
      "49": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "50": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 88
        }
      },
      "51": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "52": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 128
        }
      },
      "53": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "54": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 118,
          column: 19
        }
      },
      "55": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 125,
          column: 13
        }
      },
      "56": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 124,
          column: 19
        }
      },
      "57": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "58": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 84
        }
      },
      "59": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 135,
          column: 13
        }
      },
      "60": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 134,
          column: 19
        }
      },
      "61": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 76
        }
      },
      "62": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 100
        }
      },
      "63": {
        start: {
          line: 145,
          column: 23
        },
        end: {
          line: 145,
          column: 25
        }
      },
      "64": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "65": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 152,
          column: 15
        }
      },
      "66": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 161,
          column: 9
        }
      },
      "67": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 160,
          column: 15
        }
      },
      "68": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "69": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 168,
          column: 15
        }
      },
      "70": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "71": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "72": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "73": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "74": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "75": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 191,
          column: 15
        }
      },
      "76": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 200,
          column: 9
        }
      },
      "77": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 199,
          column: 15
        }
      },
      "78": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "79": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 207,
          column: 15
        }
      },
      "80": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 211,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 129
          },
          end: {
            line: 20,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 27
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 21
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 26,
            column: 93
          },
          end: {
            line: 26,
            column: 94
          }
        },
        loc: {
          start: {
            line: 26,
            column: 98
          },
          end: {
            line: 26,
            column: 107
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 38,
            column: 57
          },
          end: {
            line: 38,
            column: 58
          }
        },
        loc: {
          start: {
            line: 38,
            column: 69
          },
          end: {
            line: 93,
            column: 13
          }
        },
        line: 38
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 144
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 12
          },
          end: {
            line: 27,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 36,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "2": {
        loc: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 43,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 43,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 47,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 47,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 57,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 57,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 40
          },
          end: {
            line: 53,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 40
          },
          end: {
            line: 53,
            column: 59
          }
        }, {
          start: {
            line: 53,
            column: 63
          },
          end: {
            line: 53,
            column: 64
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 20
          },
          end: {
            line: 56,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 20
          },
          end: {
            line: 56,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 66,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 66,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 73,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 73,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "10": {
        loc: {
          start: {
            line: 102,
            column: 28
          },
          end: {
            line: 102,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 28
          },
          end: {
            line: 102,
            column: 58
          }
        }, {
          start: {
            line: 102,
            column: 62
          },
          end: {
            line: 102,
            column: 72
          }
        }],
        line: 102
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "13": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "14": {
        loc: {
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 125,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 12
          },
          end: {
            line: 125,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "15": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 135,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 153,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "18": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 147,
            column: 27
          }
        }, {
          start: {
            line: 147,
            column: 31
          },
          end: {
            line: 147,
            column: 65
          }
        }],
        line: 147
      },
      "19": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 161,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "20": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 155,
            column: 33
          }
        }, {
          start: {
            line: 155,
            column: 37
          },
          end: {
            line: 155,
            column: 80
          }
        }],
        line: 155
      },
      "21": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 169,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "22": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 31
          }
        }, {
          start: {
            line: 163,
            column: 35
          },
          end: {
            line: 163,
            column: 76
          }
        }],
        line: 163
      },
      "23": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "24": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "25": {
        loc: {
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 179,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 12
          },
          end: {
            line: 179,
            column: 31
          }
        }, {
          start: {
            line: 179,
            column: 35
          },
          end: {
            line: 179,
            column: 58
          }
        }],
        line: 179
      },
      "26": {
        loc: {
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 8
          },
          end: {
            line: 192,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "27": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 186,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 186,
            column: 30
          }
        }, {
          start: {
            line: 186,
            column: 34
          },
          end: {
            line: 186,
            column: 61
          }
        }],
        line: 186
      },
      "28": {
        loc: {
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 8
          },
          end: {
            line: 200,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "29": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 194,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 194,
            column: 32
          }
        }, {
          start: {
            line: 194,
            column: 36
          },
          end: {
            line: 194,
            column: 61
          }
        }],
        line: 194
      },
      "30": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "31": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 202,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 202,
            column: 31
          }
        }, {
          start: {
            line: 202,
            column: 36
          },
          end: {
            line: 202,
            column: 59
          }
        }, {
          start: {
            line: 202,
            column: 63
          },
          end: {
            line: 202,
            column: 87
          }
        }],
        line: 202
      },
      "32": {
        loc: {
          start: {
            line: 209,
            column: 15
          },
          end: {
            line: 211,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 210,
            column: 14
          },
          end: {
            line: 210,
            column: 47
          }
        }, {
          start: {
            line: 211,
            column: 14
          },
          end: {
            line: 211,
            column: 53
          }
        }],
        line: 209
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\BuyCurrencyUseCase.ts",
      mappings: "AAAA;;;;;GAKG;AAEH,OAAO,EAML,aAAa,EAEb,uBAAuB,EACvB,UAAU,EACX,MAAM,mBAAmB,CAAA;AAE1B,OAAO,EACL,KAAK,EACL,QAAQ,EAGR,MAAM,EACN,WAAW,EAEX,MAAM,EAGN,4BAA4B,EAC5B,qBAAqB,EACrB,uBAAuB,EACvB,oBAAoB,EACpB,gCAAgC,EAChC,0BAA0B,EAC3B,MAAM,cAAc,CAAA;AAmCrB;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAC7B,YACmB,cAA8B,EAC9B,gBAAkC,EAClC,qBAA4C,EAC5C,UAAsB,EACtB,mBAAwC,EACxC,qBAA4C;QAL5C,mBAAc,GAAd,cAAc,CAAgB;QAC9B,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,0BAAqB,GAArB,qBAAqB,CAAuB;IAC5D,CAAC;IAEJ,KAAK,CAAC,OAAO,CAAC,OAA2B;QACvC,IAAI,CAAC;YACH,oBAAoB;YACpB,MAAM,gBAAgB,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;YACtD,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;gBAC9B,OAAO,aAAa,CAAC,KAAK,CACxB,sBAAsB,gBAAgB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAC9E,UAAU,CAAC,aAAa,EACxB,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,MAAM,EAAE,CAC9C,CAAA;YACH,CAAC;YAED,0BAA0B;YAC1B,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;YAChD,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC,CAAA;YAC5D,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,CAAA;YACxD,MAAM,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAA;YAErE,yCAAyC;YACzC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,YAAY,EAAE,UAAU,CAAC,EAAE,CAAC;gBACxE,OAAO,aAAa,CAAC,KAAK,CACxB,iBAAiB,YAAY,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,mBAAmB,EACxE,UAAU,CAAC,aAAa,CACzB,CAAA;YACH,CAAC;YAED,+CAA+C;YAC/C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE;gBACtD,WAAW;gBACX,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;gBACvD,IAAI,CAAC,IAAI,EAAE,CAAC;oBACV,MAAM,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAA;gBACzC,CAAC;gBAED,yCAAyC;gBACzC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,EAAE,CAAC;oBACnC,MAAM,IAAI,oBAAoB,CAC5B,MAAM,EACN,IAAI,CAAC,SAAS,EACd,gDAAgD,CACjD,CAAA;gBACH,CAAC;gBAED,4BAA4B;gBAC5B,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,CAC3E,UAAU,EACV,UAAU,CACX,CAAA;gBAED,mDAAmD;gBACnD,IAAI,OAAO,CAAC,YAAY,EAAE,CAAC;oBACzB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,YAAY,GAAG,GAAG,CAAA;oBACvG,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,CAAC,CAAA,CAAC,0BAA0B;oBAEvE,IAAI,QAAQ,GAAG,WAAW,EAAE,CAAC;wBAC3B,MAAM,IAAI,0BAA0B,CAAC,YAAY,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAA;oBAC1E,CAAC;gBACH,CAAC;gBAED,qBAAqB;gBACrB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;gBAC5F,IAAI,CAAC,UAAU,EAAE,CAAC;oBAChB,MAAM,IAAI,uBAAuB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;gBACzD,CAAC;gBAED,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;gBACtF,IAAI,CAAC,QAAQ,EAAE,CAAC;oBACd,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;gBAC9C,CAAC;gBAED,uCAAuC;gBACvC,MAAM,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,CAAA;gBAClF,MAAM,eAAe,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;gBAE1D,uCAAuC;gBACvC,IAAI,CAAC,UAAU,CAAC,6BAA6B,CAAC,eAAe,CAAC,EAAE,CAAC;oBAC/D,MAAM,IAAI,4BAA4B,CACpC,YAAY,EACZ,eAAe,EACf,UAAU,CAAC,gBAAgB,EAC3B,UAAU,CAAC,EAAE,CACd,CAAA;gBACH,CAAC;gBAED,yBAAyB;gBACzB,MAAM,WAAW,GAAG,WAAW,CAAC,SAAS,CACvC,MAAM,EACN,UAAU,EACV,SAAS,CAAC,QAAQ,EAClB,cAAc,CAAC,IAAI,CAAC,IAAI,EACxB,OAAO,UAAU,CAAC,IAAI,SAAS,YAAY,CAAC,IAAI,EAAE,CACnD,CAAA;gBAED,uBAAuB;gBACvB,WAAW,CAAC,gBAAgB,EAAE,CAAA;gBAE9B,4CAA4C;gBAC5C,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA;gBAEpC,8DAA8D;gBAC9D,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,CAAA;gBAE7C,gCAAgC;gBAChC,WAAW,CAAC,eAAe,EAAE,CAAA;gBAE7B,mBAAmB;gBACnB,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;gBAC5C,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;gBAC1C,MAAM,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;gBAElD,OAAO;oBACL,WAAW;oBACX,cAAc;oBACd,SAAS;iBACV,CAAA;YACH,CAAC,CAAC,CAAA;YAEF,2BAA2B;YAC3B,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,aAAa,EAAE,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,KAAK;gBAC1C,UAAU,EAAE,UAAU,CAAC,MAAM;gBAC7B,QAAQ,EAAE,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM;gBACnD,YAAY,EAAE,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI;gBAC7C,GAAG,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM;gBACrC,WAAW,EAAE,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM;gBACtD,UAAU,EAAE,MAAM,CAAC,WAAW,CAAC,WAAW,IAAI,IAAI,IAAI,EAAE;aACzD,CAAC,CAAA;QAEJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,2BAA2B;YAC3B,IAAI,KAAK,YAAY,qBAAqB,EAAE,CAAC;gBAC3C,OAAO,aAAa,CAAC,KAAK,CACxB,gBAAgB,EAChB,UAAU,CAAC,cAAc,CAC1B,CAAA;YACH,CAAC;YAED,IAAI,KAAK,YAAY,uBAAuB,EAAE,CAAC;gBAC7C,OAAO,aAAa,CAAC,KAAK,CACxB,iCAAiC,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,EACtD,UAAU,CAAC,gBAAgB,CAC5B,CAAA;YACH,CAAC;YAED,IAAI,KAAK,YAAY,4BAA4B,EAAE,CAAC;gBAClD,OAAO,aAAa,CAAC,KAAK,CACxB,KAAK,CAAC,OAAO,EACb,UAAU,CAAC,oBAAoB,EAC/B;oBACE,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,IAAI;oBAC7B,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,MAAM;oBAC7C,eAAe,EAAE,KAAK,CAAC,eAAe,CAAC,MAAM;iBAC9C,CACF,CAAA;YACH,CAAC;YAED,IAAI,KAAK,YAAY,oBAAoB,EAAE,CAAC;gBAC1C,OAAO,aAAa,CAAC,KAAK,CACxB,KAAK,CAAC,OAAO,EACb,UAAU,CAAC,YAAY,EACvB;oBACE,aAAa,EAAE,KAAK,CAAC,gBAAgB;oBACrC,cAAc,EAAE,KAAK,CAAC,cAAc;iBACrC,CACF,CAAA;YACH,CAAC;YAED,IAAI,KAAK,YAAY,gCAAgC,EAAE,CAAC;gBACtD,OAAO,aAAa,CAAC,KAAK,CACxB,KAAK,CAAC,OAAO,EACb,UAAU,CAAC,aAAa,CACzB,CAAA;YACH,CAAC;YAED,IAAI,KAAK,YAAY,0BAA0B,EAAE,CAAC;gBAChD,OAAO,aAAa,CAAC,KAAK,CACxB,uDAAuD,KAAK,CAAC,OAAO,GAAG,EACvE,UAAU,CAAC,aAAa,EACxB;oBACE,QAAQ,EAAE,KAAK,CAAC,OAAO;oBACvB,YAAY,EAAE,KAAK,CAAC,YAAY,CAAC,IAAI;oBACrC,UAAU,EAAE,KAAK,CAAC,UAAU,CAAC,IAAI;iBAClC,CACF,CAAA;YACH,CAAC;YAED,2BAA2B;YAC3B,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAA;YAC/D,OAAO,aAAa,CAAC,KAAK,CACxB,8BAA8B,EAC9B,UAAU,CAAC,gBAAgB,CAC5B,CAAA;QACH,CAAC;IACH,CAAC;IAED;;OAEG;IACK,eAAe,CAAC,OAA2B;QACjD,MAAM,MAAM,GAAG,EAAE,CAAA;QAEjB,mBAAmB;QACnB,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC1D,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,QAAQ;gBACf,OAAO,EAAE,qBAAqB;gBAC9B,IAAI,EAAE,UAAU;aACjB,CAAC,CAAA;QACJ,CAAC;QAED,yBAAyB;QACzB,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;YACzE,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,cAAc;gBACrB,OAAO,EAAE,sCAAsC;gBAC/C,IAAI,EAAE,eAAe;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,uBAAuB;QACvB,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;YACrE,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,YAAY;gBACnB,OAAO,EAAE,oCAAoC;gBAC7C,IAAI,EAAE,eAAe;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,oCAAoC;QACpC,IAAI,OAAO,CAAC,YAAY,KAAK,OAAO,CAAC,UAAU,EAAE,CAAC;YAChD,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,YAAY;gBACnB,OAAO,EAAE,0CAA0C;gBACnD,IAAI,EAAE,eAAe;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,uBAAuB;QACvB,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,IAAI,CAAC,EAAE,CAAC;YACnD,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,YAAY;gBACnB,OAAO,EAAE,uCAAuC;gBAChD,IAAI,EAAE,eAAe;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,GAAG,MAAM,EAAE,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,YAAY;gBACnB,OAAO,EAAE,mCAAmC;gBAC5C,IAAI,EAAE,eAAe;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,qCAAqC;QACrC,IAAI,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,YAAY,IAAI,CAAC,EAAE,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,cAAc;gBACrB,OAAO,EAAE,yCAAyC;gBAClD,IAAI,EAAE,eAAe;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,oCAAoC;QACpC,IAAI,OAAO,CAAC,WAAW,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,IAAI,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC,EAAE,CAAC;YACjF,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,aAAa;gBACpB,OAAO,EAAE,+CAA+C;gBACxD,IAAI,EAAE,eAAe;aACtB,CAAC,CAAA;QACJ,CAAC;QAED,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC;YACxB,CAAC,CAAC,uBAAuB,CAAC,OAAO,EAAE;YACnC,CAAC,CAAC,uBAAuB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;IAC7C,CAAC;CACF",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\BuyCurrencyUseCase.ts"],
      sourcesContent: ["/**\n * Buy Currency Use Case\n * \n * Handles currency exchange operations (buying AOA with EUR).\n * Validates exchange rates, calculates fees, and processes the exchange.\n */\n\nimport {\n  UseCase,\n  Command,\n  Result,\n  SuccessResult,\n  ErrorResult,\n  ResultFactory,\n  ValidationResult,\n  ValidationResultFactory,\n  ErrorCodes\n} from '../common/UseCase'\n\nimport {\n  Money,\n  Currency,\n  EUR,\n  AOA,\n  UserId,\n  Transaction,\n  User,\n  Wallet,\n  ExchangeRateService,\n  FeeCalculationService,\n  InsufficientBalanceException,\n  UserNotFoundException,\n  WalletNotFoundException,\n  KycRequiredException,\n  UnsupportedCurrencyPairException,\n  StaleExchangeRateException\n} from '../../domain'\n\nimport {\n  UserRepository,\n  WalletRepository,\n  TransactionRepository,\n  UnitOfWork\n} from '../../domain/repositories'\n\n/**\n * Buy Currency Command\n */\nexport interface BuyCurrencyCommand extends Command {\n  readonly type: 'BUY_CURRENCY'\n  readonly userId: string\n  readonly fromCurrency: string // Currency to spend (usually EUR)\n  readonly toCurrency: string   // Currency to buy (usually AOA)\n  readonly fromAmount: number   // Amount to spend\n  readonly expectedRate?: number // Expected exchange rate for validation\n  readonly maxSlippage?: number  // Maximum acceptable slippage percentage\n}\n\n/**\n * Buy Currency Result\n */\nexport interface BuyCurrencyResult extends SuccessResult<{\n  transactionId: string\n  fromAmount: number\n  toAmount: number\n  exchangeRate: number\n  fee: number\n  netToAmount: number\n  executedAt: Date\n}> {}\n\n/**\n * Buy Currency Use Case Implementation\n */\nexport class BuyCurrencyUseCase implements UseCase<BuyCurrencyCommand, BuyCurrencyResult | ErrorResult> {\n  constructor(\n    private readonly userRepository: UserRepository,\n    private readonly walletRepository: WalletRepository,\n    private readonly transactionRepository: TransactionRepository,\n    private readonly unitOfWork: UnitOfWork,\n    private readonly exchangeRateService: ExchangeRateService,\n    private readonly feeCalculationService: FeeCalculationService\n  ) {}\n\n  async execute(command: BuyCurrencyCommand): Promise<BuyCurrencyResult | ErrorResult> {\n    try {\n      // 1. Validate input\n      const validationResult = this.validateCommand(command)\n      if (!validationResult.isValid) {\n        return ResultFactory.error(\n          `Validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`,\n          ErrorCodes.INVALID_INPUT,\n          { validationErrors: validationResult.errors }\n        )\n      }\n\n      // 2. Parse domain objects\n      const userId = UserId.fromString(command.userId)\n      const fromCurrency = Currency.fromCode(command.fromCurrency)\n      const toCurrency = Currency.fromCode(command.toCurrency)\n      const fromAmount = Money.fromNumber(command.fromAmount, fromCurrency)\n\n      // 3. Validate currency pair is supported\n      if (!this.exchangeRateService.isPairSupported(fromCurrency, toCurrency)) {\n        return ResultFactory.error(\n          `Currency pair ${fromCurrency.code}/${toCurrency.code} is not supported`,\n          ErrorCodes.INVALID_INPUT\n        )\n      }\n\n      // 4. Execute business logic within transaction\n      const result = await this.unitOfWork.execute(async () => {\n        // Get user\n        const user = await this.userRepository.findById(userId)\n        if (!user) {\n          throw new UserNotFoundException(userId)\n        }\n\n        // Validate user can perform transactions\n        if (!user.canPerformTransactions()) {\n          throw new KycRequiredException(\n            userId,\n            user.kycStatus,\n            'Complete KYC verification to exchange currency'\n          )\n        }\n\n        // Get current exchange rate\n        const exchangeResult = await this.exchangeRateService.calculateExchangeAmount(\n          fromAmount,\n          toCurrency\n        )\n\n        // Validate exchange rate if expected rate provided\n        if (command.expectedRate) {\n          const slippage = Math.abs(exchangeResult.rate.rate - command.expectedRate) / command.expectedRate * 100\n          const maxSlippage = command.maxSlippage || 2 // Default 2% max slippage\n          \n          if (slippage > maxSlippage) {\n            throw new StaleExchangeRateException(fromCurrency, toCurrency, slippage)\n          }\n        }\n\n        // Get user's wallets\n        const fromWallet = await this.walletRepository.findByUserIdAndCurrency(userId, fromCurrency)\n        if (!fromWallet) {\n          throw new WalletNotFoundException(userId, fromCurrency)\n        }\n\n        let toWallet = await this.walletRepository.findByUserIdAndCurrency(userId, toCurrency)\n        if (!toWallet) {\n          toWallet = Wallet.create(userId, toCurrency)\n        }\n\n        // Calculate fee (on the from currency)\n        const feeResult = this.feeCalculationService.calculateFee(fromAmount, 'buy', user)\n        const totalFromAmount = fromAmount.add(feeResult.totalFee)\n\n        // Validate user has sufficient balance\n        if (!fromWallet.hasSufficientAvailableBalance(totalFromAmount)) {\n          throw new InsufficientBalanceException(\n            fromCurrency,\n            totalFromAmount,\n            fromWallet.availableBalance,\n            fromWallet.id\n          )\n        }\n\n        // Create buy transaction\n        const transaction = Transaction.createBuy(\n          userId,\n          fromAmount,\n          feeResult.totalFee,\n          exchangeResult.rate.rate,\n          `Buy ${toCurrency.code} with ${fromCurrency.code}`\n        )\n\n        // Process the exchange\n        transaction.markAsProcessing()\n\n        // Deduct from source wallet (including fee)\n        fromWallet.withdraw(totalFromAmount)\n\n        // Credit to destination wallet (exchange amount only, no fee)\n        toWallet.deposit(exchangeResult.outputAmount)\n\n        // Mark transaction as completed\n        transaction.markAsCompleted()\n\n        // Save all changes\n        await this.walletRepository.save(fromWallet)\n        await this.walletRepository.save(toWallet)\n        await this.transactionRepository.save(transaction)\n\n        return {\n          transaction,\n          exchangeResult,\n          feeResult\n        }\n      })\n\n      // 5. Return success result\n      return ResultFactory.success({\n        transactionId: result.transaction.id.value,\n        fromAmount: fromAmount.amount,\n        toAmount: result.exchangeResult.outputAmount.amount,\n        exchangeRate: result.exchangeResult.rate.rate,\n        fee: result.feeResult.totalFee.amount,\n        netToAmount: result.exchangeResult.outputAmount.amount,\n        executedAt: result.transaction.completedAt || new Date()\n      })\n\n    } catch (error) {\n      // Handle domain exceptions\n      if (error instanceof UserNotFoundException) {\n        return ResultFactory.error(\n          'User not found',\n          ErrorCodes.USER_NOT_FOUND\n        )\n      }\n\n      if (error instanceof WalletNotFoundException) {\n        return ResultFactory.error(\n          `Wallet not found for currency ${error.currency.code}`,\n          ErrorCodes.WALLET_NOT_FOUND\n        )\n      }\n\n      if (error instanceof InsufficientBalanceException) {\n        return ResultFactory.error(\n          error.message,\n          ErrorCodes.INSUFFICIENT_BALANCE,\n          {\n            currency: error.currency.code,\n            requestedAmount: error.requestedAmount.amount,\n            availableAmount: error.availableAmount.amount\n          }\n        )\n      }\n\n      if (error instanceof KycRequiredException) {\n        return ResultFactory.error(\n          error.message,\n          ErrorCodes.KYC_REQUIRED,\n          {\n            currentStatus: error.currentKycStatus,\n            requiredAction: error.requiredAction\n          }\n        )\n      }\n\n      if (error instanceof UnsupportedCurrencyPairException) {\n        return ResultFactory.error(\n          error.message,\n          ErrorCodes.INVALID_INPUT\n        )\n      }\n\n      if (error instanceof StaleExchangeRateException) {\n        return ResultFactory.error(\n          `Exchange rate has moved too much. Current slippage: ${error.rateAge}%`,\n          ErrorCodes.INVALID_INPUT,\n          {\n            slippage: error.rateAge,\n            fromCurrency: error.fromCurrency.code,\n            toCurrency: error.toCurrency.code\n          }\n        )\n      }\n\n      // Handle unexpected errors\n      console.error('Unexpected error in BuyCurrencyUseCase:', error)\n      return ResultFactory.error(\n        'An unexpected error occurred',\n        ErrorCodes.UNEXPECTED_ERROR\n      )\n    }\n  }\n\n  /**\n   * Validate the buy currency command\n   */\n  private validateCommand(command: BuyCurrencyCommand): ValidationResult {\n    const errors = []\n\n    // Validate user ID\n    if (!command.userId || command.userId.trim().length === 0) {\n      errors.push({\n        field: 'userId',\n        message: 'User ID is required',\n        code: 'REQUIRED'\n      })\n    }\n\n    // Validate from currency\n    if (!command.fromCurrency || !Currency.isSupported(command.fromCurrency)) {\n      errors.push({\n        field: 'fromCurrency',\n        message: 'Invalid or unsupported from currency',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    // Validate to currency\n    if (!command.toCurrency || !Currency.isSupported(command.toCurrency)) {\n      errors.push({\n        field: 'toCurrency',\n        message: 'Invalid or unsupported to currency',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    // Validate currencies are different\n    if (command.fromCurrency === command.toCurrency) {\n      errors.push({\n        field: 'toCurrency',\n        message: 'From and to currencies must be different',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    // Validate from amount\n    if (!command.fromAmount || command.fromAmount <= 0) {\n      errors.push({\n        field: 'fromAmount',\n        message: 'From amount must be greater than zero',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    if (command.fromAmount && command.fromAmount > 100000) {\n      errors.push({\n        field: 'fromAmount',\n        message: 'From amount exceeds maximum limit',\n        code: 'EXCEEDS_LIMIT'\n      })\n    }\n\n    // Validate expected rate if provided\n    if (command.expectedRate && command.expectedRate <= 0) {\n      errors.push({\n        field: 'expectedRate',\n        message: 'Expected rate must be greater than zero',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    // Validate max slippage if provided\n    if (command.maxSlippage && (command.maxSlippage < 0 || command.maxSlippage > 10)) {\n      errors.push({\n        field: 'maxSlippage',\n        message: 'Max slippage must be between 0 and 10 percent',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    return errors.length === 0\n      ? ValidationResultFactory.success()\n      : ValidationResultFactory.failure(errors)\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "936ce972d812190c7e86c19db076b45e2b023770"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1gh42lu5wq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1gh42lu5wq();
/**
 * Buy Currency Use Case
 *
 * Handles currency exchange operations (buying AOA with EUR).
 * Validates exchange rates, calculates fees, and processes the exchange.
 */
import { ResultFactory, ValidationResultFactory, ErrorCodes } from '../common/UseCase';
import { Money, Currency, UserId, Transaction, Wallet, InsufficientBalanceException, UserNotFoundException, WalletNotFoundException, KycRequiredException, UnsupportedCurrencyPairException, StaleExchangeRateException } from '../../domain';
/**
 * Buy Currency Use Case Implementation
 */
export class BuyCurrencyUseCase {
  constructor(userRepository, walletRepository, transactionRepository, unitOfWork, exchangeRateService, feeCalculationService) {
    /* istanbul ignore next */
    cov_1gh42lu5wq().f[0]++;
    cov_1gh42lu5wq().s[0]++;
    this.userRepository = userRepository;
    /* istanbul ignore next */
    cov_1gh42lu5wq().s[1]++;
    this.walletRepository = walletRepository;
    /* istanbul ignore next */
    cov_1gh42lu5wq().s[2]++;
    this.transactionRepository = transactionRepository;
    /* istanbul ignore next */
    cov_1gh42lu5wq().s[3]++;
    this.unitOfWork = unitOfWork;
    /* istanbul ignore next */
    cov_1gh42lu5wq().s[4]++;
    this.exchangeRateService = exchangeRateService;
    /* istanbul ignore next */
    cov_1gh42lu5wq().s[5]++;
    this.feeCalculationService = feeCalculationService;
  }
  async execute(command) {
    /* istanbul ignore next */
    cov_1gh42lu5wq().f[1]++;
    cov_1gh42lu5wq().s[6]++;
    try {
      // 1. Validate input
      const validationResult =
      /* istanbul ignore next */
      (cov_1gh42lu5wq().s[7]++, this.validateCommand(command));
      /* istanbul ignore next */
      cov_1gh42lu5wq().s[8]++;
      if (!validationResult.isValid) {
        /* istanbul ignore next */
        cov_1gh42lu5wq().b[0][0]++;
        cov_1gh42lu5wq().s[9]++;
        return ResultFactory.error(`Validation failed: ${validationResult.errors.map(e => {
          /* istanbul ignore next */
          cov_1gh42lu5wq().f[2]++;
          cov_1gh42lu5wq().s[10]++;
          return e.message;
        }).join(', ')}`, ErrorCodes.INVALID_INPUT, {
          validationErrors: validationResult.errors
        });
      } else
      /* istanbul ignore next */
      {
        cov_1gh42lu5wq().b[0][1]++;
      }
      // 2. Parse domain objects
      const userId =
      /* istanbul ignore next */
      (cov_1gh42lu5wq().s[11]++, UserId.fromString(command.userId));
      const fromCurrency =
      /* istanbul ignore next */
      (cov_1gh42lu5wq().s[12]++, Currency.fromCode(command.fromCurrency));
      const toCurrency =
      /* istanbul ignore next */
      (cov_1gh42lu5wq().s[13]++, Currency.fromCode(command.toCurrency));
      const fromAmount =
      /* istanbul ignore next */
      (cov_1gh42lu5wq().s[14]++, Money.fromNumber(command.fromAmount, fromCurrency));
      // 3. Validate currency pair is supported
      /* istanbul ignore next */
      cov_1gh42lu5wq().s[15]++;
      if (!this.exchangeRateService.isPairSupported(fromCurrency, toCurrency)) {
        /* istanbul ignore next */
        cov_1gh42lu5wq().b[1][0]++;
        cov_1gh42lu5wq().s[16]++;
        return ResultFactory.error(`Currency pair ${fromCurrency.code}/${toCurrency.code} is not supported`, ErrorCodes.INVALID_INPUT);
      } else
      /* istanbul ignore next */
      {
        cov_1gh42lu5wq().b[1][1]++;
      }
      // 4. Execute business logic within transaction
      const result =
      /* istanbul ignore next */
      (cov_1gh42lu5wq().s[17]++, await this.unitOfWork.execute(async () => {
        /* istanbul ignore next */
        cov_1gh42lu5wq().f[3]++;
        // Get user
        const user =
        /* istanbul ignore next */
        (cov_1gh42lu5wq().s[18]++, await this.userRepository.findById(userId));
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[19]++;
        if (!user) {
          /* istanbul ignore next */
          cov_1gh42lu5wq().b[2][0]++;
          cov_1gh42lu5wq().s[20]++;
          throw new UserNotFoundException(userId);
        } else
        /* istanbul ignore next */
        {
          cov_1gh42lu5wq().b[2][1]++;
        }
        // Validate user can perform transactions
        cov_1gh42lu5wq().s[21]++;
        if (!user.canPerformTransactions()) {
          /* istanbul ignore next */
          cov_1gh42lu5wq().b[3][0]++;
          cov_1gh42lu5wq().s[22]++;
          throw new KycRequiredException(userId, user.kycStatus, 'Complete KYC verification to exchange currency');
        } else
        /* istanbul ignore next */
        {
          cov_1gh42lu5wq().b[3][1]++;
        }
        // Get current exchange rate
        const exchangeResult =
        /* istanbul ignore next */
        (cov_1gh42lu5wq().s[23]++, await this.exchangeRateService.calculateExchangeAmount(fromAmount, toCurrency));
        // Validate exchange rate if expected rate provided
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[24]++;
        if (command.expectedRate) {
          /* istanbul ignore next */
          cov_1gh42lu5wq().b[4][0]++;
          const slippage =
          /* istanbul ignore next */
          (cov_1gh42lu5wq().s[25]++, Math.abs(exchangeResult.rate.rate - command.expectedRate) / command.expectedRate * 100);
          const maxSlippage =
          /* istanbul ignore next */
          (cov_1gh42lu5wq().s[26]++,
          /* istanbul ignore next */
          (cov_1gh42lu5wq().b[5][0]++, command.maxSlippage) ||
          /* istanbul ignore next */
          (cov_1gh42lu5wq().b[5][1]++, 2)); // Default 2% max slippage
          /* istanbul ignore next */
          cov_1gh42lu5wq().s[27]++;
          if (slippage > maxSlippage) {
            /* istanbul ignore next */
            cov_1gh42lu5wq().b[6][0]++;
            cov_1gh42lu5wq().s[28]++;
            throw new StaleExchangeRateException(fromCurrency, toCurrency, slippage);
          } else
          /* istanbul ignore next */
          {
            cov_1gh42lu5wq().b[6][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1gh42lu5wq().b[4][1]++;
        }
        // Get user's wallets
        const fromWallet =
        /* istanbul ignore next */
        (cov_1gh42lu5wq().s[29]++, await this.walletRepository.findByUserIdAndCurrency(userId, fromCurrency));
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[30]++;
        if (!fromWallet) {
          /* istanbul ignore next */
          cov_1gh42lu5wq().b[7][0]++;
          cov_1gh42lu5wq().s[31]++;
          throw new WalletNotFoundException(userId, fromCurrency);
        } else
        /* istanbul ignore next */
        {
          cov_1gh42lu5wq().b[7][1]++;
        }
        let toWallet =
        /* istanbul ignore next */
        (cov_1gh42lu5wq().s[32]++, await this.walletRepository.findByUserIdAndCurrency(userId, toCurrency));
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[33]++;
        if (!toWallet) {
          /* istanbul ignore next */
          cov_1gh42lu5wq().b[8][0]++;
          cov_1gh42lu5wq().s[34]++;
          toWallet = Wallet.create(userId, toCurrency);
        } else
        /* istanbul ignore next */
        {
          cov_1gh42lu5wq().b[8][1]++;
        }
        // Calculate fee (on the from currency)
        const feeResult =
        /* istanbul ignore next */
        (cov_1gh42lu5wq().s[35]++, this.feeCalculationService.calculateFee(fromAmount, 'buy', user));
        const totalFromAmount =
        /* istanbul ignore next */
        (cov_1gh42lu5wq().s[36]++, fromAmount.add(feeResult.totalFee));
        // Validate user has sufficient balance
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[37]++;
        if (!fromWallet.hasSufficientAvailableBalance(totalFromAmount)) {
          /* istanbul ignore next */
          cov_1gh42lu5wq().b[9][0]++;
          cov_1gh42lu5wq().s[38]++;
          throw new InsufficientBalanceException(fromCurrency, totalFromAmount, fromWallet.availableBalance, fromWallet.id);
        } else
        /* istanbul ignore next */
        {
          cov_1gh42lu5wq().b[9][1]++;
        }
        // Create buy transaction
        const transaction =
        /* istanbul ignore next */
        (cov_1gh42lu5wq().s[39]++, Transaction.createBuy(userId, fromAmount, feeResult.totalFee, exchangeResult.rate.rate, `Buy ${toCurrency.code} with ${fromCurrency.code}`));
        // Process the exchange
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[40]++;
        transaction.markAsProcessing();
        // Deduct from source wallet (including fee)
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[41]++;
        fromWallet.withdraw(totalFromAmount);
        // Credit to destination wallet (exchange amount only, no fee)
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[42]++;
        toWallet.deposit(exchangeResult.outputAmount);
        // Mark transaction as completed
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[43]++;
        transaction.markAsCompleted();
        // Save all changes
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[44]++;
        await this.walletRepository.save(fromWallet);
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[45]++;
        await this.walletRepository.save(toWallet);
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[46]++;
        await this.transactionRepository.save(transaction);
        /* istanbul ignore next */
        cov_1gh42lu5wq().s[47]++;
        return {
          transaction,
          exchangeResult,
          feeResult
        };
      }));
      // 5. Return success result
      /* istanbul ignore next */
      cov_1gh42lu5wq().s[48]++;
      return ResultFactory.success({
        transactionId: result.transaction.id.value,
        fromAmount: fromAmount.amount,
        toAmount: result.exchangeResult.outputAmount.amount,
        exchangeRate: result.exchangeResult.rate.rate,
        fee: result.feeResult.totalFee.amount,
        netToAmount: result.exchangeResult.outputAmount.amount,
        executedAt:
        /* istanbul ignore next */
        (cov_1gh42lu5wq().b[10][0]++, result.transaction.completedAt) ||
        /* istanbul ignore next */
        (cov_1gh42lu5wq().b[10][1]++, new Date())
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1gh42lu5wq().s[49]++;
      // Handle domain exceptions
      if (error instanceof UserNotFoundException) {
        /* istanbul ignore next */
        cov_1gh42lu5wq().b[11][0]++;
        cov_1gh42lu5wq().s[50]++;
        return ResultFactory.error('User not found', ErrorCodes.USER_NOT_FOUND);
      } else
      /* istanbul ignore next */
      {
        cov_1gh42lu5wq().b[11][1]++;
      }
      cov_1gh42lu5wq().s[51]++;
      if (error instanceof WalletNotFoundException) {
        /* istanbul ignore next */
        cov_1gh42lu5wq().b[12][0]++;
        cov_1gh42lu5wq().s[52]++;
        return ResultFactory.error(`Wallet not found for currency ${error.currency.code}`, ErrorCodes.WALLET_NOT_FOUND);
      } else
      /* istanbul ignore next */
      {
        cov_1gh42lu5wq().b[12][1]++;
      }
      cov_1gh42lu5wq().s[53]++;
      if (error instanceof InsufficientBalanceException) {
        /* istanbul ignore next */
        cov_1gh42lu5wq().b[13][0]++;
        cov_1gh42lu5wq().s[54]++;
        return ResultFactory.error(error.message, ErrorCodes.INSUFFICIENT_BALANCE, {
          currency: error.currency.code,
          requestedAmount: error.requestedAmount.amount,
          availableAmount: error.availableAmount.amount
        });
      } else
      /* istanbul ignore next */
      {
        cov_1gh42lu5wq().b[13][1]++;
      }
      cov_1gh42lu5wq().s[55]++;
      if (error instanceof KycRequiredException) {
        /* istanbul ignore next */
        cov_1gh42lu5wq().b[14][0]++;
        cov_1gh42lu5wq().s[56]++;
        return ResultFactory.error(error.message, ErrorCodes.KYC_REQUIRED, {
          currentStatus: error.currentKycStatus,
          requiredAction: error.requiredAction
        });
      } else
      /* istanbul ignore next */
      {
        cov_1gh42lu5wq().b[14][1]++;
      }
      cov_1gh42lu5wq().s[57]++;
      if (error instanceof UnsupportedCurrencyPairException) {
        /* istanbul ignore next */
        cov_1gh42lu5wq().b[15][0]++;
        cov_1gh42lu5wq().s[58]++;
        return ResultFactory.error(error.message, ErrorCodes.INVALID_INPUT);
      } else
      /* istanbul ignore next */
      {
        cov_1gh42lu5wq().b[15][1]++;
      }
      cov_1gh42lu5wq().s[59]++;
      if (error instanceof StaleExchangeRateException) {
        /* istanbul ignore next */
        cov_1gh42lu5wq().b[16][0]++;
        cov_1gh42lu5wq().s[60]++;
        return ResultFactory.error(`Exchange rate has moved too much. Current slippage: ${error.rateAge}%`, ErrorCodes.INVALID_INPUT, {
          slippage: error.rateAge,
          fromCurrency: error.fromCurrency.code,
          toCurrency: error.toCurrency.code
        });
      } else
      /* istanbul ignore next */
      {
        cov_1gh42lu5wq().b[16][1]++;
      }
      // Handle unexpected errors
      cov_1gh42lu5wq().s[61]++;
      console.error('Unexpected error in BuyCurrencyUseCase:', error);
      /* istanbul ignore next */
      cov_1gh42lu5wq().s[62]++;
      return ResultFactory.error('An unexpected error occurred', ErrorCodes.UNEXPECTED_ERROR);
    }
  }
  /**
   * Validate the buy currency command
   */
  validateCommand(command) {
    /* istanbul ignore next */
    cov_1gh42lu5wq().f[4]++;
    const errors =
    /* istanbul ignore next */
    (cov_1gh42lu5wq().s[63]++, []);
    // Validate user ID
    /* istanbul ignore next */
    cov_1gh42lu5wq().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[18][0]++, !command.userId) ||
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[18][1]++, command.userId.trim().length === 0)) {
      /* istanbul ignore next */
      cov_1gh42lu5wq().b[17][0]++;
      cov_1gh42lu5wq().s[65]++;
      errors.push({
        field: 'userId',
        message: 'User ID is required',
        code: 'REQUIRED'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gh42lu5wq().b[17][1]++;
    }
    // Validate from currency
    cov_1gh42lu5wq().s[66]++;
    if (
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[20][0]++, !command.fromCurrency) ||
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[20][1]++, !Currency.isSupported(command.fromCurrency))) {
      /* istanbul ignore next */
      cov_1gh42lu5wq().b[19][0]++;
      cov_1gh42lu5wq().s[67]++;
      errors.push({
        field: 'fromCurrency',
        message: 'Invalid or unsupported from currency',
        code: 'INVALID_VALUE'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gh42lu5wq().b[19][1]++;
    }
    // Validate to currency
    cov_1gh42lu5wq().s[68]++;
    if (
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[22][0]++, !command.toCurrency) ||
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[22][1]++, !Currency.isSupported(command.toCurrency))) {
      /* istanbul ignore next */
      cov_1gh42lu5wq().b[21][0]++;
      cov_1gh42lu5wq().s[69]++;
      errors.push({
        field: 'toCurrency',
        message: 'Invalid or unsupported to currency',
        code: 'INVALID_VALUE'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gh42lu5wq().b[21][1]++;
    }
    // Validate currencies are different
    cov_1gh42lu5wq().s[70]++;
    if (command.fromCurrency === command.toCurrency) {
      /* istanbul ignore next */
      cov_1gh42lu5wq().b[23][0]++;
      cov_1gh42lu5wq().s[71]++;
      errors.push({
        field: 'toCurrency',
        message: 'From and to currencies must be different',
        code: 'INVALID_VALUE'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gh42lu5wq().b[23][1]++;
    }
    // Validate from amount
    cov_1gh42lu5wq().s[72]++;
    if (
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[25][0]++, !command.fromAmount) ||
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[25][1]++, command.fromAmount <= 0)) {
      /* istanbul ignore next */
      cov_1gh42lu5wq().b[24][0]++;
      cov_1gh42lu5wq().s[73]++;
      errors.push({
        field: 'fromAmount',
        message: 'From amount must be greater than zero',
        code: 'INVALID_VALUE'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gh42lu5wq().b[24][1]++;
    }
    cov_1gh42lu5wq().s[74]++;
    if (
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[27][0]++, command.fromAmount) &&
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[27][1]++, command.fromAmount > 100000)) {
      /* istanbul ignore next */
      cov_1gh42lu5wq().b[26][0]++;
      cov_1gh42lu5wq().s[75]++;
      errors.push({
        field: 'fromAmount',
        message: 'From amount exceeds maximum limit',
        code: 'EXCEEDS_LIMIT'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gh42lu5wq().b[26][1]++;
    }
    // Validate expected rate if provided
    cov_1gh42lu5wq().s[76]++;
    if (
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[29][0]++, command.expectedRate) &&
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[29][1]++, command.expectedRate <= 0)) {
      /* istanbul ignore next */
      cov_1gh42lu5wq().b[28][0]++;
      cov_1gh42lu5wq().s[77]++;
      errors.push({
        field: 'expectedRate',
        message: 'Expected rate must be greater than zero',
        code: 'INVALID_VALUE'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gh42lu5wq().b[28][1]++;
    }
    // Validate max slippage if provided
    cov_1gh42lu5wq().s[78]++;
    if (
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[31][0]++, command.maxSlippage) && (
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[31][1]++, command.maxSlippage < 0) ||
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[31][2]++, command.maxSlippage > 10))) {
      /* istanbul ignore next */
      cov_1gh42lu5wq().b[30][0]++;
      cov_1gh42lu5wq().s[79]++;
      errors.push({
        field: 'maxSlippage',
        message: 'Max slippage must be between 0 and 10 percent',
        code: 'INVALID_VALUE'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1gh42lu5wq().b[30][1]++;
    }
    cov_1gh42lu5wq().s[80]++;
    return errors.length === 0 ?
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[32][0]++, ValidationResultFactory.success()) :
    /* istanbul ignore next */
    (cov_1gh42lu5wq().b[32][1]++, ValidationResultFactory.failure(errors));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,