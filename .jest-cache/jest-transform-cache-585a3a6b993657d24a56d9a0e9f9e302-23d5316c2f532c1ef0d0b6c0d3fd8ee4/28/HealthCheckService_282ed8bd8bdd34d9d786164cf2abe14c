8c204f0d9822c52f9fbfa482c2b480b6
/* istanbul ignore next */
function cov_1hicdpsrr3() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\health\\HealthCheckService.ts";
  var hash = "c8316062a2d784bad6a8b0ff4f7d2fe849bc447c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\health\\HealthCheckService.ts",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 45
        }
      },
      "1": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "2": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 60
        }
      },
      "3": {
        start: {
          line: 18,
          column: 26
        },
        end: {
          line: 18,
          column: 36
        }
      },
      "4": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "5": {
        start: {
          line: 21,
          column: 36
        },
        end: {
          line: 25,
          column: 25
        }
      },
      "6": {
        start: {
          line: 26,
          column: 29
        },
        end: {
          line: 26,
          column: 51
        }
      },
      "7": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "8": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 36,
          column: 18
        }
      },
      "9": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "10": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 48,
          column: 51
        }
      },
      "11": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 56,
          column: 14
        }
      },
      "12": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 35
        }
      },
      "13": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 32
        }
      },
      "14": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 60
        }
      },
      "15": {
        start: {
          line: 70,
          column: 26
        },
        end: {
          line: 70,
          column: 36
        }
      },
      "16": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "17": {
        start: {
          line: 72,
          column: 33
        },
        end: {
          line: 72,
          column: 65
        }
      },
      "18": {
        start: {
          line: 73,
          column: 29
        },
        end: {
          line: 73,
          column: 51
        }
      },
      "19": {
        start: {
          line: 74,
          column: 27
        },
        end: {
          line: 74,
          column: 75
        }
      },
      "20": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 89,
          column: 14
        }
      },
      "21": {
        start: {
          line: 92,
          column: 29
        },
        end: {
          line: 92,
          column: 51
        }
      },
      "22": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 100,
          column: 14
        }
      },
      "23": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 43
        }
      },
      "24": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 36
        }
      },
      "25": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 55
        }
      },
      "26": {
        start: {
          line: 114,
          column: 26
        },
        end: {
          line: 114,
          column: 36
        }
      },
      "27": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "28": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 116,
          column: 71
        }
      },
      "29": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 117,
          column: 57
        }
      },
      "30": {
        start: {
          line: 118,
          column: 29
        },
        end: {
          line: 118,
          column: 51
        }
      },
      "31": {
        start: {
          line: 119,
          column: 27
        },
        end: {
          line: 119,
          column: 61
        }
      },
      "32": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "33": {
        start: {
          line: 134,
          column: 29
        },
        end: {
          line: 134,
          column: 51
        }
      },
      "34": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 142,
          column: 14
        }
      },
      "35": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 29
        }
      },
      "36": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 49
        }
      },
      "37": {
        start: {
          line: 155,
          column: 26
        },
        end: {
          line: 155,
          column: 36
        }
      },
      "38": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 196,
          column: 9
        }
      },
      "39": {
        start: {
          line: 157,
          column: 32
        },
        end: {
          line: 157,
          column: 53
        }
      },
      "40": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 158,
          column: 51
        }
      },
      "41": {
        start: {
          line: 160,
          column: 31
        },
        end: {
          line: 160,
          column: 77
        }
      },
      "42": {
        start: {
          line: 161,
          column: 32
        },
        end: {
          line: 161,
          column: 79
        }
      },
      "43": {
        start: {
          line: 162,
          column: 26
        },
        end: {
          line: 162,
          column: 67
        }
      },
      "44": {
        start: {
          line: 164,
          column: 37
        },
        end: {
          line: 164,
          column: 89
        }
      },
      "45": {
        start: {
          line: 165,
          column: 25
        },
        end: {
          line: 165,
          column: 34
        }
      },
      "46": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "47": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 37
        }
      },
      "48": {
        start: {
          line: 169,
          column: 17
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "49": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 36
        }
      },
      "50": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 184,
          column: 14
        }
      },
      "51": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 187,
          column: 51
        }
      },
      "52": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 195,
          column: 14
        }
      },
      "53": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 25
        }
      },
      "54": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 37
        }
      },
      "55": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 32
        }
      },
      "56": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 71
        }
      },
      "57": {
        start: {
          line: 217,
          column: 50
        },
        end: {
          line: 217,
          column: 69
        }
      },
      "58": {
        start: {
          line: 223,
          column: 26
        },
        end: {
          line: 223,
          column: 36
        }
      },
      "59": {
        start: {
          line: 224,
          column: 30
        },
        end: {
          line: 231,
          column: 12
        }
      },
      "60": {
        start: {
          line: 224,
          column: 55
        },
        end: {
          line: 231,
          column: 11
        }
      },
      "61": {
        start: {
          line: 224,
          column: 87
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "62": {
        start: {
          line: 232,
          column: 24
        },
        end: {
          line: 232,
          column: 56
        }
      },
      "63": {
        start: {
          line: 233,
          column: 25
        },
        end: {
          line: 233,
          column: 47
        }
      },
      "64": {
        start: {
          line: 234,
          column: 24
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "65": {
        start: {
          line: 236,
          column: 41
        },
        end: {
          line: 236,
          column: 63
        }
      },
      "66": {
        start: {
          line: 237,
          column: 43
        },
        end: {
          line: 237,
          column: 67
        }
      },
      "67": {
        start: {
          line: 238,
          column: 42
        },
        end: {
          line: 238,
          column: 65
        }
      },
      "68": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 37
        }
      },
      "69": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "70": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 242,
          column: 40
        }
      },
      "71": {
        start: {
          line: 244,
          column: 13
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "72": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 39
        }
      },
      "73": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 253,
          column: 10
        }
      },
      "74": {
        start: {
          line: 259,
          column: 22
        },
        end: {
          line: 259,
          column: 60
        }
      },
      "75": {
        start: {
          line: 259,
          column: 44
        },
        end: {
          line: 259,
          column: 59
        }
      },
      "76": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "77": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 261,
          column: 24
        }
      },
      "78": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 263,
          column: 31
        }
      },
      "79": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 272,
          column: 12
        }
      },
      "80": {
        start: {
          line: 269,
          column: 41
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "81": {
        start: {
          line: 284,
          column: 24
        },
        end: {
          line: 284,
          column: 48
        }
      },
      "82": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 292,
          column: 9
        }
      },
      "83": {
        start: {
          line: 287,
          column: 35
        },
        end: {
          line: 287,
          column: 70
        }
      },
      "84": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 75
        }
      },
      "85": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 291,
          column: 77
        }
      },
      "86": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 299,
          column: 9
        }
      },
      "87": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 295,
          column: 71
        }
      },
      "88": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 78
        }
      },
      "89": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 307,
          column: 9
        }
      },
      "90": {
        start: {
          line: 302,
          column: 34
        },
        end: {
          line: 302,
          column: 68
        }
      },
      "91": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 79
        }
      },
      "92": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 82
        }
      },
      "93": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 55
        }
      },
      "94": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 23
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 32
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 20
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 27
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 64
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 20
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 69
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 31
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 108
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 113
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 18
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 150
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 20
          },
          end: {
            line: 197,
            column: 5
          }
        },
        line: 154
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 203,
            column: 5
          }
        },
        loc: {
          start: {
            line: 203,
            column: 18
          },
          end: {
            line: 206,
            column: 5
          }
        },
        line: 203
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 25
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 210
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 22
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 216
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 217,
            column: 41
          },
          end: {
            line: 217,
            column: 42
          }
        },
        loc: {
          start: {
            line: 217,
            column: 50
          },
          end: {
            line: 217,
            column: 69
          }
        },
        line: 217
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 222,
            column: 5
          }
        },
        loc: {
          start: {
            line: 222,
            column: 23
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 222
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 224,
            column: 46
          },
          end: {
            line: 224,
            column: 47
          }
        },
        loc: {
          start: {
            line: 224,
            column: 55
          },
          end: {
            line: 231,
            column: 11
          }
        },
        line: 224
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 224,
            column: 77
          },
          end: {
            line: 224,
            column: 78
          }
        },
        loc: {
          start: {
            line: 224,
            column: 87
          },
          end: {
            line: 231,
            column: 9
          }
        },
        line: 224
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 236,
            column: 36
          },
          end: {
            line: 236,
            column: 37
          }
        },
        loc: {
          start: {
            line: 236,
            column: 41
          },
          end: {
            line: 236,
            column: 63
          }
        },
        line: 236
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 237,
            column: 38
          },
          end: {
            line: 237,
            column: 39
          }
        },
        loc: {
          start: {
            line: 237,
            column: 43
          },
          end: {
            line: 237,
            column: 67
          }
        },
        line: 237
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 238,
            column: 37
          },
          end: {
            line: 238,
            column: 38
          }
        },
        loc: {
          start: {
            line: 238,
            column: 42
          },
          end: {
            line: 238,
            column: 65
          }
        },
        line: 238
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 29
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 258
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 259,
            column: 39
          },
          end: {
            line: 259,
            column: 40
          }
        },
        loc: {
          start: {
            line: 259,
            column: 44
          },
          end: {
            line: 259,
            column: 59
          }
        },
        line: 259
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 26
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 268
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 269,
            column: 31
          },
          end: {
            line: 269,
            column: 32
          }
        },
        loc: {
          start: {
            line: 269,
            column: 41
          },
          end: {
            line: 272,
            column: 9
          }
        },
        line: 269
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 277,
            column: 4
          },
          end: {
            line: 277,
            column: 5
          }
        },
        loc: {
          start: {
            line: 277,
            column: 28
          },
          end: {
            line: 279,
            column: 5
          }
        },
        line: 277
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 283,
            column: 4
          },
          end: {
            line: 283,
            column: 5
          }
        },
        loc: {
          start: {
            line: 283,
            column: 29
          },
          end: {
            line: 311,
            column: 5
          }
        },
        line: 283
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 16
          },
          end: {
            line: 27,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 16
          },
          end: {
            line: 27,
            column: 21
          }
        }, {
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 50
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 55,
            column: 23
          },
          end: {
            line: 55,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 48
          },
          end: {
            line: 55,
            column: 61
          }
        }, {
          start: {
            line: 55,
            column: 64
          },
          end: {
            line: 55,
            column: 79
          }
        }],
        line: 55
      },
      "3": {
        loc: {
          start: {
            line: 74,
            column: 27
          },
          end: {
            line: 74,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 74,
            column: 52
          },
          end: {
            line: 74,
            column: 61
          }
        }, {
          start: {
            line: 74,
            column: 64
          },
          end: {
            line: 74,
            column: 75
          }
        }],
        line: 74
      },
      "4": {
        loc: {
          start: {
            line: 88,
            column: 23
          },
          end: {
            line: 88,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 88,
            column: 56
          },
          end: {
            line: 88,
            column: 86
          }
        }, {
          start: {
            line: 88,
            column: 89
          },
          end: {
            line: 88,
            column: 98
          }
        }],
        line: 88
      },
      "5": {
        loc: {
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 99,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 48
          },
          end: {
            line: 99,
            column: 61
          }
        }, {
          start: {
            line: 99,
            column: 64
          },
          end: {
            line: 99,
            column: 79
          }
        }],
        line: 99
      },
      "6": {
        loc: {
          start: {
            line: 119,
            column: 27
          },
          end: {
            line: 119,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 119,
            column: 38
          },
          end: {
            line: 119,
            column: 47
          }
        }, {
          start: {
            line: 119,
            column: 50
          },
          end: {
            line: 119,
            column: 61
          }
        }],
        line: 119
      },
      "7": {
        loc: {
          start: {
            line: 141,
            column: 23
          },
          end: {
            line: 141,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 48
          },
          end: {
            line: 141,
            column: 61
          }
        }, {
          start: {
            line: 141,
            column: 64
          },
          end: {
            line: 141,
            column: 79
          }
        }],
        line: 141
      },
      "8": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: 169,
            column: 17
          },
          end: {
            line: 171,
            column: 13
          }
        }],
        line: 166
      },
      "9": {
        loc: {
          start: {
            line: 169,
            column: 17
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 17
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "10": {
        loc: {
          start: {
            line: 194,
            column: 23
          },
          end: {
            line: 194,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 48
          },
          end: {
            line: 194,
            column: 61
          }
        }, {
          start: {
            line: 194,
            column: 64
          },
          end: {
            line: 194,
            column: 79
          }
        }],
        line: 194
      },
      "11": {
        loc: {
          start: {
            line: 230,
            column: 19
          },
          end: {
            line: 230,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 44
          },
          end: {
            line: 230,
            column: 57
          }
        }, {
          start: {
            line: 230,
            column: 60
          },
          end: {
            line: 230,
            column: 75
          }
        }],
        line: 230
      },
      "12": {
        loc: {
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: 244,
            column: 13
          },
          end: {
            line: 246,
            column: 9
          }
        }],
        line: 241
      },
      "13": {
        loc: {
          start: {
            line: 244,
            column: 13
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 13
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "14": {
        loc: {
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 8
          },
          end: {
            line: 262,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\health\\HealthCheckService.ts",
      mappings: "AAAA;;;;;GAKG;AAIH,OAAO,EAAE,oBAAoB,EAAE,MAAM,gCAAgC,CAAA;AA+BrE;;GAEG;AACH,MAAM,OAAO,mBAAmB;IAI9B,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAHlD,SAAI,GAAG,UAAU,CAAA;QACjB,gBAAW,GAAG,gCAAgC,CAAA;IAEO,CAAC;IAEtD,KAAK,CAAC,OAAO;QACX,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAE5B,IAAI,CAAC;YACH,6CAA6C;YAC7C,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc;iBAC9C,IAAI,CAAC,OAAO,CAAC;iBACb,MAAM,CAAC,OAAO,CAAC;iBACf,KAAK,CAAC,CAAC,CAAC;iBACR,MAAM,EAAE,CAAA;YAEX,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YAEvC,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBACvC,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,MAAM,EAAE,WAAW;oBACnB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,QAAQ;oBACR,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,KAAK,EAAE,KAAK,CAAC,OAAO;oBACpB,OAAO,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC,IAAI,EAAE;iBACnC,CAAA;YACH,CAAC;YAED,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,SAAS;gBACjB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ;gBACR,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,OAAO,EAAE,EAAE,YAAY,EAAE,GAAG,QAAQ,IAAI,EAAE;aAC3C,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YACvC,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,WAAW;gBACnB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ;gBACR,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAA;QACH,CAAC;IACH,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,oBAAoB;IAI/B,YAAoB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QAHxC,SAAI,GAAG,WAAW,CAAA;QAClB,gBAAW,GAAG,gCAAgC,CAAA;IAEH,CAAC;IAE5C,KAAK,CAAC,OAAO;QACX,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAE5B,IAAI,CAAC;YACH,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAA;YACrD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YAEvC,MAAM,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAA;YAE/D,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM;gBACN,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ;gBACR,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,OAAO,EAAE;oBACP,aAAa,EAAE,YAAY,CAAC,aAAa;oBACzC,eAAe,EAAE,YAAY,CAAC,eAAe;oBAC7C,mBAAmB,EAAE,YAAY,CAAC,mBAAmB;oBACrD,gBAAgB,EAAE,YAAY,CAAC,gBAAgB;oBAC/C,MAAM,EAAE,YAAY,CAAC,MAAM;iBAC5B;gBACD,KAAK,EAAE,YAAY,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;aACnF,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YACvC,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,WAAW;gBACnB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ;gBACR,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAA;QACH,CAAC;IACH,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,wBAAwB;IAInC,YAAoB,aAAmC;QAAnC,kBAAa,GAAb,aAAa,CAAsB;QAHvD,SAAI,GAAG,eAAe,CAAA;QACtB,gBAAW,GAAG,2BAA2B,CAAA;IAEiB,CAAC;IAE3D,KAAK,CAAC,OAAO;QACX,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAE5B,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAA;YAC3D,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,CAAA;YAC7C,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YAEvC,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAA;YAEjD,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM;gBACN,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ;gBACR,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,OAAO,EAAE;oBACP,WAAW,EAAE,MAAM,CAAC,WAAW;oBAC/B,OAAO,EAAE,MAAM,CAAC,OAAO;oBACvB,QAAQ;iBACT;aACF,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YACvC,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,WAAW;gBACnB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ;gBACR,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAA;QACH,CAAC;IACH,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,iBAAiB;IAA9B;QACE,SAAI,GAAG,QAAQ,CAAA;QACf,gBAAW,GAAG,qBAAqB,CAAA;IAiDrC,CAAC;IA/CC,KAAK,CAAC,OAAO;QACX,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAE5B,IAAI,CAAC;YACH,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;YACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YAEvC,sBAAsB;YACtB,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,CAAA;YACjE,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,SAAS,GAAG,IAAI,GAAG,IAAI,CAAC,CAAA;YACnE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAA;YAEvD,+CAA+C;YAC/C,MAAM,gBAAgB,GAAG,CAAC,WAAW,CAAC,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,GAAG,GAAG,CAAA;YAC7E,IAAI,MAAM,GAAyC,SAAS,CAAA;YAE5D,IAAI,gBAAgB,GAAG,EAAE,EAAE,CAAC;gBAC1B,MAAM,GAAG,WAAW,CAAA;YACtB,CAAC;iBAAM,IAAI,gBAAgB,GAAG,EAAE,EAAE,CAAC;gBACjC,MAAM,GAAG,UAAU,CAAA;YACrB,CAAC;YAED,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM;gBACN,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ;gBACR,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,OAAO,EAAE;oBACP,UAAU;oBACV,WAAW;oBACX,KAAK;oBACL,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;iBAC/C;aACF,CAAA;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;YACvC,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,MAAM,EAAE,WAAW;gBACnB,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,QAAQ;gBACR,SAAS,EAAE,IAAI,IAAI,EAAE;gBACrB,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;aAChE,CAAA;QACH,CAAC;IACH,CAAC;CACF;AAED;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAG7B;QAFQ,WAAM,GAAkB,EAAE,CAAA;QAGhC,IAAI,CAAC,qBAAqB,EAAE,CAAA;IAC9B,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,KAAkB;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACzB,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,IAAY;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAA;IAChE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACd,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QAE5B,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAC5C,KAAK,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAC9B,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,MAAM,EAAE,WAAoB;YAC5B,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,QAAQ,EAAE,CAAC;YACX,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;SAChE,CAAC,CAAC,CACJ,CAAA;QAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;QAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAA;QAEvC,MAAM,OAAO,GAAG;YACd,KAAK,EAAE,OAAO,CAAC,MAAM;YACrB,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,MAAM;YAC3D,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,MAAM;YAC/D,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,UAAU,CAAC,CAAC,MAAM;SAC9D,CAAA;QAED,IAAI,aAAa,GAAyC,SAAS,CAAA;QACnE,IAAI,OAAO,CAAC,SAAS,GAAG,CAAC,EAAE,CAAC;YAC1B,aAAa,GAAG,WAAW,CAAA;QAC7B,CAAC;aAAM,IAAI,OAAO,CAAC,QAAQ,GAAG,CAAC,EAAE,CAAC;YAChC,aAAa,GAAG,UAAU,CAAA;QAC5B,CAAC;QAED,OAAO;YACL,MAAM,EAAE,aAAa;YACrB,SAAS,EAAE,IAAI,IAAI,EAAE;YACrB,QAAQ;YACR,MAAM,EAAE,OAAO;YACf,OAAO;SACR,CAAA;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,IAAY;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAA;QACpD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,IAAI,CAAA;QACb,CAAC;QAED,OAAO,KAAK,CAAC,OAAO,EAAE,CAAA;IACxB,CAAC;IAED;;OAEG;IACH,mBAAmB;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YAC/B,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,WAAW,EAAE,KAAK,CAAC,WAAW;SAC/B,CAAC,CAAC,CAAA;IACL,CAAC;IAED;;OAEG;IACK,qBAAqB;QAC3B,6EAA6E;IAC/E,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,MAAM,CAAC,SAAoB;QAChC,MAAM,OAAO,GAAG,IAAI,kBAAkB,EAAE,CAAA;QAExC,IAAI,CAAC;YACH,iCAAiC;YACjC,MAAM,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAA;YAC1D,OAAO,CAAC,aAAa,CAAC,IAAI,mBAAmB,CAAC,cAAc,CAAC,CAAC,CAAA;QAChE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAA;QAClE,CAAC;QAED,IAAI,CAAC;YACH,kCAAkC;YAClC,OAAO,CAAC,aAAa,CAAC,IAAI,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAA;QAC5D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAA;QACnE,CAAC;QAED,IAAI,CAAC;YACH,sCAAsC;YACtC,MAAM,aAAa,GAAG,oBAAoB,CAAC,WAAW,EAAE,CAAA;YACxD,OAAO,CAAC,aAAa,CAAC,IAAI,wBAAwB,CAAC,aAAa,CAAC,CAAC,CAAA;QACpE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,IAAI,CAAC,gDAAgD,EAAE,KAAK,CAAC,CAAA;QACvE,CAAC;QAED,+BAA+B;QAC/B,OAAO,CAAC,aAAa,CAAC,IAAI,iBAAiB,EAAE,CAAC,CAAA;QAE9C,OAAO,OAAO,CAAA;IAChB,CAAC;CACF",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\health\\HealthCheckService.ts"],
      sourcesContent: ["/**\n * Health Check Service\n * \n * Provides health monitoring for application dependencies and services.\n * Implements standard health check patterns for monitoring and alerting.\n */\n\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { Container } from '../di/Container'\nimport { ConfigurationManager } from '../config/ConfigurationManager'\n\nexport interface HealthCheckResult {\n  name: string\n  status: 'healthy' | 'unhealthy' | 'degraded'\n  description: string\n  duration: number\n  timestamp: Date\n  details?: Record<string, any>\n  error?: string\n}\n\nexport interface SystemHealthStatus {\n  status: 'healthy' | 'unhealthy' | 'degraded'\n  timestamp: Date\n  duration: number\n  checks: HealthCheckResult[]\n  summary: {\n    total: number\n    healthy: number\n    unhealthy: number\n    degraded: number\n  }\n}\n\nexport interface HealthCheck {\n  name: string\n  description: string\n  execute(): Promise<HealthCheckResult>\n}\n\n/**\n * Database Health Check\n */\nexport class DatabaseHealthCheck implements HealthCheck {\n  name = 'database'\n  description = 'Supabase database connectivity'\n\n  constructor(private supabaseClient: SupabaseClient) {}\n\n  async execute(): Promise<HealthCheckResult> {\n    const startTime = Date.now()\n    \n    try {\n      // Simple query to test database connectivity\n      const { data, error } = await this.supabaseClient\n        .from('users')\n        .select('count')\n        .limit(1)\n        .single()\n\n      const duration = Date.now() - startTime\n\n      if (error && error.code !== 'PGRST116') {\n        return {\n          name: this.name,\n          status: 'unhealthy',\n          description: this.description,\n          duration,\n          timestamp: new Date(),\n          error: error.message,\n          details: { errorCode: error.code }\n        }\n      }\n\n      return {\n        name: this.name,\n        status: 'healthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        details: { responseTime: `${duration}ms` }\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      return {\n        name: this.name,\n        status: 'unhealthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n}\n\n/**\n * Container Health Check\n */\nexport class ContainerHealthCheck implements HealthCheck {\n  name = 'container'\n  description = 'Dependency injection container'\n\n  constructor(private container: Container) {}\n\n  async execute(): Promise<HealthCheckResult> {\n    const startTime = Date.now()\n    \n    try {\n      const healthStatus = this.container.getHealthStatus()\n      const duration = Date.now() - startTime\n\n      const status = healthStatus.isHealthy ? 'healthy' : 'unhealthy'\n\n      return {\n        name: this.name,\n        status,\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        details: {\n          servicesCount: healthStatus.servicesCount,\n          singletonsCount: healthStatus.singletonsCount,\n          scopedServicesCount: healthStatus.scopedServicesCount,\n          totalResolutions: healthStatus.totalResolutions,\n          errors: healthStatus.errors\n        },\n        error: healthStatus.errors.length > 0 ? healthStatus.errors.join(', ') : undefined\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      return {\n        name: this.name,\n        status: 'unhealthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n}\n\n/**\n * Configuration Health Check\n */\nexport class ConfigurationHealthCheck implements HealthCheck {\n  name = 'configuration'\n  description = 'Application configuration'\n\n  constructor(private configManager: ConfigurationManager) {}\n\n  async execute(): Promise<HealthCheckResult> {\n    const startTime = Date.now()\n    \n    try {\n      const isLoaded = this.configManager.isConfigurationLoaded()\n      const config = this.configManager.getConfig()\n      const duration = Date.now() - startTime\n\n      const status = isLoaded ? 'healthy' : 'unhealthy'\n\n      return {\n        name: this.name,\n        status,\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        details: {\n          environment: config.environment,\n          version: config.version,\n          isLoaded\n        }\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      return {\n        name: this.name,\n        status: 'unhealthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n}\n\n/**\n * Memory Health Check\n */\nexport class MemoryHealthCheck implements HealthCheck {\n  name = 'memory'\n  description = 'System memory usage'\n\n  async execute(): Promise<HealthCheckResult> {\n    const startTime = Date.now()\n    \n    try {\n      const memoryUsage = process.memoryUsage()\n      const duration = Date.now() - startTime\n\n      // Convert bytes to MB\n      const heapUsedMB = Math.round(memoryUsage.heapUsed / 1024 / 1024)\n      const heapTotalMB = Math.round(memoryUsage.heapTotal / 1024 / 1024)\n      const rssMB = Math.round(memoryUsage.rss / 1024 / 1024)\n\n      // Consider unhealthy if heap usage is over 80%\n      const heapUsagePercent = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100\n      let status: 'healthy' | 'unhealthy' | 'degraded' = 'healthy'\n\n      if (heapUsagePercent > 90) {\n        status = 'unhealthy'\n      } else if (heapUsagePercent > 80) {\n        status = 'degraded'\n      }\n\n      return {\n        name: this.name,\n        status,\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        details: {\n          heapUsedMB,\n          heapTotalMB,\n          rssMB,\n          heapUsagePercent: Math.round(heapUsagePercent)\n        }\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      return {\n        name: this.name,\n        status: 'unhealthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n}\n\n/**\n * Health Check Service\n */\nexport class HealthCheckService {\n  private checks: HealthCheck[] = []\n\n  constructor() {\n    this.registerDefaultChecks()\n  }\n\n  /**\n   * Register a health check\n   */\n  registerCheck(check: HealthCheck): void {\n    this.checks.push(check)\n  }\n\n  /**\n   * Remove a health check\n   */\n  removeCheck(name: string): void {\n    this.checks = this.checks.filter(check => check.name !== name)\n  }\n\n  /**\n   * Execute all health checks\n   */\n  async executeAll(): Promise<SystemHealthStatus> {\n    const startTime = Date.now()\n    \n    const checkPromises = this.checks.map(check => \n      check.execute().catch(error => ({\n        name: check.name,\n        status: 'unhealthy' as const,\n        description: check.description,\n        duration: 0,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }))\n    )\n\n    const results = await Promise.all(checkPromises)\n    const duration = Date.now() - startTime\n\n    const summary = {\n      total: results.length,\n      healthy: results.filter(r => r.status === 'healthy').length,\n      unhealthy: results.filter(r => r.status === 'unhealthy').length,\n      degraded: results.filter(r => r.status === 'degraded').length\n    }\n\n    let overallStatus: 'healthy' | 'unhealthy' | 'degraded' = 'healthy'\n    if (summary.unhealthy > 0) {\n      overallStatus = 'unhealthy'\n    } else if (summary.degraded > 0) {\n      overallStatus = 'degraded'\n    }\n\n    return {\n      status: overallStatus,\n      timestamp: new Date(),\n      duration,\n      checks: results,\n      summary\n    }\n  }\n\n  /**\n   * Execute a specific health check\n   */\n  async executeCheck(name: string): Promise<HealthCheckResult | null> {\n    const check = this.checks.find(c => c.name === name)\n    if (!check) {\n      return null\n    }\n\n    return check.execute()\n  }\n\n  /**\n   * Get all registered checks\n   */\n  getRegisteredChecks(): Array<{ name: string; description: string }> {\n    return this.checks.map(check => ({\n      name: check.name,\n      description: check.description\n    }))\n  }\n\n  /**\n   * Register default health checks\n   */\n  private registerDefaultChecks(): void {\n    // These will be registered when the service is initialized with dependencies\n  }\n\n  /**\n   * Initialize with dependencies\n   */\n  static create(container: Container): HealthCheckService {\n    const service = new HealthCheckService()\n    \n    try {\n      // Register database health check\n      const supabaseClient = container.resolve('supabaseClient')\n      service.registerCheck(new DatabaseHealthCheck(supabaseClient))\n    } catch (error) {\n      console.warn('Could not register database health check:', error)\n    }\n\n    try {\n      // Register container health check\n      service.registerCheck(new ContainerHealthCheck(container))\n    } catch (error) {\n      console.warn('Could not register container health check:', error)\n    }\n\n    try {\n      // Register configuration health check\n      const configManager = ConfigurationManager.getInstance()\n      service.registerCheck(new ConfigurationHealthCheck(configManager))\n    } catch (error) {\n      console.warn('Could not register configuration health check:', error)\n    }\n\n    // Register memory health check\n    service.registerCheck(new MemoryHealthCheck())\n\n    return service\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c8316062a2d784bad6a8b0ff4f7d2fe849bc447c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1hicdpsrr3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1hicdpsrr3();
/**
 * Health Check Service
 *
 * Provides health monitoring for application dependencies and services.
 * Implements standard health check patterns for monitoring and alerting.
 */
import { ConfigurationManager } from '../config/ConfigurationManager';
/**
 * Database Health Check
 */
export class DatabaseHealthCheck {
  constructor(supabaseClient) {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[0]++;
    cov_1hicdpsrr3().s[0]++;
    this.supabaseClient = supabaseClient;
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[1]++;
    this.name = 'database';
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[2]++;
    this.description = 'Supabase database connectivity';
  }
  async execute() {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[1]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[3]++, Date.now());
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[4]++;
    try {
      // Simple query to test database connectivity
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[5]++, await this.supabaseClient.from('users').select('count').limit(1).single());
      const duration =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[6]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[7]++;
      if (
      /* istanbul ignore next */
      (cov_1hicdpsrr3().b[1][0]++, error) &&
      /* istanbul ignore next */
      (cov_1hicdpsrr3().b[1][1]++, error.code !== 'PGRST116')) {
        /* istanbul ignore next */
        cov_1hicdpsrr3().b[0][0]++;
        cov_1hicdpsrr3().s[8]++;
        return {
          name: this.name,
          status: 'unhealthy',
          description: this.description,
          duration,
          timestamp: new Date(),
          error: error.message,
          details: {
            errorCode: error.code
          }
        };
      } else
      /* istanbul ignore next */
      {
        cov_1hicdpsrr3().b[0][1]++;
      }
      cov_1hicdpsrr3().s[9]++;
      return {
        name: this.name,
        status: 'healthy',
        description: this.description,
        duration,
        timestamp: new Date(),
        details: {
          responseTime: `${duration}ms`
        }
      };
    } catch (error) {
      const duration =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[10]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[11]++;
      return {
        name: this.name,
        status: 'unhealthy',
        description: this.description,
        duration,
        timestamp: new Date(),
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[2][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[2][1]++, 'Unknown error')
      };
    }
  }
}
/**
 * Container Health Check
 */
export class ContainerHealthCheck {
  constructor(container) {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[2]++;
    cov_1hicdpsrr3().s[12]++;
    this.container = container;
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[13]++;
    this.name = 'container';
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[14]++;
    this.description = 'Dependency injection container';
  }
  async execute() {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[3]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[15]++, Date.now());
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[16]++;
    try {
      const healthStatus =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[17]++, this.container.getHealthStatus());
      const duration =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[18]++, Date.now() - startTime);
      const status =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[19]++, healthStatus.isHealthy ?
      /* istanbul ignore next */
      (cov_1hicdpsrr3().b[3][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_1hicdpsrr3().b[3][1]++, 'unhealthy'));
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[20]++;
      return {
        name: this.name,
        status,
        description: this.description,
        duration,
        timestamp: new Date(),
        details: {
          servicesCount: healthStatus.servicesCount,
          singletonsCount: healthStatus.singletonsCount,
          scopedServicesCount: healthStatus.scopedServicesCount,
          totalResolutions: healthStatus.totalResolutions,
          errors: healthStatus.errors
        },
        error: healthStatus.errors.length > 0 ?
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[4][0]++, healthStatus.errors.join(', ')) :
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[4][1]++, undefined)
      };
    } catch (error) {
      const duration =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[21]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[22]++;
      return {
        name: this.name,
        status: 'unhealthy',
        description: this.description,
        duration,
        timestamp: new Date(),
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[5][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[5][1]++, 'Unknown error')
      };
    }
  }
}
/**
 * Configuration Health Check
 */
export class ConfigurationHealthCheck {
  constructor(configManager) {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[4]++;
    cov_1hicdpsrr3().s[23]++;
    this.configManager = configManager;
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[24]++;
    this.name = 'configuration';
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[25]++;
    this.description = 'Application configuration';
  }
  async execute() {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[5]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[26]++, Date.now());
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[27]++;
    try {
      const isLoaded =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[28]++, this.configManager.isConfigurationLoaded());
      const config =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[29]++, this.configManager.getConfig());
      const duration =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[30]++, Date.now() - startTime);
      const status =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[31]++, isLoaded ?
      /* istanbul ignore next */
      (cov_1hicdpsrr3().b[6][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_1hicdpsrr3().b[6][1]++, 'unhealthy'));
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[32]++;
      return {
        name: this.name,
        status,
        description: this.description,
        duration,
        timestamp: new Date(),
        details: {
          environment: config.environment,
          version: config.version,
          isLoaded
        }
      };
    } catch (error) {
      const duration =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[33]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[34]++;
      return {
        name: this.name,
        status: 'unhealthy',
        description: this.description,
        duration,
        timestamp: new Date(),
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[7][1]++, 'Unknown error')
      };
    }
  }
}
/**
 * Memory Health Check
 */
export class MemoryHealthCheck {
  constructor() {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[6]++;
    cov_1hicdpsrr3().s[35]++;
    this.name = 'memory';
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[36]++;
    this.description = 'System memory usage';
  }
  async execute() {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[7]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[37]++, Date.now());
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[38]++;
    try {
      const memoryUsage =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[39]++, process.memoryUsage());
      const duration =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[40]++, Date.now() - startTime);
      // Convert bytes to MB
      const heapUsedMB =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[41]++, Math.round(memoryUsage.heapUsed / 1024 / 1024));
      const heapTotalMB =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[42]++, Math.round(memoryUsage.heapTotal / 1024 / 1024));
      const rssMB =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[43]++, Math.round(memoryUsage.rss / 1024 / 1024));
      // Consider unhealthy if heap usage is over 80%
      const heapUsagePercent =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[44]++, memoryUsage.heapUsed / memoryUsage.heapTotal * 100);
      let status =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[45]++, 'healthy');
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[46]++;
      if (heapUsagePercent > 90) {
        /* istanbul ignore next */
        cov_1hicdpsrr3().b[8][0]++;
        cov_1hicdpsrr3().s[47]++;
        status = 'unhealthy';
      } else {
        /* istanbul ignore next */
        cov_1hicdpsrr3().b[8][1]++;
        cov_1hicdpsrr3().s[48]++;
        if (heapUsagePercent > 80) {
          /* istanbul ignore next */
          cov_1hicdpsrr3().b[9][0]++;
          cov_1hicdpsrr3().s[49]++;
          status = 'degraded';
        } else
        /* istanbul ignore next */
        {
          cov_1hicdpsrr3().b[9][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[50]++;
      return {
        name: this.name,
        status,
        description: this.description,
        duration,
        timestamp: new Date(),
        details: {
          heapUsedMB,
          heapTotalMB,
          rssMB,
          heapUsagePercent: Math.round(heapUsagePercent)
        }
      };
    } catch (error) {
      const duration =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[51]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[52]++;
      return {
        name: this.name,
        status: 'unhealthy',
        description: this.description,
        duration,
        timestamp: new Date(),
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[10][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1hicdpsrr3().b[10][1]++, 'Unknown error')
      };
    }
  }
}
/**
 * Health Check Service
 */
export class HealthCheckService {
  constructor() {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[8]++;
    cov_1hicdpsrr3().s[53]++;
    this.checks = [];
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[54]++;
    this.registerDefaultChecks();
  }
  /**
   * Register a health check
   */
  registerCheck(check) {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[9]++;
    cov_1hicdpsrr3().s[55]++;
    this.checks.push(check);
  }
  /**
   * Remove a health check
   */
  removeCheck(name) {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[10]++;
    cov_1hicdpsrr3().s[56]++;
    this.checks = this.checks.filter(check => {
      /* istanbul ignore next */
      cov_1hicdpsrr3().f[11]++;
      cov_1hicdpsrr3().s[57]++;
      return check.name !== name;
    });
  }
  /**
   * Execute all health checks
   */
  async executeAll() {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[12]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[58]++, Date.now());
    const checkPromises =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[59]++, this.checks.map(check => {
      /* istanbul ignore next */
      cov_1hicdpsrr3().f[13]++;
      cov_1hicdpsrr3().s[60]++;
      return check.execute().catch(error => {
        /* istanbul ignore next */
        cov_1hicdpsrr3().f[14]++;
        cov_1hicdpsrr3().s[61]++;
        return {
          name: check.name,
          status: 'unhealthy',
          description: check.description,
          duration: 0,
          timestamp: new Date(),
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_1hicdpsrr3().b[11][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1hicdpsrr3().b[11][1]++, 'Unknown error')
        };
      });
    }));
    const results =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[62]++, await Promise.all(checkPromises));
    const duration =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[63]++, Date.now() - startTime);
    const summary =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[64]++, {
      total: results.length,
      healthy: results.filter(r => {
        /* istanbul ignore next */
        cov_1hicdpsrr3().f[15]++;
        cov_1hicdpsrr3().s[65]++;
        return r.status === 'healthy';
      }).length,
      unhealthy: results.filter(r => {
        /* istanbul ignore next */
        cov_1hicdpsrr3().f[16]++;
        cov_1hicdpsrr3().s[66]++;
        return r.status === 'unhealthy';
      }).length,
      degraded: results.filter(r => {
        /* istanbul ignore next */
        cov_1hicdpsrr3().f[17]++;
        cov_1hicdpsrr3().s[67]++;
        return r.status === 'degraded';
      }).length
    });
    let overallStatus =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[68]++, 'healthy');
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[69]++;
    if (summary.unhealthy > 0) {
      /* istanbul ignore next */
      cov_1hicdpsrr3().b[12][0]++;
      cov_1hicdpsrr3().s[70]++;
      overallStatus = 'unhealthy';
    } else {
      /* istanbul ignore next */
      cov_1hicdpsrr3().b[12][1]++;
      cov_1hicdpsrr3().s[71]++;
      if (summary.degraded > 0) {
        /* istanbul ignore next */
        cov_1hicdpsrr3().b[13][0]++;
        cov_1hicdpsrr3().s[72]++;
        overallStatus = 'degraded';
      } else
      /* istanbul ignore next */
      {
        cov_1hicdpsrr3().b[13][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[73]++;
    return {
      status: overallStatus,
      timestamp: new Date(),
      duration,
      checks: results,
      summary
    };
  }
  /**
   * Execute a specific health check
   */
  async executeCheck(name) {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[18]++;
    const check =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[74]++, this.checks.find(c => {
      /* istanbul ignore next */
      cov_1hicdpsrr3().f[19]++;
      cov_1hicdpsrr3().s[75]++;
      return c.name === name;
    }));
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[76]++;
    if (!check) {
      /* istanbul ignore next */
      cov_1hicdpsrr3().b[14][0]++;
      cov_1hicdpsrr3().s[77]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1hicdpsrr3().b[14][1]++;
    }
    cov_1hicdpsrr3().s[78]++;
    return check.execute();
  }
  /**
   * Get all registered checks
   */
  getRegisteredChecks() {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[20]++;
    cov_1hicdpsrr3().s[79]++;
    return this.checks.map(check => {
      /* istanbul ignore next */
      cov_1hicdpsrr3().f[21]++;
      cov_1hicdpsrr3().s[80]++;
      return {
        name: check.name,
        description: check.description
      };
    });
  }
  /**
   * Register default health checks
   */
  registerDefaultChecks() {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[22]++;
  } // These will be registered when the service is initialized with dependencies
  /**
   * Initialize with dependencies
   */
  static create(container) {
    /* istanbul ignore next */
    cov_1hicdpsrr3().f[23]++;
    const service =
    /* istanbul ignore next */
    (cov_1hicdpsrr3().s[81]++, new HealthCheckService());
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[82]++;
    try {
      // Register database health check
      const supabaseClient =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[83]++, container.resolve('supabaseClient'));
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[84]++;
      service.registerCheck(new DatabaseHealthCheck(supabaseClient));
    } catch (error) {
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[85]++;
      console.warn('Could not register database health check:', error);
    }
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[86]++;
    try {
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[87]++;
      // Register container health check
      service.registerCheck(new ContainerHealthCheck(container));
    } catch (error) {
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[88]++;
      console.warn('Could not register container health check:', error);
    }
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[89]++;
    try {
      // Register configuration health check
      const configManager =
      /* istanbul ignore next */
      (cov_1hicdpsrr3().s[90]++, ConfigurationManager.getInstance());
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[91]++;
      service.registerCheck(new ConfigurationHealthCheck(configManager));
    } catch (error) {
      /* istanbul ignore next */
      cov_1hicdpsrr3().s[92]++;
      console.warn('Could not register configuration health check:', error);
    }
    // Register memory health check
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[93]++;
    service.registerCheck(new MemoryHealthCheck());
    /* istanbul ignore next */
    cov_1hicdpsrr3().s[94]++;
    return service;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,