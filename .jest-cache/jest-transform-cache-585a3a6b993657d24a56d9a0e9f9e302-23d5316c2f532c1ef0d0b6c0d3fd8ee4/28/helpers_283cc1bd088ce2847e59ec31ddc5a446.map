{"version":3,"names":["NextResponse","validateRequestBody","request","schema","cov_v4ki3ygih","f","s","body","json","result","safeParse","success","b","errorMessage","error","issues","map","err","path","join","message","data","_a","validateSearchParams","searchParams","URL","url","params","forEach","value","key","test","parseInt","parseFloat","validateRouteParams","createValidationErrorResponse","code","status","withValidation","bodySchema","paramsSchema","handler","args","validatedData","includes","method","bodyValidation","length","paramsValidation"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\validation\\helpers.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { z } from 'zod';\n\nexport interface ValidationResult<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\n/**\n * Validate request body against a Zod schema\n */\nexport async function validateRequestBody<T>(\n  request: NextRequest,\n  schema: z.ZodSchema<T>\n): Promise<ValidationResult<T>> {\n  try {\n    const body = await request.json();\n    const result = schema.safeParse(body);\n\n    if (!result.success) {\n      const errorMessage = result.error.issues\n        .map((err: any) => `${err.path.join('.')}: ${err.message}`)\n        .join(', ');\n      \n      return {\n        success: false,\n        error: `Validation error: ${errorMessage}`\n      };\n    }\n\n    return {\n      success: true,\n      data: result.data\n    };\n  } catch {\n    return {\n      success: false,\n      error: 'Invalid JSON in request body'\n    };\n  }\n}\n\n/**\n * Validate URL search parameters against a Zod schema\n */\nexport function validateSearchParams<T>(\n  request: NextRequest,\n  schema: z.ZodSchema<T>\n): ValidationResult<T> {\n  try {\n    const { searchParams } = new URL(request.url);\n    const params: Record<string, unknown> = {};\n\n    // Convert search params to object\n    searchParams.forEach((value, key) => {\n      // Try to parse numbers\n      if (/^\\d+$/.test(value)) {\n        params[key] = parseInt(value, 10);\n      } else if (/^\\d+\\.\\d+$/.test(value)) {\n        params[key] = parseFloat(value);\n      } else {\n        params[key] = value;\n      }\n    });\n\n    const result = schema.safeParse(params);\n\n    if (!result.success) {\n      const errorMessage = result.error.issues\n        .map((err: any) => `${err.path.join('.')}: ${err.message}`)\n        .join(', ');\n      \n      return {\n        success: false,\n        error: `Validation error: ${errorMessage}`\n      };\n    }\n\n    return {\n      success: true,\n      data: result.data\n    };\n  } catch {\n    return {\n      success: false,\n      error: 'Invalid search parameters'\n    };\n  }\n}\n\n/**\n * Validate route parameters against a Zod schema\n */\nexport function validateRouteParams<T>(\n  params: Record<string, string>,\n  schema: z.ZodSchema<T>\n): ValidationResult<T> {\n  try {\n    const result = schema.safeParse(params);\n\n    if (!result.success) {\n      const errorMessage = result.error.issues\n        .map((err: any) => `${err.path.join('.')}: ${err.message}`)\n        .join(', ');\n      \n      return {\n        success: false,\n        error: `Validation error: ${errorMessage}`\n      };\n    }\n\n    return {\n      success: true,\n      data: result.data\n    };\n  } catch {\n    return {\n      success: false,\n      error: 'Invalid route parameters'\n    };\n  }\n}\n\n/**\n * Create a validation error response\n */\nexport function createValidationErrorResponse(error: string) {\n  return NextResponse.json(\n    {\n      success: false,\n      error,\n      code: 'VALIDATION_ERROR'\n    },\n    { status: 400 }\n  );\n}\n\n/**\n * Middleware wrapper for request validation\n */\nexport function withValidation<TBody, TParams = unknown>(\n  bodySchema?: z.ZodSchema<TBody>,\n  paramsSchema?: z.ZodSchema<TParams>\n) {\n  return function <T extends unknown[]>(\n    handler: (\n      request: NextRequest,\n      validatedData: { body?: TBody; params?: TParams },\n      ...args: T\n    ) => Promise<NextResponse>\n  ) {\n    return async (request: NextRequest, ...args: T): Promise<NextResponse> => {\n      const validatedData: { body?: TBody; params?: TParams } = {};\n\n      // Validate body if schema provided and method requires body\n      if (bodySchema && ['POST', 'PUT', 'PATCH'].includes(request.method)) {\n        const bodyValidation = await validateRequestBody(request, bodySchema);\n        if (!bodyValidation.success) {\n          return createValidationErrorResponse(bodyValidation.error!);\n        }\n        validatedData.body = bodyValidation.data as TBody;\n      }\n\n      // Validate params if schema provided\n      if (paramsSchema && args.length > 0) {\n        const params = args[0] as { params: Record<string, string> };\n        if (params?.params) {\n          const paramsValidation = validateRouteParams(params.params, paramsSchema);\n          if (!paramsValidation.success) {\n            return createValidationErrorResponse(paramsValidation.error!);\n          }\n          validatedData.params = paramsValidation.data as TParams;\n        }\n      }\n\n      return handler(request, validatedData, ...args);\n    };\n  };\n}\n"],"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","ignoreList":[]}