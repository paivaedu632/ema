{"version":3,"names":["cov_2gcn5eaqie","actualCoverage","Money","WalletId","Wallet","constructor","id","userId","currency","availableBalance","reservedBalance","createdAt","updatedAt","f","s","equals","b","Error","_id","_userId","_currency","_availableBalance","_reservedBalance","_createdAt","_updatedAt","create","now","Date","generate","zero","fromSnapshot","snapshot","totalBalance","add","deposit","amount","ensureSameCurrency","touch","withdraw","hasSufficientAvailableBalance","InsufficientBalanceError","subtract","reserveFunds","releaseReservedFunds","hasSufficientReservedBalance","InsufficientReservedBalanceError","consumeReservedFunds","isGreaterThanOrEqual","hasSufficientTotalBalance","isEmpty","isZero","toSnapshot","code","requestedAmount","availableAmount","toString","name","reservedAmount"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\entities\\Wallet.ts"],"sourcesContent":["/**\n * Wallet Domain Entity\n * \n * Represents a user's wallet for a specific currency.\n * Contains business logic for balance management, reservations, and transactions.\n */\n\nimport { Money } from '../value-objects/Money'\nimport { Currency } from '../value-objects/Currency'\nimport { WalletId, UserId } from '../value-objects/EntityId'\n\nexport interface WalletSnapshot {\n  id: WalletId\n  userId: UserId\n  currency: Currency\n  availableBalance: Money\n  reservedBalance: Money\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport class Wallet {\n  private readonly _id: WalletId\n  private readonly _userId: UserId\n  private readonly _currency: Currency\n  private _availableBalance: Money\n  private _reservedBalance: Money\n  private readonly _createdAt: Date\n  private _updatedAt: Date\n\n  constructor(\n    id: WalletId,\n    userId: UserId,\n    currency: Currency,\n    availableBalance: Money,\n    reservedBalance: Money,\n    createdAt: Date,\n    updatedAt: Date\n  ) {\n    // Validate that money amounts match wallet currency\n    if (!availableBalance.currency.equals(currency)) {\n      throw new Error('Available balance currency must match wallet currency')\n    }\n    if (!reservedBalance.currency.equals(currency)) {\n      throw new Error('Reserved balance currency must match wallet currency')\n    }\n\n    this._id = id\n    this._userId = userId\n    this._currency = currency\n    this._availableBalance = availableBalance\n    this._reservedBalance = reservedBalance\n    this._createdAt = createdAt\n    this._updatedAt = updatedAt\n  }\n\n  /**\n   * Create a new wallet with zero balance\n   */\n  static create(userId: UserId, currency: Currency): Wallet {\n    const now = new Date()\n    return new Wallet(\n      WalletId.generate(),\n      userId,\n      currency,\n      Money.zero(currency),\n      Money.zero(currency),\n      now,\n      now\n    )\n  }\n\n  /**\n   * Restore wallet from snapshot (for repository pattern)\n   */\n  static fromSnapshot(snapshot: WalletSnapshot): Wallet {\n    return new Wallet(\n      snapshot.id,\n      snapshot.userId,\n      snapshot.currency,\n      snapshot.availableBalance,\n      snapshot.reservedBalance,\n      snapshot.createdAt,\n      snapshot.updatedAt\n    )\n  }\n\n  // Getters\n  get id(): WalletId {\n    return this._id\n  }\n\n  get userId(): UserId {\n    return this._userId\n  }\n\n  get currency(): Currency {\n    return this._currency\n  }\n\n  get availableBalance(): Money {\n    return this._availableBalance\n  }\n\n  get reservedBalance(): Money {\n    return this._reservedBalance\n  }\n\n  get totalBalance(): Money {\n    return this._availableBalance.add(this._reservedBalance)\n  }\n\n  get createdAt(): Date {\n    return this._createdAt\n  }\n\n  get updatedAt(): Date {\n    return this._updatedAt\n  }\n\n  /**\n   * Deposit money into the wallet\n   */\n  deposit(amount: Money): void {\n    this.ensureSameCurrency(amount)\n    this._availableBalance = this._availableBalance.add(amount)\n    this.touch()\n  }\n\n  /**\n   * Withdraw money from available balance\n   */\n  withdraw(amount: Money): void {\n    this.ensureSameCurrency(amount)\n    \n    if (!this.hasSufficientAvailableBalance(amount)) {\n      throw new InsufficientBalanceError(\n        this._currency,\n        amount,\n        this._availableBalance\n      )\n    }\n    \n    this._availableBalance = this._availableBalance.subtract(amount)\n    this.touch()\n  }\n\n  /**\n   * Reserve funds (move from available to reserved)\n   */\n  reserveFunds(amount: Money): void {\n    this.ensureSameCurrency(amount)\n    \n    if (!this.hasSufficientAvailableBalance(amount)) {\n      throw new InsufficientBalanceError(\n        this._currency,\n        amount,\n        this._availableBalance\n      )\n    }\n    \n    this._availableBalance = this._availableBalance.subtract(amount)\n    this._reservedBalance = this._reservedBalance.add(amount)\n    this.touch()\n  }\n\n  /**\n   * Release reserved funds (move from reserved to available)\n   */\n  releaseReservedFunds(amount: Money): void {\n    this.ensureSameCurrency(amount)\n    \n    if (!this.hasSufficientReservedBalance(amount)) {\n      throw new InsufficientReservedBalanceError(\n        this._currency,\n        amount,\n        this._reservedBalance\n      )\n    }\n    \n    this._reservedBalance = this._reservedBalance.subtract(amount)\n    this._availableBalance = this._availableBalance.add(amount)\n    this.touch()\n  }\n\n  /**\n   * Consume reserved funds (remove from reserved balance)\n   */\n  consumeReservedFunds(amount: Money): void {\n    this.ensureSameCurrency(amount)\n    \n    if (!this.hasSufficientReservedBalance(amount)) {\n      throw new InsufficientReservedBalanceError(\n        this._currency,\n        amount,\n        this._reservedBalance\n      )\n    }\n    \n    this._reservedBalance = this._reservedBalance.subtract(amount)\n    this.touch()\n  }\n\n  /**\n   * Check if wallet has sufficient available balance\n   */\n  hasSufficientAvailableBalance(amount: Money): boolean {\n    this.ensureSameCurrency(amount)\n    return this._availableBalance.isGreaterThanOrEqual(amount)\n  }\n\n  /**\n   * Check if wallet has sufficient reserved balance\n   */\n  hasSufficientReservedBalance(amount: Money): boolean {\n    this.ensureSameCurrency(amount)\n    return this._reservedBalance.isGreaterThanOrEqual(amount)\n  }\n\n  /**\n   * Check if wallet has sufficient total balance\n   */\n  hasSufficientTotalBalance(amount: Money): boolean {\n    this.ensureSameCurrency(amount)\n    return this.totalBalance.isGreaterThanOrEqual(amount)\n  }\n\n  /**\n   * Check if wallet is empty\n   */\n  isEmpty(): boolean {\n    return this._availableBalance.isZero() && this._reservedBalance.isZero()\n  }\n\n  /**\n   * Get wallet snapshot for persistence\n   */\n  toSnapshot(): WalletSnapshot {\n    return {\n      id: this._id,\n      userId: this._userId,\n      currency: this._currency,\n      availableBalance: this._availableBalance,\n      reservedBalance: this._reservedBalance,\n      createdAt: this._createdAt,\n      updatedAt: this._updatedAt\n    }\n  }\n\n  /**\n   * Ensure money amount has same currency as wallet\n   */\n  private ensureSameCurrency(amount: Money): void {\n    if (!amount.currency.equals(this._currency)) {\n      throw new Error(\n        `Currency mismatch: wallet is ${this._currency.code}, amount is ${amount.currency.code}`\n      )\n    }\n  }\n\n  /**\n   * Update the updatedAt timestamp\n   */\n  private touch(): void {\n    this._updatedAt = new Date()\n  }\n}\n\n/**\n * Domain exception for insufficient balance\n */\nexport class InsufficientBalanceError extends Error {\n  constructor(\n    public readonly currency: Currency,\n    public readonly requestedAmount: Money,\n    public readonly availableAmount: Money\n  ) {\n    super(\n      `Insufficient ${currency.code} balance. ` +\n      `Requested: ${requestedAmount.toString()}, ` +\n      `Available: ${availableAmount.toString()}`\n    )\n    this.name = 'InsufficientBalanceError'\n  }\n}\n\n/**\n * Domain exception for insufficient reserved balance\n */\nexport class InsufficientReservedBalanceError extends Error {\n  constructor(\n    public readonly currency: Currency,\n    public readonly requestedAmount: Money,\n    public readonly reservedAmount: Money\n  ) {\n    super(\n      `Insufficient ${currency.code} reserved balance. ` +\n      `Requested: ${requestedAmount.toString()}, ` +\n      `Reserved: ${reservedAmount.toString()}`\n    )\n    this.name = 'InsufficientReservedBalanceError'\n  }\n}\n"],"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","ignoreList":[]}