{"version":3,"names":["cov_1zciup9ern","actualCoverage","RepositoryError","SupabaseUnitOfWork","constructor","supabase","f","s","isTransactionActive","transactionClient","begin","b","error","commit","rollback","execute","operation","result","isInTransaction","getTransactionClient"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\repositories\\SupabaseUnitOfWork.ts"],"sourcesContent":["/**\n * Supabase Unit of Work Implementation\n * \n * Manages database transactions across multiple repository operations.\n * Ensures data consistency and atomicity.\n */\n\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { UnitOfWork } from '../../domain/repositories'\nimport { RepositoryError } from '../../domain/repositories'\n\nexport class SupabaseUnitOfWork implements UnitOfWork {\n  private isTransactionActive = false\n  private transactionClient: SupabaseClient | null = null\n\n  constructor(private readonly supabase: SupabaseClient) {}\n\n  async begin(): Promise<void> {\n    if (this.isTransactionActive) {\n      throw new RepositoryError(\n        'Transaction is already active',\n        'begin',\n        'UnitOfWork'\n      )\n    }\n\n    try {\n      // Note: Supabase doesn't have explicit transaction support in the client\n      // This is a simplified implementation. In a real scenario, you might:\n      // 1. Use Supabase Edge Functions with database transactions\n      // 2. Use a direct PostgreSQL client for transactions\n      // 3. Implement saga pattern for distributed transactions\n      \n      this.isTransactionActive = true\n      this.transactionClient = this.supabase\n    } catch (error) {\n      throw new RepositoryError(\n        'Failed to begin transaction',\n        'begin',\n        'UnitOfWork',\n        error as Error\n      )\n    }\n  }\n\n  async commit(): Promise<void> {\n    if (!this.isTransactionActive) {\n      throw new RepositoryError(\n        'No active transaction to commit',\n        'commit',\n        'UnitOfWork'\n      )\n    }\n\n    try {\n      // In a real implementation, this would commit the database transaction\n      this.isTransactionActive = false\n      this.transactionClient = null\n    } catch (error) {\n      throw new RepositoryError(\n        'Failed to commit transaction',\n        'commit',\n        'UnitOfWork',\n        error as Error\n      )\n    }\n  }\n\n  async rollback(): Promise<void> {\n    if (!this.isTransactionActive) {\n      throw new RepositoryError(\n        'No active transaction to rollback',\n        'rollback',\n        'UnitOfWork'\n      )\n    }\n\n    try {\n      // In a real implementation, this would rollback the database transaction\n      this.isTransactionActive = false\n      this.transactionClient = null\n    } catch (error) {\n      throw new RepositoryError(\n        'Failed to rollback transaction',\n        'rollback',\n        'UnitOfWork',\n        error as Error\n      )\n    }\n  }\n\n  async execute<T>(operation: () => Promise<T>): Promise<T> {\n    await this.begin()\n    \n    try {\n      const result = await operation()\n      await this.commit()\n      return result\n    } catch (error) {\n      await this.rollback()\n      throw error\n    }\n  }\n\n  isInTransaction(): boolean {\n    return this.isTransactionActive\n  }\n\n  /**\n   * Get the transaction client for use in repositories\n   * This allows repositories to use the same transaction context\n   */\n  getTransactionClient(): SupabaseClient {\n    return this.transactionClient || this.supabase\n  }\n}\n"],"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","ignoreList":[]}