{"file":"C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\utils\\api-client.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\utils\\api-client.ts"],"sourcesContent":["/**\n * API Client for Testing\n * Provides utilities for making authenticated API requests in tests\n */\n\nimport request from 'supertest';\nimport { TestUser } from './user-factory';\n\nexport interface ApiResponse<T = any> {\n  status: number;\n  body: T;\n  headers: Record<string, string>;\n  responseTime: number;\n}\n\nexport interface ApiRequestOptions {\n  headers?: Record<string, string>;\n  timeout?: number;\n  expectStatus?: number;\n}\n\nexport class ApiClient {\n  private baseUrl: string;\n  private defaultTimeout: number;\n\n  constructor(baseUrl?: string) {\n    this.baseUrl = baseUrl || global.testConfig.apiBaseUrl;\n    this.defaultTimeout = global.testConfig.apiTimeout;\n  }\n\n  /**\n   * Make an authenticated GET request\n   */\n  async get<T = any>(\n    endpoint: string,\n    user?: TestUser,\n    options: ApiRequestOptions = {}\n  ): Promise<ApiResponse<T>> {\n    return this.makeRequest('GET', endpoint, undefined, user, options);\n  }\n\n  /**\n   * Make an authenticated POST request\n   */\n  async post<T = any>(\n    endpoint: string,\n    data?: any,\n    user?: TestUser,\n    options: ApiRequestOptions = {}\n  ): Promise<ApiResponse<T>> {\n    return this.makeRequest('POST', endpoint, data, user, options);\n  }\n\n  /**\n   * Make an authenticated PUT request\n   */\n  async put<T = any>(\n    endpoint: string,\n    data?: any,\n    user?: TestUser,\n    options: ApiRequestOptions = {}\n  ): Promise<ApiResponse<T>> {\n    return this.makeRequest('PUT', endpoint, data, user, options);\n  }\n\n  /**\n   * Make an authenticated DELETE request\n   */\n  async delete<T = any>(\n    endpoint: string,\n    user?: TestUser,\n    options: ApiRequestOptions = {}\n  ): Promise<ApiResponse<T>> {\n    return this.makeRequest('DELETE', endpoint, undefined, user, options);\n  }\n\n  /**\n   * Make a request without authentication\n   */\n  async publicGet<T = any>(\n    endpoint: string,\n    options: ApiRequestOptions = {}\n  ): Promise<ApiResponse<T>> {\n    return this.makeRequest('GET', endpoint, undefined, undefined, options);\n  }\n\n  /**\n   * Make a request with custom headers\n   */\n  async requestWithHeaders<T = any>(\n    method: string,\n    endpoint: string,\n    data?: any,\n    headers?: Record<string, string>,\n    options: ApiRequestOptions = {}\n  ): Promise<ApiResponse<T>> {\n    const customOptions = {\n      ...options,\n      headers: { ...options.headers, ...headers }\n    };\n    return this.makeRequest(method, endpoint, data, undefined, customOptions);\n  }\n\n  /**\n   * Core request method\n   */\n  private async makeRequest<T = any>(\n    method: string,\n    endpoint: string,\n    data?: any,\n    user?: TestUser,\n    options: ApiRequestOptions = {}\n  ): Promise<ApiResponse<T>> {\n    const startTime = Date.now();\n    \n    // Create the request\n    let req = request(this.baseUrl)[method.toLowerCase()](endpoint);\n\n    // Set timeout\n    const timeout = options.timeout || this.defaultTimeout;\n    req = req.timeout(timeout);\n\n    // Set authentication header\n    if (user) {\n      req = req.set('Authorization', `Bearer ${user.accessToken}`);\n    }\n\n    // Set custom headers\n    if (options.headers) {\n      Object.entries(options.headers).forEach(([key, value]) => {\n        req = req.set(key, value);\n      });\n    }\n\n    // Set content type for POST/PUT requests\n    if ((method === 'POST' || method === 'PUT') && data) {\n      req = req.set('Content-Type', 'application/json');\n      req = req.send(data);\n    }\n\n    try {\n      const response = await req;\n      const responseTime = Date.now() - startTime;\n\n      // Check expected status if provided\n      if (options.expectStatus && response.status !== options.expectStatus) {\n        throw new Error(\n          `Expected status ${options.expectStatus} but got ${response.status}. Response: ${JSON.stringify(response.body)}`\n        );\n      }\n\n      return {\n        status: response.status,\n        body: response.body,\n        headers: response.headers,\n        responseTime\n      };\n\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n      \n      if (error.response) {\n        // HTTP error response\n        return {\n          status: error.response.status,\n          body: error.response.body,\n          headers: error.response.headers,\n          responseTime\n        };\n      }\n      \n      // Network or other error\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Test endpoint performance\n   */\n  async testPerformance<T = any>(\n    method: string,\n    endpoint: string,\n    expectedMaxTime: number,\n    user?: TestUser,\n    data?: any\n  ): Promise<{ response: ApiResponse<T>; passed: boolean }> {\n    const response = await this.makeRequest(method, endpoint, data, user);\n    const passed = response.responseTime <= expectedMaxTime;\n    \n    return { response, passed };\n  }\n\n  /**\n   * Test concurrent requests\n   */\n  async testConcurrency<T = any>(\n    method: string,\n    endpoint: string,\n    concurrentRequests: number,\n    user?: TestUser,\n    data?: any\n  ): Promise<ApiResponse<T>[]> {\n    const promises = Array(concurrentRequests)\n      .fill(null)\n      .map(() => this.makeRequest(method, endpoint, data, user));\n\n    return Promise.all(promises);\n  }\n\n  /**\n   * Test with invalid JWT token\n   */\n  async testWithInvalidToken<T = any>(\n    method: string,\n    endpoint: string,\n    data?: any\n  ): Promise<ApiResponse<T>> {\n    const options: ApiRequestOptions = {\n      headers: {\n        'Authorization': 'Bearer invalid-token-12345'\n      }\n    };\n    \n    return this.makeRequest(method, endpoint, data, undefined, options);\n  }\n\n  /**\n   * Test with expired JWT token\n   */\n  async testWithExpiredToken<T = any>(\n    method: string,\n    endpoint: string,\n    data?: any\n  ): Promise<ApiResponse<T>> {\n    // Create an expired JWT token (this is a mock expired token)\n    const expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.invalid';\n    \n    const options: ApiRequestOptions = {\n      headers: {\n        'Authorization': `Bearer ${expiredToken}`\n      }\n    };\n    \n    return this.makeRequest(method, endpoint, data, undefined, options);\n  }\n\n  /**\n   * Test with malformed authorization header\n   */\n  async testWithMalformedAuth<T = any>(\n    method: string,\n    endpoint: string,\n    authHeader: string,\n    data?: any\n  ): Promise<ApiResponse<T>> {\n    const options: ApiRequestOptions = {\n      headers: {\n        'Authorization': authHeader\n      }\n    };\n    \n    return this.makeRequest(method, endpoint, data, undefined, options);\n  }\n}\n\n// Export singleton instance\nexport const apiClient = new ApiClient();\n"],"version":3}