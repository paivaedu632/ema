{"version":3,"names":["cov_109mdwngu8","actualCoverage","withAuth","createSuccessResponse","ErrorResponses","withErrorHandling","withCors","validateRequestBody","marketOrderSchema","executeMarketOrder","marketOrderHandler","request","user","f","validation","s","success","b","validationError","error","side","amount","baseCurrency","quoteCurrency","slippageLimit","data","result","user_id","userId","order_type","base_currency","quote_currency","slippage_limit","_a","includes","insufficientBalance","_b","orderFailed","_c","orderData","responseData","orderId","id","orderType","executedPrice","executed_price","executedAmount","executed_amount","status","createdAt","created_at","Date","toISOString","executedAt","executed_at","orderDetails","POST"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\orders\\market\\route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { withAuth, AuthenticatedUser } from '@/lib/auth/middleware';\nimport { createSuccessResponse, ErrorResponses, withErrorHandling } from '@/lib/api/responses';\nimport { withCors } from '@/lib/api/cors';\nimport { validateRequestBody } from '@/lib/validation/helpers';\nimport { marketOrderSchema } from '@/lib/validation/schemas';\nimport { executeMarketOrder } from '@/lib/database/functions';\n\nasync function marketOrderHandler(request: NextRequest, user: AuthenticatedUser) {\n  // Validate request body\n  const validation = await validateRequestBody(request, marketOrderSchema);\n  if (!validation.success) {\n    return ErrorResponses.validationError(validation.error!);\n  }\n\n  const { side, amount, baseCurrency, quoteCurrency, slippageLimit = 0.05 } = validation.data!;\n\n  // Execute market order\n  const result = await executeMarketOrder({\n    user_id: user.userId,\n    order_type: 'market',\n    side,\n    base_currency: baseCurrency,\n    quote_currency: quoteCurrency,\n    amount,\n    slippage_limit: slippageLimit\n  });\n\n  if (!result.success) {\n    // Handle specific error cases\n    if (result.error?.includes('insufficient')) {\n      return ErrorResponses.insufficientBalance(result.error);\n    }\n    if (result.error?.includes('slippage')) {\n      return ErrorResponses.orderFailed('Order rejected due to slippage limit');\n    }\n    if (result.error?.includes('liquidity')) {\n      return ErrorResponses.orderFailed('Insufficient market liquidity');\n    }\n\n    return ErrorResponses.orderFailed(result.error);\n  }\n\n  const orderData = result.data as { id?: string; executed_price?: number; executed_amount?: number; status?: string; created_at?: string; executed_at?: string } | undefined;\n\n  const responseData = {\n    orderId: orderData?.id,\n    userId: user.userId,\n    orderType: 'market' as const,\n    side,\n    baseCurrency,\n    quoteCurrency,\n    amount,\n    slippageLimit,\n    executedPrice: orderData?.executed_price,\n    executedAmount: orderData?.executed_amount,\n    status: orderData?.status || 'filled',\n    createdAt: orderData?.created_at || new Date().toISOString(),\n    executedAt: orderData?.executed_at || new Date().toISOString(),\n    orderDetails: orderData\n  };\n\n  return createSuccessResponse(responseData, 'Market order executed successfully');\n}\n\nexport const POST = withCors(withErrorHandling(withAuth(marketOrderHandler)));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBQ;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAA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","ignoreList":[]}