{"version":3,"names":["cov_16igj34lcr","actualCoverage","withAuth","createSuccessResponse","ErrorResponses","withErrorHandling","withCors","validateSearchParams","transferHistorySchema","getTransferHistory","transferHistoryHandler","request","user","f","validation","s","success","b","validationError","error","page","limit","currency","data","result","Object","assign","user_id","userId","databaseError","transfers","Array","isArray","formattedTransfers","map","transfer","id","type","transaction_type","amount","description","status","createdAt","created_at","recipientId","recipient_id","senderId","sender_id","referenceId","reference_id","responseData","pagination","total","length","hasMore","timestamp","Date","toISOString","GET"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\transfers\\history\\route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { withAuth, AuthenticatedUser } from '@/lib/auth/middleware';\nimport { createSuccessResponse, ErrorResponses, withErrorHandling } from '@/lib/api/responses';\nimport { withCors } from '@/lib/api/cors';\nimport { validateSearchParams } from '@/lib/validation/helpers';\nimport { transferHistorySchema } from '@/lib/validation/schemas';\nimport { getTransferHistory } from '@/lib/database/functions';\n\nasync function transferHistoryHandler(request: NextRequest, user: AuthenticatedUser) {\n  // Validate search parameters\n  const validation = validateSearchParams(request, transferHistorySchema);\n  if (!validation.success) {\n    return ErrorResponses.validationError(validation.error!);\n  }\n\n  const { page = 1, limit = 20, currency } = validation.data!;\n\n  // Get transfer history\n  const result = await getTransferHistory({\n    user_id: user.userId,\n    page,\n    limit,\n    ...(currency && { currency })\n  });\n\n  if (!result.success) {\n    return ErrorResponses.databaseError(result.error);\n  }\n\n  const transfers = Array.isArray(result.data) ? result.data : [];\n\n  // Format transfer data for response\n  const formattedTransfers = transfers.map((transfer: {\n    id: string;\n    transaction_type: string;\n    amount: number;\n    currency: string;\n    description?: string;\n    status: string;\n    created_at: string;\n    recipient_id?: string;\n    sender_id?: string;\n    reference_id?: string;\n  }) => ({\n    id: transfer.id,\n    type: transfer.transaction_type,\n    amount: transfer.amount,\n    currency: transfer.currency,\n    description: transfer.description,\n    status: transfer.status,\n    createdAt: transfer.created_at,\n    recipientId: transfer.recipient_id,\n    senderId: transfer.sender_id,\n    referenceId: transfer.reference_id\n  }));\n\n  const responseData = {\n    transfers: formattedTransfers,\n    pagination: {\n      page,\n      limit,\n      total: formattedTransfers.length,\n      hasMore: formattedTransfers.length === limit\n    },\n    userId: user.userId,\n    currency,\n    timestamp: new Date().toISOString()\n  };\n\n  return createSuccessResponse(responseData, 'Transfer history retrieved successfully');\n}\n\nexport const GET = withCors(withErrorHandling(withAuth(transferHistoryHandler)));\n"],"mappings":"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","ignoreList":[]}