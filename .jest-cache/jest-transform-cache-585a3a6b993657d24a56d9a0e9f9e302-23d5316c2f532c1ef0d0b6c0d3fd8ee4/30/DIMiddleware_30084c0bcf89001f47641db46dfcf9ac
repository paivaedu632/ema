690d921fbf9af5d10469535594c11a8f
/* istanbul ignore next */
function cov_2got4z3d80() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\middleware\\DIMiddleware.ts";
  var hash = "d3c7e2dadb6cf9aed7eb6361a07fd8b032e36699";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\middleware\\DIMiddleware.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 11,
          column: 33
        }
      },
      "1": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 30
        }
      },
      "2": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "3": {
        start: {
          line: 19,
          column: 19
        },
        end: {
          line: 19,
          column: 52
        }
      },
      "4": {
        start: {
          line: 21,
          column: 33
        },
        end: {
          line: 21,
          column: 83
        }
      },
      "5": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "6": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 44
        }
      },
      "7": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 19
        }
      },
      "8": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 42
        }
      },
      "9": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 50
        }
      },
      "10": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "11": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 50
        }
      },
      "12": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 42
        }
      },
      "13": {
        start: {
          line: 54,
          column: 25
        },
        end: {
          line: 54,
          column: 55
        }
      },
      "14": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 71
        }
      },
      "15": {
        start: {
          line: 63,
          column: 23
        },
        end: {
          line: 63,
          column: 59
        }
      },
      "16": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 68,
          column: 5
        }
      },
      "17": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 25
        }
      },
      "18": {
        start: {
          line: 70,
          column: 26
        },
        end: {
          line: 70,
          column: 58
        }
      },
      "19": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 74,
          column: 5
        }
      },
      "20": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 25
        }
      },
      "21": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 21
        }
      },
      "22": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 97,
          column: 6
        }
      },
      "23": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 82,
          column: 53
        }
      },
      "24": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "25": {
        start: {
          line: 85,
          column: 29
        },
        end: {
          line: 85,
          column: 60
        }
      },
      "26": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 86,
          column: 68
        }
      },
      "27": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "28": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 73
        }
      },
      "29": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 24
        }
      },
      "30": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 53
        }
      },
      "31": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 31
        }
      },
      "32": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "33": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 61
        }
      },
      "34": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 70
        }
      },
      "35": {
        start: {
          line: 122,
          column: 26
        },
        end: {
          line: 122,
          column: 40
        }
      },
      "36": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 46
        }
      },
      "37": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 92
        }
      },
      "38": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 100
        }
      },
      "39": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 82
        }
      },
      "40": {
        start: {
          line: 150,
          column: 26
        },
        end: {
          line: 150,
          column: 45
        }
      },
      "41": {
        start: {
          line: 151,
          column: 26
        },
        end: {
          line: 151,
          column: 50
        }
      },
      "42": {
        start: {
          line: 152,
          column: 27
        },
        end: {
          line: 152,
          column: 94
        }
      },
      "43": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 163,
          column: 9
        }
      },
      "44": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 42
        }
      },
      "45": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 22
        }
      },
      "46": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 41
        }
      },
      "47": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 22
        }
      },
      "48": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 40
        }
      },
      "49": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 162,
          column: 22
        }
      },
      "50": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 181,
          column: 6
        }
      },
      "51": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "52": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 175,
          column: 17
        }
      },
      "53": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 99
        }
      },
      "54": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 78
        }
      },
      "55": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 193,
          column: 6
        }
      },
      "56": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "57": {
        start: {
          line: 189,
          column: 23
        },
        end: {
          line: 189,
          column: 58
        }
      },
      "58": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 208,
          column: 18
        }
      },
      "59": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 30
        }
      },
      "60": {
        start: {
          line: 202,
          column: 23
        },
        end: {
          line: 202,
          column: 36
        }
      },
      "61": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "62": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "63": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 49
        }
      },
      "64": {
        start: {
          line: 214,
          column: 27
        },
        end: {
          line: 214,
          column: 47
        }
      },
      "65": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 221,
          column: 6
        }
      },
      "66": {
        start: {
          line: 224,
          column: 0
        },
        end: {
          line: 224,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "createRequestContext",
        decl: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 36
          }
        },
        loc: {
          start: {
            line: 15,
            column: 46
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 15
      },
      "1": {
        name: "getRequestContext",
        decl: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 33
          }
        },
        loc: {
          start: {
            line: 40,
            column: 45
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 40
      },
      "2": {
        name: "cleanupRequestContext",
        decl: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 37
          }
        },
        loc: {
          start: {
            line: 46,
            column: 49
          },
          end: {
            line: 57,
            column: 1
          }
        },
        line: 46
      },
      "3": {
        name: "extractUserIdFromRequest",
        decl: {
          start: {
            line: 61,
            column: 9
          },
          end: {
            line: 61,
            column: 33
          }
        },
        loc: {
          start: {
            line: 61,
            column: 43
          },
          end: {
            line: 76,
            column: 1
          }
        },
        line: 61
      },
      "4": {
        name: "withDIMiddleware",
        decl: {
          start: {
            line: 80,
            column: 16
          },
          end: {
            line: 80,
            column: 32
          }
        },
        loc: {
          start: {
            line: 80,
            column: 42
          },
          end: {
            line: 98,
            column: 1
          }
        },
        line: 80
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 81,
            column: 11
          },
          end: {
            line: 81,
            column: 12
          }
        },
        loc: {
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 81
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 24
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 106
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 31
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 112
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 34
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 121
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 25
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 128
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 19
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 135
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 142
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 33
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 149
      },
      "13": {
        name: "RequestScoped",
        decl: {
          start: {
            line: 169,
            column: 16
          },
          end: {
            line: 169,
            column: 29
          }
        },
        loc: {
          start: {
            line: 169,
            column: 43
          },
          end: {
            line: 182,
            column: 1
          }
        },
        line: 169
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 170,
            column: 11
          },
          end: {
            line: 170,
            column: 12
          }
        },
        loc: {
          start: {
            line: 170,
            column: 42
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 170
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 172,
            column: 17
          },
          end: {
            line: 172,
            column: 18
          }
        },
        loc: {
          start: {
            line: 172,
            column: 29
          },
          end: {
            line: 177,
            column: 13
          }
        },
        line: 172
      },
      "16": {
        name: "Singleton",
        decl: {
          start: {
            line: 186,
            column: 16
          },
          end: {
            line: 186,
            column: 25
          }
        },
        loc: {
          start: {
            line: 186,
            column: 39
          },
          end: {
            line: 194,
            column: 1
          }
        },
        line: 186
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 187,
            column: 11
          },
          end: {
            line: 187,
            column: 12
          }
        },
        loc: {
          start: {
            line: 187,
            column: 42
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 187
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 189,
            column: 17
          },
          end: {
            line: 189,
            column: 18
          }
        },
        loc: {
          start: {
            line: 189,
            column: 23
          },
          end: {
            line: 189,
            column: 58
          }
        },
        line: 189
      },
      "19": {
        name: "setupRequestContextCleanup",
        decl: {
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 198,
            column: 42
          }
        },
        loc: {
          start: {
            line: 198,
            column: 45
          },
          end: {
            line: 209,
            column: 1
          }
        },
        line: 198
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 200,
            column: 16
          },
          end: {
            line: 200,
            column: 17
          }
        },
        loc: {
          start: {
            line: 200,
            column: 22
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 200
      },
      "21": {
        name: "getRequestContextStats",
        decl: {
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 213,
            column: 38
          }
        },
        loc: {
          start: {
            line: 213,
            column: 41
          },
          end: {
            line: 222,
            column: 1
          }
        },
        line: 213
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 54
          }
        }, {
          start: {
            line: 29,
            column: 58
          },
          end: {
            line: 29,
            column: 90
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "2": {
        loc: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "5": {
        loc: {
          start: {
            line: 130,
            column: 15
          },
          end: {
            line: 130,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 84
          }
        }, {
          start: {
            line: 130,
            column: 89
          },
          end: {
            line: 130,
            column: 91
          }
        }],
        line: 130
      },
      "6": {
        loc: {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 130,
            column: 64
          },
          end: {
            line: 130,
            column: 70
          }
        }, {
          start: {
            line: 130,
            column: 73
          },
          end: {
            line: 130,
            column: 84
          }
        }],
        line: 130
      },
      "7": {
        loc: {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 130,
            column: 44
          }
        }, {
          start: {
            line: 130,
            column: 48
          },
          end: {
            line: 130,
            column: 61
          }
        }],
        line: 130
      },
      "8": {
        loc: {
          start: {
            line: 137,
            column: 15
          },
          end: {
            line: 137,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 85
          }
        }, {
          start: {
            line: 137,
            column: 90
          },
          end: {
            line: 137,
            column: 99
          }
        }],
        line: 137
      },
      "9": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 137,
            column: 64
          },
          end: {
            line: 137,
            column: 70
          }
        }, {
          start: {
            line: 137,
            column: 73
          },
          end: {
            line: 137,
            column: 85
          }
        }],
        line: 137
      },
      "10": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 137,
            column: 44
          }
        }, {
          start: {
            line: 137,
            column: 48
          },
          end: {
            line: 137,
            column: 61
          }
        }],
        line: 137
      },
      "11": {
        loc: {
          start: {
            line: 144,
            column: 15
          },
          end: {
            line: 144,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 144,
            column: 63
          },
          end: {
            line: 144,
            column: 69
          }
        }, {
          start: {
            line: 144,
            column: 72
          },
          end: {
            line: 144,
            column: 81
          }
        }],
        line: 144
      },
      "12": {
        loc: {
          start: {
            line: 144,
            column: 15
          },
          end: {
            line: 144,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 15
          },
          end: {
            line: 144,
            column: 43
          }
        }, {
          start: {
            line: 144,
            column: 47
          },
          end: {
            line: 144,
            column: 60
          }
        }],
        line: 144
      },
      "13": {
        loc: {
          start: {
            line: 149,
            column: 17
          },
          end: {
            line: 149,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 149,
            column: 25
          },
          end: {
            line: 149,
            column: 31
          }
        }],
        line: 149
      },
      "14": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 163,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 156,
            column: 22
          }
        }, {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 159,
            column: 22
          }
        }, {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 162,
            column: 22
          }
        }],
        line: 153
      },
      "15": {
        loc: {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "16": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\middleware\\DIMiddleware.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\middleware\\DIMiddleware.ts"],
      sourcesContent: ["/**\n * Dependency Injection Middleware\n * \n * Integrates the DI container with Next.js middleware for request-scoped services.\n * Provides request-specific service resolution and cleanup.\n */\n\nimport { NextRequest, NextResponse } from 'next/server'\nimport { getContainer } from '../di/Container'\nimport { ScopedServiceManager } from '../di/ServiceLocator'\nimport { v4 as uuidv4 } from 'uuid'\n\nexport interface RequestContext {\n  requestId: string\n  userId?: string\n  startTime: number\n  scopedServiceManager: ScopedServiceManager\n  metadata: Record<string, any>\n}\n\n// Store request contexts\nconst requestContexts = new Map<string, RequestContext>()\n\n/**\n * Create request context with scoped services\n */\nexport function createRequestContext(request: NextRequest): RequestContext {\n  const requestId = uuidv4()\n  const startTime = Date.now()\n  \n  // Extract user ID from request if available\n  const userId = extractUserIdFromRequest(request)\n  \n  // Create scoped service manager\n  const scopedServiceManager = ScopedServiceManager.createRequestScope(requestId)\n  \n  const context: RequestContext = {\n    requestId,\n    userId,\n    startTime,\n    scopedServiceManager,\n    metadata: {\n      userAgent: request.headers.get('user-agent'),\n      ip: request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip'),\n      method: request.method,\n      url: request.url\n    }\n  }\n  \n  requestContexts.set(requestId, context)\n  \n  return context\n}\n\n/**\n * Get request context by ID\n */\nexport function getRequestContext(requestId: string): RequestContext | undefined {\n  return requestContexts.get(requestId)\n}\n\n/**\n * Cleanup request context\n */\nexport function cleanupRequestContext(requestId: string): void {\n  const context = requestContexts.get(requestId)\n  if (context) {\n    // Clear scoped services\n    context.scopedServiceManager.clearScope()\n    \n    // Remove from map\n    requestContexts.delete(requestId)\n    \n    // Log request completion\n    const duration = Date.now() - context.startTime\n    console.log(`Request ${requestId} completed in ${duration}ms`)\n  }\n}\n\n/**\n * Extract user ID from request\n */\nfunction extractUserIdFromRequest(request: NextRequest): string | undefined {\n  // Try to extract from authorization header\n  const authHeader = request.headers.get('authorization')\n  if (authHeader) {\n    // This would depend on your auth implementation\n    // For Clerk, you might extract from the session token\n    return undefined // Placeholder\n  }\n  \n  // Try to extract from cookies\n  const sessionCookie = request.cookies.get('__session')\n  if (sessionCookie) {\n    // Extract user ID from session cookie\n    return undefined // Placeholder\n  }\n  \n  return undefined\n}\n\n/**\n * DI Middleware for Next.js\n */\nexport function withDIMiddleware(\n  handler: (request: NextRequest, context: RequestContext) => Promise<NextResponse>\n) {\n  return async (request: NextRequest): Promise<NextResponse> => {\n    const context = createRequestContext(request)\n    \n    try {\n      // Add request ID to response headers\n      const response = await handler(request, context)\n      response.headers.set('x-request-id', context.requestId)\n      \n      return response\n    } catch (error) {\n      console.error(`Request ${context.requestId} failed:`, error)\n      throw error\n    } finally {\n      // Cleanup request context\n      cleanupRequestContext(context.requestId)\n    }\n  }\n}\n\n/**\n * Enhanced Base Controller with DI Middleware support\n */\nexport abstract class DIAwareController {\n  protected context?: RequestContext\n\n  /**\n   * Set request context\n   */\n  setContext(context: RequestContext): void {\n    this.context = context\n  }\n\n  /**\n   * Resolve service with request scope\n   */\n  protected resolveScoped<T>(serviceName: string): T {\n    if (!this.context) {\n      throw new Error('Request context not available')\n    }\n    \n    return this.context.scopedServiceManager.resolve<T>(serviceName)\n  }\n\n  /**\n   * Resolve singleton service\n   */\n  protected resolveSingleton<T>(serviceName: string): T {\n    const container = getContainer()\n    return container.resolve<T>(serviceName)\n  }\n\n  /**\n   * Get request metadata\n   */\n  protected getRequestMetadata(): Record<string, any> {\n    return this.context?.metadata || {}\n  }\n\n  /**\n   * Get request ID\n   */\n  protected getRequestId(): string {\n    return this.context?.requestId || 'unknown'\n  }\n\n  /**\n   * Get user ID from context\n   */\n  protected getUserId(): string | undefined {\n    return this.context?.userId\n  }\n\n  /**\n   * Log with request context\n   */\n  protected log(message: string, level: 'info' | 'warn' | 'error' = 'info'): void {\n    const requestId = this.getRequestId()\n    const timestamp = new Date().toISOString()\n    const logMessage = `[${timestamp}] [${requestId}] [${level.toUpperCase()}] ${message}`\n    \n    switch (level) {\n      case 'error':\n        console.error(logMessage)\n        break\n      case 'warn':\n        console.warn(logMessage)\n        break\n      default:\n        console.log(logMessage)\n        break\n    }\n  }\n}\n\n/**\n * Request-scoped service decorator\n */\nexport function RequestScoped(serviceName: string) {\n  return function (target: any, propertyKey: string) {\n    Object.defineProperty(target, propertyKey, {\n      get: function () {\n        if (!this.context) {\n          throw new Error('Request context not available for scoped service resolution')\n        }\n        return this.context.scopedServiceManager.resolve(serviceName)\n      },\n      enumerable: true,\n      configurable: false\n    })\n  }\n}\n\n/**\n * Singleton service decorator\n */\nexport function Singleton(serviceName: string) {\n  return function (target: any, propertyKey: string) {\n    Object.defineProperty(target, propertyKey, {\n      get: () => getContainer().resolve(serviceName),\n      enumerable: true,\n      configurable: false\n    })\n  }\n}\n\n/**\n * Cleanup middleware for long-running processes\n */\nexport function setupRequestContextCleanup(): void {\n  // Cleanup old request contexts every 5 minutes\n  setInterval(() => {\n    const now = Date.now()\n    const maxAge = 5 * 60 * 1000 // 5 minutes\n    \n    for (const [requestId, context] of requestContexts.entries()) {\n      if (now - context.startTime > maxAge) {\n        cleanupRequestContext(requestId)\n      }\n    }\n  }, 60 * 1000) // Run every minute\n}\n\n/**\n * Get request context statistics\n */\nexport function getRequestContextStats(): {\n  activeRequests: number\n  totalRequests: number\n  averageRequestDuration: number\n} {\n  const activeRequests = requestContexts.size\n  \n  // This would need to be tracked separately for total requests\n  // and average duration calculations\n  return {\n    activeRequests,\n    totalRequests: 0, // Placeholder\n    averageRequestDuration: 0 // Placeholder\n  }\n}\n\n// Initialize cleanup on module load\nsetupRequestContextCleanup()\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d3c7e2dadb6cf9aed7eb6361a07fd8b032e36699"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2got4z3d80 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2got4z3d80();
/**
 * Dependency Injection Middleware
 *
 * Integrates the DI container with Next.js middleware for request-scoped services.
 * Provides request-specific service resolution and cleanup.
 */
import { getContainer } from '../di/Container';
import { ScopedServiceManager } from '../di/ServiceLocator';
import { v4 as uuidv4 } from 'uuid';
// Store request contexts
const requestContexts =
/* istanbul ignore next */
(cov_2got4z3d80().s[0]++, new Map());
/**
 * Create request context with scoped services
 */
export function createRequestContext(request) {
  /* istanbul ignore next */
  cov_2got4z3d80().f[0]++;
  const requestId =
  /* istanbul ignore next */
  (cov_2got4z3d80().s[1]++, uuidv4());
  const startTime =
  /* istanbul ignore next */
  (cov_2got4z3d80().s[2]++, Date.now());
  // Extract user ID from request if available
  const userId =
  /* istanbul ignore next */
  (cov_2got4z3d80().s[3]++, extractUserIdFromRequest(request));
  // Create scoped service manager
  const scopedServiceManager =
  /* istanbul ignore next */
  (cov_2got4z3d80().s[4]++, ScopedServiceManager.createRequestScope(requestId));
  const context =
  /* istanbul ignore next */
  (cov_2got4z3d80().s[5]++, {
    requestId,
    userId,
    startTime,
    scopedServiceManager,
    metadata: {
      userAgent: request.headers.get('user-agent'),
      ip:
      /* istanbul ignore next */
      (cov_2got4z3d80().b[0][0]++, request.headers.get('x-forwarded-for')) ||
      /* istanbul ignore next */
      (cov_2got4z3d80().b[0][1]++, request.headers.get('x-real-ip')),
      method: request.method,
      url: request.url
    }
  });
  /* istanbul ignore next */
  cov_2got4z3d80().s[6]++;
  requestContexts.set(requestId, context);
  /* istanbul ignore next */
  cov_2got4z3d80().s[7]++;
  return context;
}
/**
 * Get request context by ID
 */
export function getRequestContext(requestId) {
  /* istanbul ignore next */
  cov_2got4z3d80().f[1]++;
  cov_2got4z3d80().s[8]++;
  return requestContexts.get(requestId);
}
/**
 * Cleanup request context
 */
export function cleanupRequestContext(requestId) {
  /* istanbul ignore next */
  cov_2got4z3d80().f[2]++;
  const context =
  /* istanbul ignore next */
  (cov_2got4z3d80().s[9]++, requestContexts.get(requestId));
  /* istanbul ignore next */
  cov_2got4z3d80().s[10]++;
  if (context) {
    /* istanbul ignore next */
    cov_2got4z3d80().b[1][0]++;
    cov_2got4z3d80().s[11]++;
    // Clear scoped services
    context.scopedServiceManager.clearScope();
    // Remove from map
    /* istanbul ignore next */
    cov_2got4z3d80().s[12]++;
    requestContexts.delete(requestId);
    // Log request completion
    const duration =
    /* istanbul ignore next */
    (cov_2got4z3d80().s[13]++, Date.now() - context.startTime);
    /* istanbul ignore next */
    cov_2got4z3d80().s[14]++;
    console.log(`Request ${requestId} completed in ${duration}ms`);
  } else
  /* istanbul ignore next */
  {
    cov_2got4z3d80().b[1][1]++;
  }
}
/**
 * Extract user ID from request
 */
function extractUserIdFromRequest(request) {
  /* istanbul ignore next */
  cov_2got4z3d80().f[3]++;
  // Try to extract from authorization header
  const authHeader =
  /* istanbul ignore next */
  (cov_2got4z3d80().s[15]++, request.headers.get('authorization'));
  /* istanbul ignore next */
  cov_2got4z3d80().s[16]++;
  if (authHeader) {
    /* istanbul ignore next */
    cov_2got4z3d80().b[2][0]++;
    cov_2got4z3d80().s[17]++;
    // This would depend on your auth implementation
    // For Clerk, you might extract from the session token
    return undefined; // Placeholder
  } else
  /* istanbul ignore next */
  {
    cov_2got4z3d80().b[2][1]++;
  }
  // Try to extract from cookies
  const sessionCookie =
  /* istanbul ignore next */
  (cov_2got4z3d80().s[18]++, request.cookies.get('__session'));
  /* istanbul ignore next */
  cov_2got4z3d80().s[19]++;
  if (sessionCookie) {
    /* istanbul ignore next */
    cov_2got4z3d80().b[3][0]++;
    cov_2got4z3d80().s[20]++;
    // Extract user ID from session cookie
    return undefined; // Placeholder
  } else
  /* istanbul ignore next */
  {
    cov_2got4z3d80().b[3][1]++;
  }
  cov_2got4z3d80().s[21]++;
  return undefined;
}
/**
 * DI Middleware for Next.js
 */
export function withDIMiddleware(handler) {
  /* istanbul ignore next */
  cov_2got4z3d80().f[4]++;
  cov_2got4z3d80().s[22]++;
  return async request => {
    /* istanbul ignore next */
    cov_2got4z3d80().f[5]++;
    const context =
    /* istanbul ignore next */
    (cov_2got4z3d80().s[23]++, createRequestContext(request));
    /* istanbul ignore next */
    cov_2got4z3d80().s[24]++;
    try {
      // Add request ID to response headers
      const response =
      /* istanbul ignore next */
      (cov_2got4z3d80().s[25]++, await handler(request, context));
      /* istanbul ignore next */
      cov_2got4z3d80().s[26]++;
      response.headers.set('x-request-id', context.requestId);
      /* istanbul ignore next */
      cov_2got4z3d80().s[27]++;
      return response;
    } catch (error) {
      /* istanbul ignore next */
      cov_2got4z3d80().s[28]++;
      console.error(`Request ${context.requestId} failed:`, error);
      /* istanbul ignore next */
      cov_2got4z3d80().s[29]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_2got4z3d80().s[30]++;
      // Cleanup request context
      cleanupRequestContext(context.requestId);
    }
  };
}
/**
 * Enhanced Base Controller with DI Middleware support
 */
export class DIAwareController {
  /**
   * Set request context
   */
  setContext(context) {
    /* istanbul ignore next */
    cov_2got4z3d80().f[6]++;
    cov_2got4z3d80().s[31]++;
    this.context = context;
  }
  /**
   * Resolve service with request scope
   */
  resolveScoped(serviceName) {
    /* istanbul ignore next */
    cov_2got4z3d80().f[7]++;
    cov_2got4z3d80().s[32]++;
    if (!this.context) {
      /* istanbul ignore next */
      cov_2got4z3d80().b[4][0]++;
      cov_2got4z3d80().s[33]++;
      throw new Error('Request context not available');
    } else
    /* istanbul ignore next */
    {
      cov_2got4z3d80().b[4][1]++;
    }
    cov_2got4z3d80().s[34]++;
    return this.context.scopedServiceManager.resolve(serviceName);
  }
  /**
   * Resolve singleton service
   */
  resolveSingleton(serviceName) {
    /* istanbul ignore next */
    cov_2got4z3d80().f[8]++;
    const container =
    /* istanbul ignore next */
    (cov_2got4z3d80().s[35]++, getContainer());
    /* istanbul ignore next */
    cov_2got4z3d80().s[36]++;
    return container.resolve(serviceName);
  }
  /**
   * Get request metadata
   */
  getRequestMetadata() {
    /* istanbul ignore next */
    cov_2got4z3d80().f[9]++;
    var _a;
    /* istanbul ignore next */
    cov_2got4z3d80().s[37]++;
    return /* istanbul ignore next */(cov_2got4z3d80().b[5][0]++,
    /* istanbul ignore next */
    (cov_2got4z3d80().b[7][0]++, (_a = this.context) === null) ||
    /* istanbul ignore next */
    (cov_2got4z3d80().b[7][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_2got4z3d80().b[6][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2got4z3d80().b[6][1]++, _a.metadata)) ||
    /* istanbul ignore next */
    (cov_2got4z3d80().b[5][1]++, {});
  }
  /**
   * Get request ID
   */
  getRequestId() {
    /* istanbul ignore next */
    cov_2got4z3d80().f[10]++;
    var _a;
    /* istanbul ignore next */
    cov_2got4z3d80().s[38]++;
    return /* istanbul ignore next */(cov_2got4z3d80().b[8][0]++,
    /* istanbul ignore next */
    (cov_2got4z3d80().b[10][0]++, (_a = this.context) === null) ||
    /* istanbul ignore next */
    (cov_2got4z3d80().b[10][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_2got4z3d80().b[9][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2got4z3d80().b[9][1]++, _a.requestId)) ||
    /* istanbul ignore next */
    (cov_2got4z3d80().b[8][1]++, 'unknown');
  }
  /**
   * Get user ID from context
   */
  getUserId() {
    /* istanbul ignore next */
    cov_2got4z3d80().f[11]++;
    var _a;
    /* istanbul ignore next */
    cov_2got4z3d80().s[39]++;
    return /* istanbul ignore next */(cov_2got4z3d80().b[12][0]++, (_a = this.context) === null) ||
    /* istanbul ignore next */
    (cov_2got4z3d80().b[12][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_2got4z3d80().b[11][0]++, void 0) :
    /* istanbul ignore next */
    (cov_2got4z3d80().b[11][1]++, _a.userId);
  }
  /**
   * Log with request context
   */
  log(message, level =
  /* istanbul ignore next */
  (cov_2got4z3d80().b[13][0]++, 'info')) {
    /* istanbul ignore next */
    cov_2got4z3d80().f[12]++;
    const requestId =
    /* istanbul ignore next */
    (cov_2got4z3d80().s[40]++, this.getRequestId());
    const timestamp =
    /* istanbul ignore next */
    (cov_2got4z3d80().s[41]++, new Date().toISOString());
    const logMessage =
    /* istanbul ignore next */
    (cov_2got4z3d80().s[42]++, `[${timestamp}] [${requestId}] [${level.toUpperCase()}] ${message}`);
    /* istanbul ignore next */
    cov_2got4z3d80().s[43]++;
    switch (level) {
      case 'error':
        /* istanbul ignore next */
        cov_2got4z3d80().b[14][0]++;
        cov_2got4z3d80().s[44]++;
        console.error(logMessage);
        /* istanbul ignore next */
        cov_2got4z3d80().s[45]++;
        break;
      case 'warn':
        /* istanbul ignore next */
        cov_2got4z3d80().b[14][1]++;
        cov_2got4z3d80().s[46]++;
        console.warn(logMessage);
        /* istanbul ignore next */
        cov_2got4z3d80().s[47]++;
        break;
      default:
        /* istanbul ignore next */
        cov_2got4z3d80().b[14][2]++;
        cov_2got4z3d80().s[48]++;
        console.log(logMessage);
        /* istanbul ignore next */
        cov_2got4z3d80().s[49]++;
        break;
    }
  }
}
/**
 * Request-scoped service decorator
 */
export function RequestScoped(serviceName) {
  /* istanbul ignore next */
  cov_2got4z3d80().f[13]++;
  cov_2got4z3d80().s[50]++;
  return function (target, propertyKey) {
    /* istanbul ignore next */
    cov_2got4z3d80().f[14]++;
    cov_2got4z3d80().s[51]++;
    Object.defineProperty(target, propertyKey, {
      get: function () {
        /* istanbul ignore next */
        cov_2got4z3d80().f[15]++;
        cov_2got4z3d80().s[52]++;
        if (!this.context) {
          /* istanbul ignore next */
          cov_2got4z3d80().b[15][0]++;
          cov_2got4z3d80().s[53]++;
          throw new Error('Request context not available for scoped service resolution');
        } else
        /* istanbul ignore next */
        {
          cov_2got4z3d80().b[15][1]++;
        }
        cov_2got4z3d80().s[54]++;
        return this.context.scopedServiceManager.resolve(serviceName);
      },
      enumerable: true,
      configurable: false
    });
  };
}
/**
 * Singleton service decorator
 */
export function Singleton(serviceName) {
  /* istanbul ignore next */
  cov_2got4z3d80().f[16]++;
  cov_2got4z3d80().s[55]++;
  return function (target, propertyKey) {
    /* istanbul ignore next */
    cov_2got4z3d80().f[17]++;
    cov_2got4z3d80().s[56]++;
    Object.defineProperty(target, propertyKey, {
      get: () => {
        /* istanbul ignore next */
        cov_2got4z3d80().f[18]++;
        cov_2got4z3d80().s[57]++;
        return getContainer().resolve(serviceName);
      },
      enumerable: true,
      configurable: false
    });
  };
}
/**
 * Cleanup middleware for long-running processes
 */
export function setupRequestContextCleanup() {
  /* istanbul ignore next */
  cov_2got4z3d80().f[19]++;
  cov_2got4z3d80().s[58]++;
  // Cleanup old request contexts every 5 minutes
  setInterval(() => {
    /* istanbul ignore next */
    cov_2got4z3d80().f[20]++;
    const now =
    /* istanbul ignore next */
    (cov_2got4z3d80().s[59]++, Date.now());
    const maxAge =
    /* istanbul ignore next */
    (cov_2got4z3d80().s[60]++, 5 * 60 * 1000); // 5 minutes
    /* istanbul ignore next */
    cov_2got4z3d80().s[61]++;
    for (const [requestId, context] of requestContexts.entries()) {
      /* istanbul ignore next */
      cov_2got4z3d80().s[62]++;
      if (now - context.startTime > maxAge) {
        /* istanbul ignore next */
        cov_2got4z3d80().b[16][0]++;
        cov_2got4z3d80().s[63]++;
        cleanupRequestContext(requestId);
      } else
      /* istanbul ignore next */
      {
        cov_2got4z3d80().b[16][1]++;
      }
    }
  }, 60 * 1000); // Run every minute
}
/**
 * Get request context statistics
 */
export function getRequestContextStats() {
  /* istanbul ignore next */
  cov_2got4z3d80().f[21]++;
  const activeRequests =
  /* istanbul ignore next */
  (cov_2got4z3d80().s[64]++, requestContexts.size);
  // This would need to be tracked separately for total requests
  // and average duration calculations
  /* istanbul ignore next */
  cov_2got4z3d80().s[65]++;
  return {
    activeRequests,
    totalRequests: 0,
    // Placeholder
    averageRequestDuration: 0 // Placeholder
  };
}
// Initialize cleanup on module load
/* istanbul ignore next */
cov_2got4z3d80().s[66]++;
setupRequestContextCleanup();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,