104a6193f1310330a53c933cd697edfe
"use strict";
/**
 * API Client for Testing
 * Provides utilities for making authenticated API requests in tests
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiClient = exports.ApiClient = void 0;
const supertest_1 = __importDefault(require("supertest"));
class ApiClient {
    constructor(baseUrl) {
        this.baseUrl = baseUrl || global.testConfig.apiBaseUrl;
        this.defaultTimeout = global.testConfig.apiTimeout;
    }
    /**
     * Make an authenticated GET request
     */
    async get(endpoint, user, options = {}) {
        return this.makeRequest('GET', endpoint, undefined, user, options);
    }
    /**
     * Make an authenticated POST request
     */
    async post(endpoint, data, user, options = {}) {
        return this.makeRequest('POST', endpoint, data, user, options);
    }
    /**
     * Make an authenticated PUT request
     */
    async put(endpoint, data, user, options = {}) {
        return this.makeRequest('PUT', endpoint, data, user, options);
    }
    /**
     * Make an authenticated DELETE request
     */
    async delete(endpoint, user, options = {}) {
        return this.makeRequest('DELETE', endpoint, undefined, user, options);
    }
    /**
     * Make a request without authentication
     */
    async publicGet(endpoint, options = {}) {
        return this.makeRequest('GET', endpoint, undefined, undefined, options);
    }
    /**
     * Make a request with custom headers
     */
    async requestWithHeaders(method, endpoint, data, headers, options = {}) {
        const customOptions = Object.assign(Object.assign({}, options), { headers: Object.assign(Object.assign({}, options.headers), headers) });
        return this.makeRequest(method, endpoint, data, undefined, customOptions);
    }
    /**
     * Core request method
     */
    async makeRequest(method, endpoint, data, user, options = {}) {
        const startTime = Date.now();
        // Create the request
        let req = (0, supertest_1.default)(this.baseUrl)[method.toLowerCase()](endpoint);
        // Set timeout
        const timeout = options.timeout || this.defaultTimeout;
        req = req.timeout(timeout);
        // Set authentication header
        if (user) {
            req = req.set('Authorization', `Bearer ${user.accessToken}`);
        }
        // Set custom headers
        if (options.headers) {
            Object.entries(options.headers).forEach(([key, value]) => {
                req = req.set(key, value);
            });
        }
        // Set content type for POST/PUT requests
        if ((method === 'POST' || method === 'PUT') && data) {
            req = req.set('Content-Type', 'application/json');
            req = req.send(data);
        }
        try {
            const response = await req;
            const responseTime = Date.now() - startTime;
            // Check expected status if provided
            if (options.expectStatus && response.status !== options.expectStatus) {
                throw new Error(`Expected status ${options.expectStatus} but got ${response.status}. Response: ${JSON.stringify(response.body)}`);
            }
            return {
                status: response.status,
                body: response.body,
                headers: response.headers,
                responseTime
            };
        }
        catch (error) {
            const responseTime = Date.now() - startTime;
            if (error.response) {
                // HTTP error response
                return {
                    status: error.response.status,
                    body: error.response.body,
                    headers: error.response.headers,
                    responseTime
                };
            }
            // Network or other error
            throw new Error(`Request failed: ${error.message}`);
        }
    }
    /**
     * Test endpoint performance
     */
    async testPerformance(method, endpoint, expectedMaxTime, user, data) {
        const response = await this.makeRequest(method, endpoint, data, user);
        const passed = response.responseTime <= expectedMaxTime;
        return { response, passed };
    }
    /**
     * Test concurrent requests
     */
    async testConcurrency(method, endpoint, concurrentRequests, user, data) {
        const promises = Array(concurrentRequests)
            .fill(null)
            .map(() => this.makeRequest(method, endpoint, data, user));
        return Promise.all(promises);
    }
    /**
     * Test with invalid JWT token
     */
    async testWithInvalidToken(method, endpoint, data) {
        const options = {
            headers: {
                'Authorization': 'Bearer invalid-token-12345'
            }
        };
        return this.makeRequest(method, endpoint, data, undefined, options);
    }
    /**
     * Test with expired JWT token
     */
    async testWithExpiredToken(method, endpoint, data) {
        // Create an expired JWT token (this is a mock expired token)
        const expiredToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyLCJleHAiOjE1MTYyMzkwMjJ9.invalid';
        const options = {
            headers: {
                'Authorization': `Bearer ${expiredToken}`
            }
        };
        return this.makeRequest(method, endpoint, data, undefined, options);
    }
    /**
     * Test with malformed authorization header
     */
    async testWithMalformedAuth(method, endpoint, authHeader, data) {
        const options = {
            headers: {
                'Authorization': authHeader
            }
        };
        return this.makeRequest(method, endpoint, data, undefined, options);
    }
}
exports.ApiClient = ApiClient;
// Export singleton instance
exports.apiClient = new ApiClient();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,