{"file":"C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\utils\\test-helpers.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\utils\\test-helpers.ts"],"sourcesContent":["/**\n * Test Helper Utilities\n * Common utilities and assertions for EmaPay API tests\n */\n\nimport { TestUser } from './user-factory';\nimport { ApiResponse } from './api-client';\n\n/**\n * Standard API response structure\n */\nexport interface StandardApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  code?: string;\n  message?: string;\n  timestamp?: string;\n}\n\n/**\n * Wallet balance structure\n */\nexport interface WalletBalance {\n  currency: string;\n  availableBalance: number;\n  reservedBalance: number;\n  totalBalance: number;\n}\n\n/**\n * Transfer structure\n */\nexport interface Transfer {\n  id: string;\n  fromUserId: string;\n  toUserId: string;\n  currency: string;\n  amount: number;\n  description?: string;\n  status: string;\n  createdAt: string;\n}\n\n/**\n * Order structure\n */\nexport interface Order {\n  id: string;\n  userId: string;\n  side: 'buy' | 'sell';\n  currency: string;\n  amount: number;\n  price?: number;\n  status: string;\n  createdAt: string;\n}\n\n/**\n * Test assertion helpers\n */\nexport class TestHelpers {\n  /**\n   * Assert that response is a successful API response\n   */\n  static assertSuccessResponse<T>(\n    response: ApiResponse<StandardApiResponse<T>>,\n    expectedStatus: number = 200\n  ): T {\n    expect(response.status).toBe(expectedStatus);\n    expect(response.body).toHaveProperty('success', true);\n    expect(response.body).toHaveProperty('data');\n    expect(response.body.error).toBeUndefined();\n    \n    return response.body.data!;\n  }\n\n  /**\n   * Assert that response is an error API response\n   */\n  static assertErrorResponse(\n    response: ApiResponse<StandardApiResponse>,\n    expectedStatus: number,\n    expectedErrorCode?: string\n  ): void {\n    expect(response.status).toBe(expectedStatus);\n    expect(response.body).toHaveProperty('success', false);\n    expect(response.body).toHaveProperty('error');\n    expect(response.body.data).toBeUndefined();\n    \n    if (expectedErrorCode) {\n      expect(response.body.code).toBe(expectedErrorCode);\n    }\n  }\n\n  /**\n   * Assert that response time is within acceptable limits\n   */\n  static assertResponseTime(\n    response: ApiResponse,\n    maxTimeMs: number\n  ): void {\n    expect(response.responseTime).toHaveResponseTime(maxTimeMs);\n  }\n\n  /**\n   * Assert that user data is valid\n   */\n  static assertValidUserData(userData: any): void {\n    expect(userData).toHaveProperty('userId');\n    expect(userData.userId).toBeValidUUID();\n    \n    if (userData.email) {\n      expect(userData.email).toBeValidEmail();\n    }\n    \n    expect(userData).toHaveProperty('authenticated', true);\n  }\n\n  /**\n   * Assert that wallet balance is valid\n   */\n  static assertValidWalletBalance(balance: WalletBalance): void {\n    expect(balance).toHaveProperty('currency');\n    expect(balance.currency).toBeValidCurrency();\n    \n    expect(balance).toHaveProperty('availableBalance');\n    expect(balance.availableBalance).toBeValidAmount();\n    \n    expect(balance).toHaveProperty('reservedBalance');\n    expect(balance.reservedBalance).toBeValidAmount();\n    \n    expect(balance).toHaveProperty('totalBalance');\n    expect(balance.totalBalance).toBeValidAmount();\n    \n    // Total balance should equal available + reserved\n    expect(balance.totalBalance).toBe(balance.availableBalance + balance.reservedBalance);\n  }\n\n  /**\n   * Assert that transfer data is valid\n   */\n  static assertValidTransfer(transfer: Transfer): void {\n    expect(transfer).toHaveProperty('id');\n    expect(transfer.id).toBeValidUUID();\n    \n    expect(transfer).toHaveProperty('fromUserId');\n    expect(transfer.fromUserId).toBeValidUUID();\n    \n    expect(transfer).toHaveProperty('toUserId');\n    expect(transfer.toUserId).toBeValidUUID();\n    \n    expect(transfer).toHaveProperty('currency');\n    expect(transfer.currency).toBeValidCurrency();\n    \n    expect(transfer).toHaveProperty('amount');\n    expect(transfer.amount).toBeValidAmount();\n    \n    expect(transfer).toHaveProperty('status');\n    expect(['pending', 'completed', 'failed', 'cancelled']).toContain(transfer.status);\n    \n    expect(transfer).toHaveProperty('createdAt');\n    expect(new Date(transfer.createdAt)).toBeInstanceOf(Date);\n  }\n\n  /**\n   * Assert that order data is valid\n   */\n  static assertValidOrder(order: Order): void {\n    expect(order).toHaveProperty('id');\n    expect(order.id).toBeValidUUID();\n    \n    expect(order).toHaveProperty('userId');\n    expect(order.userId).toBeValidUUID();\n    \n    expect(order).toHaveProperty('side');\n    expect(['buy', 'sell']).toContain(order.side);\n    \n    expect(order).toHaveProperty('currency');\n    expect(order.currency).toBeValidCurrency();\n    \n    expect(order).toHaveProperty('amount');\n    expect(order.amount).toBeValidAmount();\n    \n    if (order.price) {\n      expect(order.price).toBeValidAmount();\n    }\n    \n    expect(order).toHaveProperty('status');\n    expect(['pending', 'filled', 'cancelled', 'partial']).toContain(order.status);\n    \n    expect(order).toHaveProperty('createdAt');\n    expect(new Date(order.createdAt)).toBeInstanceOf(Date);\n  }\n\n  /**\n   * Assert that market data is valid\n   */\n  static assertValidMarketData(marketData: any): void {\n    expect(marketData).toHaveProperty('pair');\n    expect(marketData.pair).toBe('EUR/AOA');\n    \n    if (marketData.lastPrice) {\n      expect(marketData.lastPrice).toBeValidAmount();\n    }\n    \n    if (marketData.volume24h) {\n      expect(marketData.volume24h).toBeValidAmount();\n    }\n    \n    if (marketData.change24h) {\n      expect(typeof marketData.change24h).toBe('number');\n    }\n  }\n\n  /**\n   * Assert that order book data is valid\n   */\n  static assertValidOrderBook(orderBook: any): void {\n    expect(orderBook).toHaveProperty('bids');\n    expect(orderBook).toHaveProperty('asks');\n    expect(orderBook).toHaveProperty('timestamp');\n    \n    expect(Array.isArray(orderBook.bids)).toBe(true);\n    expect(Array.isArray(orderBook.asks)).toBe(true);\n    \n    // Check bid/ask structure\n    orderBook.bids.forEach((bid: any) => {\n      expect(bid).toHaveProperty('price');\n      expect(bid).toHaveProperty('amount');\n      expect(bid.price).toBeValidAmount();\n      expect(bid.amount).toBeValidAmount();\n    });\n    \n    orderBook.asks.forEach((ask: any) => {\n      expect(ask).toHaveProperty('price');\n      expect(ask).toHaveProperty('amount');\n      expect(ask.price).toBeValidAmount();\n      expect(ask.amount).toBeValidAmount();\n    });\n  }\n\n  /**\n   * Generate test data for transfers\n   */\n  static generateTransferData(\n    recipientId: string,\n    currency: 'EUR' | 'AOA' = 'EUR',\n    amount: number = 10.50\n  ) {\n    return {\n      recipientId,\n      currency,\n      amount,\n      pin: '123456',\n      description: `Test transfer ${Date.now()}`\n    };\n  }\n\n  /**\n   * Generate test data for limit orders\n   */\n  static generateLimitOrderData(\n    side: 'buy' | 'sell' = 'buy',\n    currency: 'EUR' | 'AOA' = 'EUR',\n    amount: number = 100,\n    price: number = 650\n  ) {\n    return {\n      side,\n      currency,\n      amount,\n      price,\n      pin: '123456'\n    };\n  }\n\n  /**\n   * Generate test data for market orders\n   */\n  static generateMarketOrderData(\n    side: 'buy' | 'sell' = 'buy',\n    currency: 'EUR' | 'AOA' = 'EUR',\n    amount: number = 100\n  ) {\n    return {\n      side,\n      currency,\n      amount,\n      pin: '123456'\n    };\n  }\n\n  /**\n   * Wait for a condition to be true\n   */\n  static async waitFor(\n    condition: () => Promise<boolean> | boolean,\n    timeoutMs: number = 5000,\n    intervalMs: number = 100\n  ): Promise<void> {\n    const startTime = Date.now();\n    \n    while (Date.now() - startTime < timeoutMs) {\n      if (await condition()) {\n        return;\n      }\n      await new Promise(resolve => setTimeout(resolve, intervalMs));\n    }\n    \n    throw new Error(`Condition not met within ${timeoutMs}ms`);\n  }\n\n  /**\n   * Create a test PIN for users\n   */\n  static generateTestPin(): string {\n    return '123456'; // Standard test PIN\n  }\n\n  /**\n   * Validate decimal precision\n   */\n  static assertDecimalPrecision(value: number, maxDecimals: number = 2): void {\n    const decimalPlaces = (value.toString().split('.')[1] || '').length;\n    expect(decimalPlaces).toBeLessThanOrEqual(maxDecimals);\n  }\n\n  /**\n   * Assert that arrays are sorted correctly\n   */\n  static assertSortedByDate(items: any[], dateField: string = 'createdAt', descending: boolean = true): void {\n    for (let i = 1; i < items.length; i++) {\n      const current = new Date(items[i][dateField]).getTime();\n      const previous = new Date(items[i - 1][dateField]).getTime();\n      \n      if (descending) {\n        expect(current).toBeLessThanOrEqual(previous);\n      } else {\n        expect(current).toBeGreaterThanOrEqual(previous);\n      }\n    }\n  }\n}\n\nexport { TestHelpers as helpers };\n"],"version":3}