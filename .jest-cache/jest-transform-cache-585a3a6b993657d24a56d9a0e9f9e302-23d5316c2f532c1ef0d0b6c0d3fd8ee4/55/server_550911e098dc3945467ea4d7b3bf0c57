d6a15f843348bf857abf60deb8b962fc
/* istanbul ignore next */
function cov_1v9sid4dw4() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\supabase\\server.ts";
  var hash = "0f35a51cfa128b54e7013d416c615f96e1843b7b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\supabase\\server.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 24
        },
        end: {
          line: 4,
          column: 60
        }
      },
      "1": {
        start: {
          line: 5,
          column: 31
        },
        end: {
          line: 5,
          column: 68
        }
      },
      "2": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 8,
          column: 5
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 7,
          column: 66
        }
      },
      "4": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "5": {
        start: {
          line: 18,
          column: 24
        },
        end: {
          line: 18,
          column: 60
        }
      },
      "6": {
        start: {
          line: 19,
          column: 28
        },
        end: {
          line: 19,
          column: 69
        }
      },
      "7": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "8": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 66
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "createServerSupabaseClient",
        decl: {
          start: {
            line: 3,
            column: 16
          },
          end: {
            line: 3,
            column: 42
          }
        },
        loc: {
          start: {
            line: 3,
            column: 45
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 3
      },
      "1": {
        name: "createClientSupabaseClient",
        decl: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 42
          }
        },
        loc: {
          start: {
            line: 17,
            column: 45
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 17
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 6
      },
      "1": {
        loc: {
          start: {
            line: 6,
            column: 8
          },
          end: {
            line: 6,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 6,
            column: 8
          },
          end: {
            line: 6,
            column: 20
          }
        }, {
          start: {
            line: 6,
            column: 24
          },
          end: {
            line: 6,
            column: 43
          }
        }],
        line: 6
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 20,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 20,
            column: 20
          }
        }, {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 40
          }
        }],
        line: 20
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\supabase\\server.ts",
      mappings: "AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AAErD,6CAA6C;AAC7C,MAAM,UAAU,0BAA0B;IACxC,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC;IACzD,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;IAEjE,IAAI,CAAC,WAAW,IAAI,CAAC,kBAAkB,EAAE,CAAC;QACxC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC5D,CAAC;IAED,OAAO,YAAY,CAAC,WAAW,EAAE,kBAAkB,EAAE;QACnD,IAAI,EAAE;YACJ,gBAAgB,EAAE,KAAK;YACvB,cAAc,EAAE,KAAK;SACtB;KACF,CAAC,CAAC;AACL,CAAC;AAED,gDAAgD;AAChD,MAAM,UAAU,0BAA0B;IACxC,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC;IACzD,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC;IAElE,IAAI,CAAC,WAAW,IAAI,CAAC,eAAe,EAAE,CAAC;QACrC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC5D,CAAC;IAED,OAAO,YAAY,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;AACpD,CAAC",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\supabase\\server.ts"],
      sourcesContent: ["import { createClient } from '@supabase/supabase-js';\n\n// Server-side Supabase client for API routes\nexport function createServerSupabaseClient() {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n  if (!supabaseUrl || !supabaseServiceKey) {\n    throw new Error('Missing Supabase environment variables');\n  }\n\n  return createClient(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  });\n}\n\n// Client-side Supabase client for browser usage\nexport function createClientSupabaseClient() {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n\n  if (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Missing Supabase environment variables');\n  }\n\n  return createClient(supabaseUrl, supabaseAnonKey);\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0f35a51cfa128b54e7013d416c615f96e1843b7b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1v9sid4dw4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1v9sid4dw4();
import { createClient } from '@supabase/supabase-js';
// Server-side Supabase client for API routes
export function createServerSupabaseClient() {
  /* istanbul ignore next */
  cov_1v9sid4dw4().f[0]++;
  const supabaseUrl =
  /* istanbul ignore next */
  (cov_1v9sid4dw4().s[0]++, process.env.NEXT_PUBLIC_SUPABASE_URL);
  const supabaseServiceKey =
  /* istanbul ignore next */
  (cov_1v9sid4dw4().s[1]++, process.env.SUPABASE_SERVICE_ROLE_KEY);
  /* istanbul ignore next */
  cov_1v9sid4dw4().s[2]++;
  if (
  /* istanbul ignore next */
  (cov_1v9sid4dw4().b[1][0]++, !supabaseUrl) ||
  /* istanbul ignore next */
  (cov_1v9sid4dw4().b[1][1]++, !supabaseServiceKey)) {
    /* istanbul ignore next */
    cov_1v9sid4dw4().b[0][0]++;
    cov_1v9sid4dw4().s[3]++;
    throw new Error('Missing Supabase environment variables');
  } else
  /* istanbul ignore next */
  {
    cov_1v9sid4dw4().b[0][1]++;
  }
  cov_1v9sid4dw4().s[4]++;
  return createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });
}
// Client-side Supabase client for browser usage
export function createClientSupabaseClient() {
  /* istanbul ignore next */
  cov_1v9sid4dw4().f[1]++;
  const supabaseUrl =
  /* istanbul ignore next */
  (cov_1v9sid4dw4().s[5]++, process.env.NEXT_PUBLIC_SUPABASE_URL);
  const supabaseAnonKey =
  /* istanbul ignore next */
  (cov_1v9sid4dw4().s[6]++, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
  /* istanbul ignore next */
  cov_1v9sid4dw4().s[7]++;
  if (
  /* istanbul ignore next */
  (cov_1v9sid4dw4().b[3][0]++, !supabaseUrl) ||
  /* istanbul ignore next */
  (cov_1v9sid4dw4().b[3][1]++, !supabaseAnonKey)) {
    /* istanbul ignore next */
    cov_1v9sid4dw4().b[2][0]++;
    cov_1v9sid4dw4().s[8]++;
    throw new Error('Missing Supabase environment variables');
  } else
  /* istanbul ignore next */
  {
    cov_1v9sid4dw4().b[2][1]++;
  }
  cov_1v9sid4dw4().s[9]++;
  return createClient(supabaseUrl, supabaseAnonKey);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMXY5c2lkNGR3NCIsImFjdHVhbENvdmVyYWdlIiwiY3JlYXRlQ2xpZW50IiwiY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQiLCJmIiwic3VwYWJhc2VVcmwiLCJzIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlU2VydmljZUtleSIsIlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkiLCJiIiwiRXJyb3IiLCJhdXRoIiwiYXV0b1JlZnJlc2hUb2tlbiIsInBlcnNpc3RTZXNzaW9uIiwiY3JlYXRlQ2xpZW50U3VwYWJhc2VDbGllbnQiLCJzdXBhYmFzZUFub25LZXkiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSJdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVXNlclxcRG9jdW1lbnRzXFxHaXRIdWJcXGVtYVxcc3JjXFxsaWJcXHN1cGFiYXNlXFxzZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL3N1cGFiYXNlLWpzJztcblxuLy8gU2VydmVyLXNpZGUgU3VwYWJhc2UgY2xpZW50IGZvciBBUEkgcm91dGVzXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VydmVyU3VwYWJhc2VDbGllbnQoKSB7XG4gIGNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMO1xuICBjb25zdCBzdXBhYmFzZVNlcnZpY2VLZXkgPSBwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZO1xuXG4gIGlmICghc3VwYWJhc2VVcmwgfHwgIXN1cGFiYXNlU2VydmljZUtleSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBTdXBhYmFzZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMnKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlU2VydmljZUtleSwge1xuICAgIGF1dGg6IHtcbiAgICAgIGF1dG9SZWZyZXNoVG9rZW46IGZhbHNlLFxuICAgICAgcGVyc2lzdFNlc3Npb246IGZhbHNlXG4gICAgfVxuICB9KTtcbn1cblxuLy8gQ2xpZW50LXNpZGUgU3VwYWJhc2UgY2xpZW50IGZvciBicm93c2VyIHVzYWdlXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xpZW50U3VwYWJhc2VDbGllbnQoKSB7XG4gIGNvbnN0IHN1cGFiYXNlVXJsID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMO1xuICBjb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWTtcblxuICBpZiAoIXN1cGFiYXNlVXJsIHx8ICFzdXBhYmFzZUFub25LZXkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgU3VwYWJhc2UgZW52aXJvbm1lbnQgdmFyaWFibGVzJyk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUFub25LZXkpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFtQkE7SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQW5CQSxTQUFTRSxZQUFZLFFBQVEsdUJBQXVCO0FBRXBEO0FBQ0EsT0FBTSxTQUFVQywwQkFBMEJBLENBQUE7RUFBQTtFQUFBSCxjQUFBLEdBQUFJLENBQUE7RUFDeEMsTUFBTUMsV0FBVztFQUFBO0VBQUEsQ0FBQUwsY0FBQSxHQUFBTSxDQUFBLE9BQUdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyx3QkFBd0I7RUFDeEQsTUFBTUMsa0JBQWtCO0VBQUE7RUFBQSxDQUFBVixjQUFBLEdBQUFNLENBQUEsT0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNHLHlCQUF5QjtFQUFDO0VBQUFYLGNBQUEsR0FBQU0sQ0FBQTtFQUVqRTtFQUFJO0VBQUEsQ0FBQU4sY0FBQSxHQUFBWSxDQUFBLFdBQUNQLFdBQVc7RUFBQTtFQUFBLENBQUFMLGNBQUEsR0FBQVksQ0FBQSxVQUFJLENBQUNGLGtCQUFrQixHQUFFO0lBQUE7SUFBQVYsY0FBQSxHQUFBWSxDQUFBO0lBQUFaLGNBQUEsR0FBQU0sQ0FBQTtJQUN2QyxNQUFNLElBQUlPLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQztFQUMzRCxDQUFDO0VBQUE7RUFBQTtJQUFBYixjQUFBLEdBQUFZLENBQUE7RUFBQTtFQUFBWixjQUFBLEdBQUFNLENBQUE7RUFFRCxPQUFPSixZQUFZLENBQUNHLFdBQVcsRUFBRUssa0JBQWtCLEVBQUU7SUFDbkRJLElBQUksRUFBRTtNQUNKQyxnQkFBZ0IsRUFBRSxLQUFLO01BQ3ZCQyxjQUFjLEVBQUU7O0dBRW5CLENBQUM7QUFDSjtBQUVBO0FBQ0EsT0FBTSxTQUFVQywwQkFBMEJBLENBQUE7RUFBQTtFQUFBakIsY0FBQSxHQUFBSSxDQUFBO0VBQ3hDLE1BQU1DLFdBQVc7RUFBQTtFQUFBLENBQUFMLGNBQUEsR0FBQU0sQ0FBQSxPQUFHQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0Msd0JBQXdCO0VBQ3hELE1BQU1TLGVBQWU7RUFBQTtFQUFBLENBQUFsQixjQUFBLEdBQUFNLENBQUEsT0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNXLDZCQUE2QjtFQUFDO0VBQUFuQixjQUFBLEdBQUFNLENBQUE7RUFFbEU7RUFBSTtFQUFBLENBQUFOLGNBQUEsR0FBQVksQ0FBQSxXQUFDUCxXQUFXO0VBQUE7RUFBQSxDQUFBTCxjQUFBLEdBQUFZLENBQUEsVUFBSSxDQUFDTSxlQUFlLEdBQUU7SUFBQTtJQUFBbEIsY0FBQSxHQUFBWSxDQUFBO0lBQUFaLGNBQUEsR0FBQU0sQ0FBQTtJQUNwQyxNQUFNLElBQUlPLEtBQUssQ0FBQyx3Q0FBd0MsQ0FBQztFQUMzRCxDQUFDO0VBQUE7RUFBQTtJQUFBYixjQUFBLEdBQUFZLENBQUE7RUFBQTtFQUFBWixjQUFBLEdBQUFNLENBQUE7RUFFRCxPQUFPSixZQUFZLENBQUNHLFdBQVcsRUFBRWEsZUFBZSxDQUFDO0FBQ25EIiwiaWdub3JlTGlzdCI6W119