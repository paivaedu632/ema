{"version":3,"names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\WalletRepository.ts"],"sourcesContent":["/**\n * Wallet Repository Interface\n * \n * Defines the contract for wallet data access operations.\n * This interface abstracts the data layer from the domain layer.\n */\n\nimport { Wallet, WalletSnapshot } from '../entities/Wallet'\nimport { WalletId, UserId } from '../value-objects/EntityId'\nimport { Currency } from '../value-objects/Currency'\nimport { Money } from '../value-objects/Money'\n\nexport interface WalletRepository {\n  /**\n   * Find wallet by ID\n   */\n  findById(id: WalletId): Promise<Wallet | null>\n\n  /**\n   * Find wallet by user ID and currency\n   */\n  findByUserIdAndCurrency(userId: UserId, currency: Currency): Promise<Wallet | null>\n\n  /**\n   * Find all wallets for a user\n   */\n  findByUserId(userId: UserId): Promise<Wallet[]>\n\n  /**\n   * Save wallet (create or update)\n   */\n  save(wallet: Wallet): Promise<void>\n\n  /**\n   * Save multiple wallets in a transaction\n   */\n  saveMany(wallets: Wallet[]): Promise<void>\n\n  /**\n   * Delete wallet\n   */\n  delete(id: WalletId): Promise<void>\n\n  /**\n   * Check if wallet exists for user and currency\n   */\n  existsByUserIdAndCurrency(userId: UserId, currency: Currency): Promise<boolean>\n\n  /**\n   * Get total balance across all wallets for a user\n   */\n  getTotalBalanceByUserId(userId: UserId): Promise<Map<Currency, Money>>\n\n  /**\n   * Find wallets with balance above threshold\n   */\n  findWithBalanceAbove(currency: Currency, threshold: Money): Promise<Wallet[]>\n\n  /**\n   * Find wallets with reserved balance\n   */\n  findWithReservedBalance(currency: Currency): Promise<Wallet[]>\n\n  /**\n   * Get wallet statistics\n   */\n  getWalletStatistics(): Promise<{\n    totalWallets: number\n    totalBalanceByCurrency: Map<Currency, Money>\n    totalReservedByurrency: Map<Currency, Money>\n    activeWallets: number\n  }>\n\n  /**\n   * Find wallets updated within date range\n   */\n  findUpdatedWithinRange(startDate: Date, endDate: Date): Promise<Wallet[]>\n\n  /**\n   * Atomic balance update operation\n   */\n  updateBalance(\n    walletId: WalletId,\n    availableBalanceChange: Money,\n    reservedBalanceChange: Money\n  ): Promise<void>\n\n  /**\n   * Transfer funds between wallets atomically\n   */\n  transferFunds(\n    fromWalletId: WalletId,\n    toWalletId: WalletId,\n    amount: Money\n  ): Promise<void>\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","ignoreList":[]}