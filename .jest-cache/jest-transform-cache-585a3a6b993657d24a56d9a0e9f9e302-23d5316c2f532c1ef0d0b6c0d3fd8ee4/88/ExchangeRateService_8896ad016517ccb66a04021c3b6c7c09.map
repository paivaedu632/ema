{"version":3,"names":["cov_20xrscj23","actualCoverage","Money","Currency","ExchangeRateService","constructor","rateProvider","f","s","convertMoney","amount","targetCurrency","useCurrentRate","b","currency","equals","exchangeRate","getCurrentRate","convertedAmount","rate","fromNumber","calculateExchangeAmount","inputAmount","outputCurrency","fromCurrency","toCurrency","timestamp","Date","source","outputAmount","calculateInverseRate","validateExchangeRate","expectedRate","tolerancePercentage","difference","Math","abs","tolerance","isRateStale","maxAgeMinutes","now","ageMinutes","getTime","getSupportedPairs","from","EUR","to","AOA","isPairSupported","some","pair","calculateSpread","buyRate","sellRate","applySpread","baseRate","spreadPercentage","operation","spreadMultiplier","MockExchangeRateProvider","mockRates","Map","key","code","get","Error","getHistoricalRate","date","setMockRate","set","inverseKey"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\services\\ExchangeRateService.ts"],"sourcesContent":["/**\n * Exchange Rate Domain Service\n * \n * Handles currency exchange rate calculations and validations.\n * Contains business logic for exchange rate operations.\n */\n\nimport { Money } from '../value-objects/Money'\nimport { Currency } from '../value-objects/Currency'\n\nexport interface ExchangeRate {\n  fromCurrency: Currency\n  toCurrency: Currency\n  rate: number\n  timestamp: Date\n  source: string\n}\n\nexport interface ExchangeRateProvider {\n  getCurrentRate(fromCurrency: Currency, toCurrency: Currency): Promise<ExchangeRate>\n  getHistoricalRate(fromCurrency: Currency, toCurrency: Currency, date: Date): Promise<ExchangeRate>\n}\n\nexport class ExchangeRateService {\n  private readonly rateProvider: ExchangeRateProvider\n\n  constructor(rateProvider: ExchangeRateProvider) {\n    this.rateProvider = rateProvider\n  }\n\n  /**\n   * Convert money from one currency to another\n   */\n  async convertMoney(\n    amount: Money,\n    targetCurrency: Currency,\n    useCurrentRate: boolean = true\n  ): Promise<Money> {\n    if (amount.currency.equals(targetCurrency)) {\n      return amount\n    }\n\n    const exchangeRate = useCurrentRate\n      ? await this.rateProvider.getCurrentRate(amount.currency, targetCurrency)\n      : await this.rateProvider.getCurrentRate(amount.currency, targetCurrency)\n\n    const convertedAmount = amount.amount * exchangeRate.rate\n    return Money.fromNumber(convertedAmount, targetCurrency)\n  }\n\n  /**\n   * Calculate exchange amount for a given input\n   */\n  async calculateExchangeAmount(\n    inputAmount: Money,\n    outputCurrency: Currency,\n    exchangeRate?: number\n  ): Promise<{ outputAmount: Money; rate: ExchangeRate }> {\n    let rate: ExchangeRate\n\n    if (exchangeRate) {\n      // Use provided rate\n      rate = {\n        fromCurrency: inputAmount.currency,\n        toCurrency: outputCurrency,\n        rate: exchangeRate,\n        timestamp: new Date(),\n        source: 'manual'\n      }\n    } else {\n      // Get current market rate\n      rate = await this.rateProvider.getCurrentRate(inputAmount.currency, outputCurrency)\n    }\n\n    const outputAmount = Money.fromNumber(\n      inputAmount.amount * rate.rate,\n      outputCurrency\n    )\n\n    return { outputAmount, rate }\n  }\n\n  /**\n   * Calculate the inverse exchange rate\n   */\n  calculateInverseRate(rate: ExchangeRate): ExchangeRate {\n    return {\n      fromCurrency: rate.toCurrency,\n      toCurrency: rate.fromCurrency,\n      rate: 1 / rate.rate,\n      timestamp: rate.timestamp,\n      source: rate.source\n    }\n  }\n\n  /**\n   * Validate exchange rate is within acceptable bounds\n   */\n  validateExchangeRate(\n    rate: ExchangeRate,\n    expectedRate?: number,\n    tolerancePercentage: number = 5\n  ): boolean {\n    if (!expectedRate) {\n      return true\n    }\n\n    const difference = Math.abs(rate.rate - expectedRate)\n    const tolerance = expectedRate * (tolerancePercentage / 100)\n    \n    return difference <= tolerance\n  }\n\n  /**\n   * Check if exchange rate is stale\n   */\n  isRateStale(rate: ExchangeRate, maxAgeMinutes: number = 5): boolean {\n    const now = new Date()\n    const ageMinutes = (now.getTime() - rate.timestamp.getTime()) / (1000 * 60)\n    return ageMinutes > maxAgeMinutes\n  }\n\n  /**\n   * Get supported currency pairs\n   */\n  getSupportedPairs(): Array<{ from: Currency; to: Currency }> {\n    return [\n      { from: Currency.EUR(), to: Currency.AOA() },\n      { from: Currency.AOA(), to: Currency.EUR() }\n    ]\n  }\n\n  /**\n   * Check if currency pair is supported\n   */\n  isPairSupported(fromCurrency: Currency, toCurrency: Currency): boolean {\n    return this.getSupportedPairs().some(pair =>\n      pair.from.equals(fromCurrency) && pair.to.equals(toCurrency)\n    )\n  }\n\n  /**\n   * Calculate spread between buy and sell rates\n   */\n  calculateSpread(buyRate: number, sellRate: number): number {\n    return Math.abs(buyRate - sellRate) / ((buyRate + sellRate) / 2) * 100\n  }\n\n  /**\n   * Apply spread to exchange rate\n   */\n  applySpread(\n    baseRate: number,\n    spreadPercentage: number,\n    operation: 'buy' | 'sell'\n  ): number {\n    const spreadMultiplier = spreadPercentage / 100\n    \n    if (operation === 'buy') {\n      // When buying foreign currency, rate is higher (less favorable)\n      return baseRate * (1 + spreadMultiplier)\n    } else {\n      // When selling foreign currency, rate is lower (less favorable)\n      return baseRate * (1 - spreadMultiplier)\n    }\n  }\n}\n\n/**\n * Mock Exchange Rate Provider for testing and development\n */\nexport class MockExchangeRateProvider implements ExchangeRateProvider {\n  private readonly mockRates: Map<string, number> = new Map([\n    ['EUR-AOA', 1200], // 1 EUR = 1200 AOA\n    ['AOA-EUR', 1/1200] // 1 AOA = 0.000833 EUR\n  ])\n\n  async getCurrentRate(fromCurrency: Currency, toCurrency: Currency): Promise<ExchangeRate> {\n    const key = `${fromCurrency.code}-${toCurrency.code}`\n    const rate = this.mockRates.get(key)\n    \n    if (!rate) {\n      throw new Error(`Exchange rate not available for ${fromCurrency.code} to ${toCurrency.code}`)\n    }\n\n    return {\n      fromCurrency,\n      toCurrency,\n      rate,\n      timestamp: new Date(),\n      source: 'mock'\n    }\n  }\n\n  async getHistoricalRate(\n    fromCurrency: Currency,\n    toCurrency: Currency,\n    date: Date\n  ): Promise<ExchangeRate> {\n    // For mock, return current rate\n    return this.getCurrentRate(fromCurrency, toCurrency)\n  }\n\n  /**\n   * Update mock rate for testing\n   */\n  setMockRate(fromCurrency: Currency, toCurrency: Currency, rate: number): void {\n    const key = `${fromCurrency.code}-${toCurrency.code}`\n    this.mockRates.set(key, rate)\n    \n    // Also set inverse rate\n    const inverseKey = `${toCurrency.code}-${fromCurrency.code}`\n    this.mockRates.set(inverseKey, 1 / rate)\n  }\n}\n"],"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","ignoreList":[]}