{"version":3,"names":["cov_l4irtuctr","actualCoverage","withAuth","createSuccessResponse","withErrorHandling","withCors","getWalletBalance","walletBalanceHandler","request","user","f","currencies","s","balances","currency","result","user_id","userId","success","b","walletData","data","availableBalance","available_balance","reservedBalance","reserved_balance","totalBalance","responseData","timestamp","Date","toISOString","GET"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\wallets\\balance\\route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { withAuth, AuthenticatedUser } from '@/lib/auth/middleware';\nimport { createSuccessResponse, withErrorHandling } from '@/lib/api/responses';\nimport { withCors } from '@/lib/api/cors';\nimport { getWalletBalance } from '@/lib/database/functions';\n\nasync function walletBalanceHandler(request: NextRequest, user: AuthenticatedUser) {\n  // Get balances for all supported currencies\n  const currencies = ['EUR', 'AOA'];\n  const balances: Record<string, { currency: string; availableBalance: number; reservedBalance: number; totalBalance: number }> = {};\n\n  for (const currency of currencies) {\n    const result = await getWalletBalance({\n      user_id: user.userId,\n      currency\n    });\n\n    if (result.success) {\n      const walletData = result.data as { available_balance?: number; reserved_balance?: number } | undefined;\n      balances[currency] = {\n        currency,\n        availableBalance: walletData?.available_balance || 0,\n        reservedBalance: walletData?.reserved_balance || 0,\n        totalBalance: (walletData?.available_balance || 0) + (walletData?.reserved_balance || 0)\n      };\n    } else {\n      // If wallet doesn't exist, return zero balances\n      balances[currency] = {\n        currency,\n        availableBalance: 0,\n        reservedBalance: 0,\n        totalBalance: 0\n      };\n    }\n  }\n\n  const responseData = {\n    userId: user.userId,\n    balances,\n    timestamp: new Date().toISOString()\n  };\n\n  return createSuccessResponse(responseData, 'Wallet balances retrieved successfully');\n}\n\nexport const GET = withCors(withErrorHandling(withAuth(walletBalanceHandler)));\n"],"mappings":"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","ignoreList":[]}