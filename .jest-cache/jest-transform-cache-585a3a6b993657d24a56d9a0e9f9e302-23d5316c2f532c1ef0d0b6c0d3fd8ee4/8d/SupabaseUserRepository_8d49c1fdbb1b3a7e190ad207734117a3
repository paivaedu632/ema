d899c2878beeb3049e3dfc2fc12a6bc4
/* istanbul ignore next */
function cov_1yktyuh9ow() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\repositories\\SupabaseUserRepository.ts";
  var hash = "afb8704d2008ab0f2051b71402c6837d25624e65";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\repositories\\SupabaseUserRepository.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 33
        }
      },
      "1": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "2": {
        start: {
          line: 18,
          column: 36
        },
        end: {
          line: 22,
          column: 25
        }
      },
      "3": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "4": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 26,
          column: 17
        }
      },
      "5": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 32
        }
      },
      "6": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 116
        }
      },
      "7": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 42
        }
      },
      "8": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "9": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 28
        }
      },
      "10": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 104
        }
      },
      "11": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "12": {
        start: {
          line: 40,
          column: 36
        },
        end: {
          line: 44,
          column: 25
        }
      },
      "13": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "14": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 48,
          column: 17
        }
      },
      "15": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 32
        }
      },
      "16": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 127
        }
      },
      "17": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 42
        }
      },
      "18": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "19": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 28
        }
      },
      "20": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 115
        }
      },
      "21": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "22": {
        start: {
          line: 62,
          column: 36
        },
        end: {
          line: 66,
          column: 25
        }
      },
      "23": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "24": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 70,
          column: 17
        }
      },
      "25": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 32
        }
      },
      "26": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 122
        }
      },
      "27": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 42
        }
      },
      "28": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 78,
          column: 13
        }
      },
      "29": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 77,
          column: 28
        }
      },
      "30": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 110
        }
      },
      "31": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "32": {
        start: {
          line: 84,
          column: 29
        },
        end: {
          line: 84,
          column: 46
        }
      },
      "33": {
        start: {
          line: 85,
          column: 27
        },
        end: {
          line: 85,
          column: 55
        }
      },
      "34": {
        start: {
          line: 86,
          column: 30
        },
        end: {
          line: 90,
          column: 14
        }
      },
      "35": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "36": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 106
        }
      },
      "37": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "38": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 28
        }
      },
      "39": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 93
        }
      },
      "40": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "41": {
        start: {
          line: 104,
          column: 30
        },
        end: {
          line: 107,
          column: 35
        }
      },
      "42": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 110,
          column: 13
        }
      },
      "43": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 110
        }
      },
      "44": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "45": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 28
        }
      },
      "46": {
        start: {
          line: 116,
          column: 12
        },
        end: {
          line: 116,
          column: 97
        }
      },
      "47": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "48": {
        start: {
          line: 121,
          column: 36
        },
        end: {
          line: 125,
          column: 25
        }
      },
      "49": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "50": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 135
        }
      },
      "51": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 33
        }
      },
      "52": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 134,
          column: 13
        }
      },
      "53": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 133,
          column: 28
        }
      },
      "54": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 123
        }
      },
      "55": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "56": {
        start: {
          line: 140,
          column: 36
        },
        end: {
          line: 144,
          column: 25
        }
      },
      "57": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "58": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 140
        }
      },
      "59": {
        start: {
          line: 148,
          column: 12
        },
        end: {
          line: 148,
          column: 33
        }
      },
      "60": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "61": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 28
        }
      },
      "62": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 128
        }
      },
      "63": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "64": {
        start: {
          line: 159,
          column: 36
        },
        end: {
          line: 162,
          column: 41
        }
      },
      "65": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "66": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 164,
          column: 132
        }
      },
      "67": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 60
        }
      },
      "68": {
        start: {
          line: 166,
          column: 36
        },
        end: {
          line: 166,
          column: 58
        }
      },
      "69": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "70": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 28
        }
      },
      "71": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 120
        }
      },
      "72": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 192,
          column: 9
        }
      },
      "73": {
        start: {
          line: 177,
          column: 36
        },
        end: {
          line: 181,
          column: 57
        }
      },
      "74": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "75": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 139
        }
      },
      "76": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 60
        }
      },
      "77": {
        start: {
          line: 185,
          column: 36
        },
        end: {
          line: 185,
          column: 58
        }
      },
      "78": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 190,
          column: 13
        }
      },
      "79": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 28
        }
      },
      "80": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 127
        }
      },
      "81": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "82": {
        start: {
          line: 196,
          column: 37
        },
        end: {
          line: 198,
          column: 60
        }
      },
      "83": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "84": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 109
        }
      },
      "85": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 30
        }
      },
      "86": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "87": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 28
        }
      },
      "88": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 208,
          column: 97
        }
      },
      "89": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 231,
          column: 9
        }
      },
      "90": {
        start: {
          line: 213,
          column: 43
        },
        end: {
          line: 217,
          column: 50
        }
      },
      "91": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 220,
          column: 13
        }
      },
      "92": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 137
        }
      },
      "93": {
        start: {
          line: 221,
          column: 26
        },
        end: {
          line: 221,
          column: 66
        }
      },
      "94": {
        start: {
          line: 221,
          column: 43
        },
        end: {
          line: 221,
          column: 65
        }
      },
      "95": {
        start: {
          line: 222,
          column: 26
        },
        end: {
          line: 222,
          column: 36
        }
      },
      "96": {
        start: {
          line: 223,
          column: 28
        },
        end: {
          line: 223,
          column: 50
        }
      },
      "97": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 45
        }
      },
      "98": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 229,
          column: 13
        }
      },
      "99": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 228,
          column: 28
        }
      },
      "100": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 230,
          column: 125
        }
      },
      "101": {
        start: {
          line: 238,
          column: 23
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "102": {
        start: {
          line: 244,
          column: 25
        },
        end: {
          line: 257,
          column: 9
        }
      },
      "103": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 43
        }
      },
      "104": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 281,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 37
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 38
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        loc: {
          start: {
            line: 60,
            column: 29
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 60
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 21
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 82
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 21
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 102
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 31
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 119
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 138,
            column: 5
          }
        },
        loc: {
          start: {
            line: 138,
            column: 39
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 138
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 34
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 157
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 166,
            column: 28
          },
          end: {
            line: 166,
            column: 29
          }
        },
        loc: {
          start: {
            line: 166,
            column: 36
          },
          end: {
            line: 166,
            column: 58
          }
        },
        line: 166
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 53
          },
          end: {
            line: 193,
            column: 5
          }
        },
        line: 175
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 185,
            column: 28
          },
          end: {
            line: 185,
            column: 29
          }
        },
        loc: {
          start: {
            line: 185,
            column: 36
          },
          end: {
            line: 185,
            column: 58
          }
        },
        line: 185
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 194,
            column: 4
          },
          end: {
            line: 194,
            column: 5
          }
        },
        loc: {
          start: {
            line: 194,
            column: 18
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 194
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 93
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 211
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 221,
            column: 35
          },
          end: {
            line: 221,
            column: 36
          }
        },
        loc: {
          start: {
            line: 221,
            column: 43
          },
          end: {
            line: 221,
            column: 65
          }
        },
        line: 221
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 5
          }
        },
        loc: {
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 259,
            column: 5
          }
        },
        line: 236
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 263,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        loc: {
          start: {
            line: 263,
            column: 28
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 263
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 26,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 26,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 48,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 48,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "6": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "7": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "8": {
        loc: {
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 12
          },
          end: {
            line: 78,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "9": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "10": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "11": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "12": {
        loc: {
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "13": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "14": {
        loc: {
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 126,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 126,
            column: 21
          }
        }, {
          start: {
            line: 126,
            column: 25
          },
          end: {
            line: 126,
            column: 50
          }
        }],
        line: 126
      },
      "15": {
        loc: {
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 132,
            column: 12
          },
          end: {
            line: 134,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 132
      },
      "16": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "17": {
        loc: {
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 145,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 16
          },
          end: {
            line: 145,
            column: 21
          }
        }, {
          start: {
            line: 145,
            column: 25
          },
          end: {
            line: 145,
            column: 50
          }
        }],
        line: 145
      },
      "18": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "19": {
        loc: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 165,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "20": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "21": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "22": {
        loc: {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 190,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "23": {
        loc: {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "24": {
        loc: {
          start: {
            line: 202,
            column: 19
          },
          end: {
            line: 202,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 19
          },
          end: {
            line: 202,
            column: 24
          }
        }, {
          start: {
            line: 202,
            column: 28
          },
          end: {
            line: 202,
            column: 29
          }
        }],
        line: 202
      },
      "25": {
        loc: {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "26": {
        loc: {
          start: {
            line: 211,
            column: 44
          },
          end: {
            line: 211,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 211,
            column: 54
          },
          end: {
            line: 211,
            column: 66
          }
        }],
        line: 211
      },
      "27": {
        loc: {
          start: {
            line: 211,
            column: 68
          },
          end: {
            line: 211,
            column: 91
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 211,
            column: 85
          },
          end: {
            line: 211,
            column: 91
          }
        }],
        line: 211
      },
      "28": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 220,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "29": {
        loc: {
          start: {
            line: 222,
            column: 26
          },
          end: {
            line: 222,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 26
          },
          end: {
            line: 222,
            column: 31
          }
        }, {
          start: {
            line: 222,
            column: 35
          },
          end: {
            line: 222,
            column: 36
          }
        }],
        line: 222
      },
      "30": {
        loc: {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 229,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "31": {
        loc: {
          start: {
            line: 248,
            column: 22
          },
          end: {
            line: 248,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 62
          },
          end: {
            line: 248,
            column: 104
          }
        }, {
          start: {
            line: 248,
            column: 107
          },
          end: {
            line: 248,
            column: 119
          }
        }],
        line: 248
      },
      "32": {
        loc: {
          start: {
            line: 248,
            column: 22
          },
          end: {
            line: 248,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 22
          },
          end: {
            line: 248,
            column: 39
          }
        }, {
          start: {
            line: 248,
            column: 43
          },
          end: {
            line: 248,
            column: 59
          }
        }],
        line: 248
      },
      "33": {
        loc: {
          start: {
            line: 250,
            column: 23
          },
          end: {
            line: 250,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 23
          },
          end: {
            line: 250,
            column: 40
          }
        }, {
          start: {
            line: 250,
            column: 44
          },
          end: {
            line: 250,
            column: 53
          }
        }],
        line: 250
      },
      "34": {
        loc: {
          start: {
            line: 272,
            column: 30
          },
          end: {
            line: 272,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 89
          },
          end: {
            line: 272,
            column: 95
          }
        }, {
          start: {
            line: 272,
            column: 98
          },
          end: {
            line: 272,
            column: 114
          }
        }],
        line: 272
      },
      "35": {
        loc: {
          start: {
            line: 272,
            column: 30
          },
          end: {
            line: 272,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 30
          },
          end: {
            line: 272,
            column: 69
          }
        }, {
          start: {
            line: 272,
            column: 73
          },
          end: {
            line: 272,
            column: 86
          }
        }],
        line: 272
      },
      "36": {
        loc: {
          start: {
            line: 280,
            column: 27
          },
          end: {
            line: 280,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 83
          },
          end: {
            line: 280,
            column: 89
          }
        }, {
          start: {
            line: 280,
            column: 92
          },
          end: {
            line: 280,
            column: 108
          }
        }],
        line: 280
      },
      "37": {
        loc: {
          start: {
            line: 280,
            column: 27
          },
          end: {
            line: 280,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 27
          },
          end: {
            line: 280,
            column: 63
          }
        }, {
          start: {
            line: 280,
            column: 67
          },
          end: {
            line: 280,
            column: 80
          }
        }],
        line: 280
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0],
      "27": [0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\repositories\\SupabaseUserRepository.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\repositories\\SupabaseUserRepository.ts"],
      sourcesContent: ["/**\n * Supabase User Repository Implementation\n * \n * Implements UserRepository interface using Supabase as the data store.\n * Handles mapping between domain entities and database records.\n */\n\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { UserRepository } from '../../domain/repositories/UserRepository'\nimport { User, UserSnapshot, KycStatus, UserLimits } from '../../domain/entities/User'\nimport { UserId } from '../../domain/value-objects/EntityId'\nimport { Money } from '../../domain/value-objects/Money'\nimport { Currency } from '../../domain/value-objects/Currency'\nimport { EntityNotFoundError, RepositoryError } from '../../domain/repositories'\n\ninterface DatabaseUser {\n  id: string\n  clerk_user_id: string\n  email: string\n  first_name?: string\n  last_name?: string\n  phone?: string\n  kyc_status?: string\n  created_at: string\n  updated_at: string\n  // Note: limit fields don't exist in current database schema\n  // Using default values in mapToDomain method\n}\n\nexport class SupabaseUserRepository implements UserRepository {\n  constructor(private readonly supabase: SupabaseClient) {}\n\n  async findById(id: UserId): Promise<User | null> {\n    try {\n      const { data, error } = await this.supabase\n        .from('users')\n        .select('*')\n        .eq('id', id.value)\n        .single()\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null // Not found\n        }\n        throw new RepositoryError(\n          `Failed to find user by ID: ${error.message}`,\n          'findById',\n          'User',\n          error\n        )\n      }\n\n      return this.mapToDomain(data)\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding user by ID`,\n        'findById',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async findByClerkId(clerkUserId: string): Promise<User | null> {\n    try {\n      const { data, error } = await this.supabase\n        .from('users')\n        .select('*')\n        .eq('clerk_user_id', clerkUserId)\n        .single()\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null // Not found\n        }\n        throw new RepositoryError(\n          `Failed to find user by Clerk ID: ${error.message}`,\n          'findByClerkId',\n          'User',\n          error\n        )\n      }\n\n      return this.mapToDomain(data)\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding user by Clerk ID`,\n        'findByClerkId',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async findByEmail(email: string): Promise<User | null> {\n    try {\n      const { data, error } = await this.supabase\n        .from('users')\n        .select('*')\n        .eq('email', email.toLowerCase())\n        .single()\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null // Not found\n        }\n        throw new RepositoryError(\n          `Failed to find user by email: ${error.message}`,\n          'findByEmail',\n          'User',\n          error\n        )\n      }\n\n      return this.mapToDomain(data)\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding user by email`,\n        'findByEmail',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async save(user: User): Promise<void> {\n    try {\n      const snapshot = user.toSnapshot()\n      const dbUser = this.mapToDatabase(snapshot)\n\n      const { error } = await this.supabase\n        .from('users')\n        .upsert(dbUser, {\n          onConflict: 'id'\n        })\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to save user: ${error.message}`,\n          'save',\n          'User',\n          error\n        )\n      }\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error saving user`,\n        'save',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async delete(id: UserId): Promise<void> {\n    try {\n      const { error } = await this.supabase\n        .from('users')\n        .delete()\n        .eq('id', id.value)\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to delete user: ${error.message}`,\n          'delete',\n          'User',\n          error\n        )\n      }\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error deleting user`,\n        'delete',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async existsByEmail(email: string): Promise<boolean> {\n    try {\n      const { data, error } = await this.supabase\n        .from('users')\n        .select('id')\n        .eq('email', email.toLowerCase())\n        .single()\n\n      if (error && error.code !== 'PGRST116') {\n        throw new RepositoryError(\n          `Failed to check user existence by email: ${error.message}`,\n          'existsByEmail',\n          'User',\n          error\n        )\n      }\n\n      return data !== null\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error checking user existence by email`,\n        'existsByEmail',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async existsByClerkId(clerkUserId: string): Promise<boolean> {\n    try {\n      const { data, error } = await this.supabase\n        .from('users')\n        .select('id')\n        .eq('clerk_user_id', clerkUserId)\n        .single()\n\n      if (error && error.code !== 'PGRST116') {\n        throw new RepositoryError(\n          `Failed to check user existence by Clerk ID: ${error.message}`,\n          'existsByClerkId',\n          'User',\n          error\n        )\n      }\n\n      return data !== null\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error checking user existence by Clerk ID`,\n        'existsByClerkId',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async findByKycStatus(status: string): Promise<User[]> {\n    try {\n      const { data, error } = await this.supabase\n        .from('users')\n        .select('*')\n        .eq('kyc_status', status)\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to find users by KYC status: ${error.message}`,\n          'findByKycStatus',\n          'User',\n          error\n        )\n      }\n\n      return data.map(user => this.mapToDomain(user))\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding users by KYC status`,\n        'findByKycStatus',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async findByCreatedDateRange(startDate: Date, endDate: Date): Promise<User[]> {\n    try {\n      const { data, error } = await this.supabase\n        .from('users')\n        .select('*')\n        .gte('created_at', startDate.toISOString())\n        .lte('created_at', endDate.toISOString())\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to find users by date range: ${error.message}`,\n          'findByCreatedDateRange',\n          'User',\n          error\n        )\n      }\n\n      return data.map(user => this.mapToDomain(user))\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding users by date range`,\n        'findByCreatedDateRange',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async count(): Promise<number> {\n    try {\n      const { count, error } = await this.supabase\n        .from('users')\n        .select('*', { count: 'exact', head: true })\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to count users: ${error.message}`,\n          'count',\n          'User',\n          error\n        )\n      }\n\n      return count || 0\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error counting users`,\n        'count',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  async findWithPagination(\n    offset: number,\n    limit: number,\n    orderBy: 'created_at' | 'updated_at' | 'email' = 'created_at',\n    orderDirection: 'asc' | 'desc' = 'desc'\n  ): Promise<{\n    users: User[]\n    total: number\n    hasMore: boolean\n  }> {\n    try {\n      const { data, error, count } = await this.supabase\n        .from('users')\n        .select('*', { count: 'exact' })\n        .order(orderBy, { ascending: orderDirection === 'asc' })\n        .range(offset, offset + limit - 1)\n\n      if (error) {\n        throw new RepositoryError(\n          `Failed to find users with pagination: ${error.message}`,\n          'findWithPagination',\n          'User',\n          error\n        )\n      }\n\n      const users = data.map(user => this.mapToDomain(user))\n      const total = count || 0\n      const hasMore = offset + limit < total\n\n      return { users, total, hasMore }\n    } catch (error) {\n      if (error instanceof RepositoryError) {\n        throw error\n      }\n      throw new RepositoryError(\n        `Unexpected error finding users with pagination`,\n        'findWithPagination',\n        'User',\n        error as Error\n      )\n    }\n  }\n\n  /**\n   * Map database record to domain entity\n   */\n  private mapToDomain(dbUser: DatabaseUser): User {\n    // Use default limits since the database doesn't have limit columns yet\n    const limits: UserLimits = {\n      dailyTransactionLimit: Money.fromNumber(10000, Currency.EUR()), // \u20AC10,000 daily limit\n      monthlyTransactionLimit: Money.fromNumber(50000, Currency.EUR()), // \u20AC50,000 monthly limit\n      singleTransactionLimit: Money.fromNumber(5000, Currency.EUR()), // \u20AC5,000 single transaction limit\n      withdrawalLimit: Money.fromNumber(2000, Currency.EUR()) // \u20AC2,000 withdrawal limit\n    }\n\n    const snapshot: UserSnapshot = {\n      id: UserId.fromString(dbUser.id),\n      clerkUserId: dbUser.clerk_user_id,\n      email: dbUser.email,\n      fullName: dbUser.first_name && dbUser.last_name ? `${dbUser.first_name} ${dbUser.last_name}` : dbUser.email,\n      phoneNumber: dbUser.phone,\n      kycStatus: (dbUser.kyc_status as KycStatus) || 'PENDING',\n      kycCompletedAt: undefined, // Not available in current schema\n      isActive: true, // Default to active since is_active field doesn't exist\n      limits,\n      createdAt: new Date(dbUser.created_at),\n      updatedAt: new Date(dbUser.updated_at),\n      lastLoginAt: undefined // Not available in current schema\n    }\n\n    return User.fromSnapshot(snapshot)\n  }\n\n  /**\n   * Map domain entity to database record\n   */\n  private mapToDatabase(snapshot: UserSnapshot): Partial<DatabaseUser> {\n    return {\n      id: snapshot.id.value,\n      clerk_user_id: snapshot.clerkUserId,\n      email: snapshot.email.toLowerCase(),\n      full_name: snapshot.fullName,\n      phone_number: snapshot.phoneNumber,\n      kyc_status: snapshot.kycStatus,\n      kyc_completed_at: snapshot.kycCompletedAt?.toISOString(),\n      is_active: snapshot.isActive,\n      daily_transaction_limit: snapshot.limits.dailyTransactionLimit.amount,\n      monthly_transaction_limit: snapshot.limits.monthlyTransactionLimit.amount,\n      single_transaction_limit: snapshot.limits.singleTransactionLimit.amount,\n      withdrawal_limit: snapshot.limits.withdrawalLimit.amount,\n      created_at: snapshot.createdAt.toISOString(),\n      updated_at: snapshot.updatedAt.toISOString(),\n      last_login_at: snapshot.lastLoginAt?.toISOString()\n    }\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "afb8704d2008ab0f2051b71402c6837d25624e65"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1yktyuh9ow = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1yktyuh9ow();
/**
 * Supabase User Repository Implementation
 *
 * Implements UserRepository interface using Supabase as the data store.
 * Handles mapping between domain entities and database records.
 */
import { User } from '../../domain/entities/User';
import { UserId } from '../../domain/value-objects/EntityId';
import { Money } from '../../domain/value-objects/Money';
import { Currency } from '../../domain/value-objects/Currency';
import { RepositoryError } from '../../domain/repositories';
export class SupabaseUserRepository {
  constructor(supabase) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[0]++;
    cov_1yktyuh9ow().s[0]++;
    this.supabase = supabase;
  }
  async findById(id) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[1]++;
    cov_1yktyuh9ow().s[1]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[2]++, await this.supabase.from('users').select('*').eq('id', id.value).single());
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[3]++;
      if (error) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[0][0]++;
        cov_1yktyuh9ow().s[4]++;
        if (error.code === 'PGRST116') {
          /* istanbul ignore next */
          cov_1yktyuh9ow().b[1][0]++;
          cov_1yktyuh9ow().s[5]++;
          return null; // Not found
        } else
        /* istanbul ignore next */
        {
          cov_1yktyuh9ow().b[1][1]++;
        }
        cov_1yktyuh9ow().s[6]++;
        throw new RepositoryError(`Failed to find user by ID: ${error.message}`, 'findById', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[0][1]++;
      }
      cov_1yktyuh9ow().s[7]++;
      return this.mapToDomain(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[8]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[2][0]++;
        cov_1yktyuh9ow().s[9]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[2][1]++;
      }
      cov_1yktyuh9ow().s[10]++;
      throw new RepositoryError(`Unexpected error finding user by ID`, 'findById', 'User', error);
    }
  }
  async findByClerkId(clerkUserId) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[2]++;
    cov_1yktyuh9ow().s[11]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[12]++, await this.supabase.from('users').select('*').eq('clerk_user_id', clerkUserId).single());
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[13]++;
      if (error) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[3][0]++;
        cov_1yktyuh9ow().s[14]++;
        if (error.code === 'PGRST116') {
          /* istanbul ignore next */
          cov_1yktyuh9ow().b[4][0]++;
          cov_1yktyuh9ow().s[15]++;
          return null; // Not found
        } else
        /* istanbul ignore next */
        {
          cov_1yktyuh9ow().b[4][1]++;
        }
        cov_1yktyuh9ow().s[16]++;
        throw new RepositoryError(`Failed to find user by Clerk ID: ${error.message}`, 'findByClerkId', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[3][1]++;
      }
      cov_1yktyuh9ow().s[17]++;
      return this.mapToDomain(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[18]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[5][0]++;
        cov_1yktyuh9ow().s[19]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[5][1]++;
      }
      cov_1yktyuh9ow().s[20]++;
      throw new RepositoryError(`Unexpected error finding user by Clerk ID`, 'findByClerkId', 'User', error);
    }
  }
  async findByEmail(email) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[3]++;
    cov_1yktyuh9ow().s[21]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[22]++, await this.supabase.from('users').select('*').eq('email', email.toLowerCase()).single());
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[23]++;
      if (error) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[6][0]++;
        cov_1yktyuh9ow().s[24]++;
        if (error.code === 'PGRST116') {
          /* istanbul ignore next */
          cov_1yktyuh9ow().b[7][0]++;
          cov_1yktyuh9ow().s[25]++;
          return null; // Not found
        } else
        /* istanbul ignore next */
        {
          cov_1yktyuh9ow().b[7][1]++;
        }
        cov_1yktyuh9ow().s[26]++;
        throw new RepositoryError(`Failed to find user by email: ${error.message}`, 'findByEmail', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[6][1]++;
      }
      cov_1yktyuh9ow().s[27]++;
      return this.mapToDomain(data);
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[28]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[8][0]++;
        cov_1yktyuh9ow().s[29]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[8][1]++;
      }
      cov_1yktyuh9ow().s[30]++;
      throw new RepositoryError(`Unexpected error finding user by email`, 'findByEmail', 'User', error);
    }
  }
  async save(user) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[4]++;
    cov_1yktyuh9ow().s[31]++;
    try {
      const snapshot =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[32]++, user.toSnapshot());
      const dbUser =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[33]++, this.mapToDatabase(snapshot));
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[34]++, await this.supabase.from('users').upsert(dbUser, {
        onConflict: 'id'
      }));
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[35]++;
      if (error) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[9][0]++;
        cov_1yktyuh9ow().s[36]++;
        throw new RepositoryError(`Failed to save user: ${error.message}`, 'save', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[9][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[37]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[10][0]++;
        cov_1yktyuh9ow().s[38]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[10][1]++;
      }
      cov_1yktyuh9ow().s[39]++;
      throw new RepositoryError(`Unexpected error saving user`, 'save', 'User', error);
    }
  }
  async delete(id) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[5]++;
    cov_1yktyuh9ow().s[40]++;
    try {
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[41]++, await this.supabase.from('users').delete().eq('id', id.value));
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[42]++;
      if (error) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[11][0]++;
        cov_1yktyuh9ow().s[43]++;
        throw new RepositoryError(`Failed to delete user: ${error.message}`, 'delete', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[11][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[44]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[12][0]++;
        cov_1yktyuh9ow().s[45]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[12][1]++;
      }
      cov_1yktyuh9ow().s[46]++;
      throw new RepositoryError(`Unexpected error deleting user`, 'delete', 'User', error);
    }
  }
  async existsByEmail(email) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[6]++;
    cov_1yktyuh9ow().s[47]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[48]++, await this.supabase.from('users').select('id').eq('email', email.toLowerCase()).single());
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[49]++;
      if (
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[14][0]++, error) &&
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[14][1]++, error.code !== 'PGRST116')) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[13][0]++;
        cov_1yktyuh9ow().s[50]++;
        throw new RepositoryError(`Failed to check user existence by email: ${error.message}`, 'existsByEmail', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[13][1]++;
      }
      cov_1yktyuh9ow().s[51]++;
      return data !== null;
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[52]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[15][0]++;
        cov_1yktyuh9ow().s[53]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[15][1]++;
      }
      cov_1yktyuh9ow().s[54]++;
      throw new RepositoryError(`Unexpected error checking user existence by email`, 'existsByEmail', 'User', error);
    }
  }
  async existsByClerkId(clerkUserId) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[7]++;
    cov_1yktyuh9ow().s[55]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[56]++, await this.supabase.from('users').select('id').eq('clerk_user_id', clerkUserId).single());
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[57]++;
      if (
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[17][0]++, error) &&
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[17][1]++, error.code !== 'PGRST116')) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[16][0]++;
        cov_1yktyuh9ow().s[58]++;
        throw new RepositoryError(`Failed to check user existence by Clerk ID: ${error.message}`, 'existsByClerkId', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[16][1]++;
      }
      cov_1yktyuh9ow().s[59]++;
      return data !== null;
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[60]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[18][0]++;
        cov_1yktyuh9ow().s[61]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[18][1]++;
      }
      cov_1yktyuh9ow().s[62]++;
      throw new RepositoryError(`Unexpected error checking user existence by Clerk ID`, 'existsByClerkId', 'User', error);
    }
  }
  async findByKycStatus(status) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[8]++;
    cov_1yktyuh9ow().s[63]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[64]++, await this.supabase.from('users').select('*').eq('kyc_status', status));
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[65]++;
      if (error) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[19][0]++;
        cov_1yktyuh9ow().s[66]++;
        throw new RepositoryError(`Failed to find users by KYC status: ${error.message}`, 'findByKycStatus', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[19][1]++;
      }
      cov_1yktyuh9ow().s[67]++;
      return data.map(user => {
        /* istanbul ignore next */
        cov_1yktyuh9ow().f[9]++;
        cov_1yktyuh9ow().s[68]++;
        return this.mapToDomain(user);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[69]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[20][0]++;
        cov_1yktyuh9ow().s[70]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[20][1]++;
      }
      cov_1yktyuh9ow().s[71]++;
      throw new RepositoryError(`Unexpected error finding users by KYC status`, 'findByKycStatus', 'User', error);
    }
  }
  async findByCreatedDateRange(startDate, endDate) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[10]++;
    cov_1yktyuh9ow().s[72]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[73]++, await this.supabase.from('users').select('*').gte('created_at', startDate.toISOString()).lte('created_at', endDate.toISOString()));
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[74]++;
      if (error) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[21][0]++;
        cov_1yktyuh9ow().s[75]++;
        throw new RepositoryError(`Failed to find users by date range: ${error.message}`, 'findByCreatedDateRange', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[21][1]++;
      }
      cov_1yktyuh9ow().s[76]++;
      return data.map(user => {
        /* istanbul ignore next */
        cov_1yktyuh9ow().f[11]++;
        cov_1yktyuh9ow().s[77]++;
        return this.mapToDomain(user);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[78]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[22][0]++;
        cov_1yktyuh9ow().s[79]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[22][1]++;
      }
      cov_1yktyuh9ow().s[80]++;
      throw new RepositoryError(`Unexpected error finding users by date range`, 'findByCreatedDateRange', 'User', error);
    }
  }
  async count() {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[12]++;
    cov_1yktyuh9ow().s[81]++;
    try {
      const {
        count,
        error
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[82]++, await this.supabase.from('users').select('*', {
        count: 'exact',
        head: true
      }));
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[83]++;
      if (error) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[23][0]++;
        cov_1yktyuh9ow().s[84]++;
        throw new RepositoryError(`Failed to count users: ${error.message}`, 'count', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[23][1]++;
      }
      cov_1yktyuh9ow().s[85]++;
      return /* istanbul ignore next */(cov_1yktyuh9ow().b[24][0]++, count) ||
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[24][1]++, 0);
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[86]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[25][0]++;
        cov_1yktyuh9ow().s[87]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[25][1]++;
      }
      cov_1yktyuh9ow().s[88]++;
      throw new RepositoryError(`Unexpected error counting users`, 'count', 'User', error);
    }
  }
  async findWithPagination(offset, limit, orderBy =
  /* istanbul ignore next */
  (cov_1yktyuh9ow().b[26][0]++, 'created_at'), orderDirection =
  /* istanbul ignore next */
  (cov_1yktyuh9ow().b[27][0]++, 'desc')) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[13]++;
    cov_1yktyuh9ow().s[89]++;
    try {
      const {
        data,
        error,
        count
      } =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[90]++, await this.supabase.from('users').select('*', {
        count: 'exact'
      }).order(orderBy, {
        ascending: orderDirection === 'asc'
      }).range(offset, offset + limit - 1));
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[91]++;
      if (error) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[28][0]++;
        cov_1yktyuh9ow().s[92]++;
        throw new RepositoryError(`Failed to find users with pagination: ${error.message}`, 'findWithPagination', 'User', error);
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[28][1]++;
      }
      const users =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[93]++, data.map(user => {
        /* istanbul ignore next */
        cov_1yktyuh9ow().f[14]++;
        cov_1yktyuh9ow().s[94]++;
        return this.mapToDomain(user);
      }));
      const total =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[95]++,
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[29][0]++, count) ||
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[29][1]++, 0));
      const hasMore =
      /* istanbul ignore next */
      (cov_1yktyuh9ow().s[96]++, offset + limit < total);
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[97]++;
      return {
        users,
        total,
        hasMore
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1yktyuh9ow().s[98]++;
      if (error instanceof RepositoryError) {
        /* istanbul ignore next */
        cov_1yktyuh9ow().b[30][0]++;
        cov_1yktyuh9ow().s[99]++;
        throw error;
      } else
      /* istanbul ignore next */
      {
        cov_1yktyuh9ow().b[30][1]++;
      }
      cov_1yktyuh9ow().s[100]++;
      throw new RepositoryError(`Unexpected error finding users with pagination`, 'findWithPagination', 'User', error);
    }
  }
  /**
   * Map database record to domain entity
   */
  mapToDomain(dbUser) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[15]++;
    // Use default limits since the database doesn't have limit columns yet
    const limits =
    /* istanbul ignore next */
    (cov_1yktyuh9ow().s[101]++, {
      dailyTransactionLimit: Money.fromNumber(10000, Currency.EUR()),
      // €10,000 daily limit
      monthlyTransactionLimit: Money.fromNumber(50000, Currency.EUR()),
      // €50,000 monthly limit
      singleTransactionLimit: Money.fromNumber(5000, Currency.EUR()),
      // €5,000 single transaction limit
      withdrawalLimit: Money.fromNumber(2000, Currency.EUR()) // €2,000 withdrawal limit
    });
    const snapshot =
    /* istanbul ignore next */
    (cov_1yktyuh9ow().s[102]++, {
      id: UserId.fromString(dbUser.id),
      clerkUserId: dbUser.clerk_user_id,
      email: dbUser.email,
      fullName:
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[32][0]++, dbUser.first_name) &&
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[32][1]++, dbUser.last_name) ?
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[31][0]++, `${dbUser.first_name} ${dbUser.last_name}`) :
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[31][1]++, dbUser.email),
      phoneNumber: dbUser.phone,
      kycStatus:
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[33][0]++, dbUser.kyc_status) ||
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[33][1]++, 'PENDING'),
      kycCompletedAt: undefined,
      // Not available in current schema
      isActive: true,
      // Default to active since is_active field doesn't exist
      limits,
      createdAt: new Date(dbUser.created_at),
      updatedAt: new Date(dbUser.updated_at),
      lastLoginAt: undefined // Not available in current schema
    });
    /* istanbul ignore next */
    cov_1yktyuh9ow().s[103]++;
    return User.fromSnapshot(snapshot);
  }
  /**
   * Map domain entity to database record
   */
  mapToDatabase(snapshot) {
    /* istanbul ignore next */
    cov_1yktyuh9ow().f[16]++;
    var _a, _b;
    /* istanbul ignore next */
    cov_1yktyuh9ow().s[104]++;
    return {
      id: snapshot.id.value,
      clerk_user_id: snapshot.clerkUserId,
      email: snapshot.email.toLowerCase(),
      full_name: snapshot.fullName,
      phone_number: snapshot.phoneNumber,
      kyc_status: snapshot.kycStatus,
      kyc_completed_at:
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[35][0]++, (_a = snapshot.kycCompletedAt) === null) ||
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[35][1]++, _a === void 0) ?
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[34][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[34][1]++, _a.toISOString()),
      is_active: snapshot.isActive,
      daily_transaction_limit: snapshot.limits.dailyTransactionLimit.amount,
      monthly_transaction_limit: snapshot.limits.monthlyTransactionLimit.amount,
      single_transaction_limit: snapshot.limits.singleTransactionLimit.amount,
      withdrawal_limit: snapshot.limits.withdrawalLimit.amount,
      created_at: snapshot.createdAt.toISOString(),
      updated_at: snapshot.updatedAt.toISOString(),
      last_login_at:
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[37][0]++, (_b = snapshot.lastLoginAt) === null) ||
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[37][1]++, _b === void 0) ?
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[36][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1yktyuh9ow().b[36][1]++, _b.toISOString())
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,