{"version":3,"names":["cov_jd4il5rot","actualCoverage","ResultFactory","ValidationResultFactory","ErrorCodes","Currency","User","Wallet","ConstraintViolationError","RegisterUserUseCase","constructor","userRepository","walletRepository","unitOfWork","f","s","execute","command","validationResult","validateCommand","isValid","b","error","errors","map","e","message","join","INVALID_INPUT","validationErrors","existingUserByEmail","existsByEmail","email","field","existingUserByClerkId","existsByClerkId","clerkUserId","result","user","createFromClerkId","fullName","phoneNumber","save","supportedCurrencies","getAllSupported","wallets","currency","wallet","create","id","push","saveMany","success","userId","value","kycStatus","walletsCreated","w","code","constraint","console","UNEXPECTED_ERROR","trim","length","startsWith","isValidEmail","isValidPhoneNumber","failure","emailRegex","test","phoneRegex","replace"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\RegisterUserUseCase.ts"],"sourcesContent":["/**\n * Register User Use Case\n * \n * Handles user registration and initial wallet creation.\n * Validates user data and creates default wallets for supported currencies.\n */\n\nimport {\n  UseCase,\n  Command,\n  Result,\n  SuccessResult,\n  ErrorResult,\n  ResultFactory,\n  ValidationResult,\n  ValidationResultFactory,\n  ErrorCodes\n} from '../common/UseCase'\n\nimport {\n  Currency,\n  UserId,\n  User,\n  Wallet\n} from '../../domain'\n\nimport {\n  UserRepository,\n  WalletRepository,\n  UnitOfWork,\n  ConstraintViolationError\n} from '../../domain/repositories'\n\n/**\n * Register User Command\n */\nexport interface RegisterUserCommand extends Command {\n  readonly type: 'REGISTER_USER'\n  readonly clerkUserId: string\n  readonly email: string\n  readonly fullName: string\n  readonly phoneNumber?: string\n}\n\n/**\n * Register User Result\n */\nexport interface RegisterUserResult extends SuccessResult<{\n  userId: string\n  email: string\n  fullName: string\n  kycStatus: string\n  walletsCreated: string[]\n}> {}\n\n/**\n * Register User Use Case Implementation\n */\nexport class RegisterUserUseCase implements UseCase<RegisterUserCommand, RegisterUserResult | ErrorResult> {\n  constructor(\n    private readonly userRepository: UserRepository,\n    private readonly walletRepository: WalletRepository,\n    private readonly unitOfWork: UnitOfWork\n  ) {}\n\n  async execute(command: RegisterUserCommand): Promise<RegisterUserResult | ErrorResult> {\n    try {\n      // 1. Validate input\n      const validationResult = this.validateCommand(command)\n      if (!validationResult.isValid) {\n        return ResultFactory.error(\n          `Validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`,\n          ErrorCodes.INVALID_INPUT,\n          { validationErrors: validationResult.errors }\n        )\n      }\n\n      // 2. Check if user already exists\n      const existingUserByEmail = await this.userRepository.existsByEmail(command.email)\n      if (existingUserByEmail) {\n        return ResultFactory.error(\n          'User with this email already exists',\n          ErrorCodes.INVALID_INPUT,\n          { field: 'email' }\n        )\n      }\n\n      const existingUserByClerkId = await this.userRepository.existsByClerkId(command.clerkUserId)\n      if (existingUserByClerkId) {\n        return ResultFactory.error(\n          'User with this Clerk ID already exists',\n          ErrorCodes.INVALID_INPUT,\n          { field: 'clerkUserId' }\n        )\n      }\n\n      // 3. Execute registration within transaction\n      const result = await this.unitOfWork.execute(async () => {\n        // Create user\n        const user = User.createFromClerkId(\n          command.clerkUserId,\n          command.email,\n          command.fullName,\n          command.phoneNumber\n        )\n\n        // Save user\n        await this.userRepository.save(user)\n\n        // Create default wallets for all supported currencies\n        const supportedCurrencies = Currency.getAllSupported()\n        const wallets: Wallet[] = []\n\n        for (const currency of supportedCurrencies) {\n          const wallet = Wallet.create(user.id, currency)\n          wallets.push(wallet)\n        }\n\n        // Save all wallets\n        await this.walletRepository.saveMany(wallets)\n\n        return {\n          user,\n          wallets\n        }\n      })\n\n      // 4. Return success result\n      return ResultFactory.success({\n        userId: result.user.id.value,\n        email: result.user.email,\n        fullName: result.user.fullName,\n        kycStatus: result.user.kycStatus,\n        walletsCreated: result.wallets.map(w => w.currency.code)\n      })\n\n    } catch (error) {\n      // Handle constraint violations (duplicate email, etc.)\n      if (error instanceof ConstraintViolationError) {\n        return ResultFactory.error(\n          'User registration failed due to constraint violation',\n          ErrorCodes.INVALID_INPUT,\n          { constraint: error.message }\n        )\n      }\n\n      // Handle unexpected errors\n      console.error('Unexpected error in RegisterUserUseCase:', error)\n      return ResultFactory.error(\n        'An unexpected error occurred during registration',\n        ErrorCodes.UNEXPECTED_ERROR\n      )\n    }\n  }\n\n  /**\n   * Validate the register user command\n   */\n  private validateCommand(command: RegisterUserCommand): ValidationResult {\n    const errors = []\n\n    // Validate Clerk user ID\n    if (!command.clerkUserId || command.clerkUserId.trim().length === 0) {\n      errors.push({\n        field: 'clerkUserId',\n        message: 'Clerk user ID is required',\n        code: 'REQUIRED'\n      })\n    } else if (!command.clerkUserId.startsWith('user_')) {\n      errors.push({\n        field: 'clerkUserId',\n        message: 'Invalid Clerk user ID format',\n        code: 'INVALID_FORMAT'\n      })\n    }\n\n    // Validate email\n    if (!command.email || command.email.trim().length === 0) {\n      errors.push({\n        field: 'email',\n        message: 'Email is required',\n        code: 'REQUIRED'\n      })\n    } else if (!this.isValidEmail(command.email)) {\n      errors.push({\n        field: 'email',\n        message: 'Invalid email format',\n        code: 'INVALID_FORMAT'\n      })\n    }\n\n    // Validate full name\n    if (!command.fullName || command.fullName.trim().length === 0) {\n      errors.push({\n        field: 'fullName',\n        message: 'Full name is required',\n        code: 'REQUIRED'\n      })\n    } else if (command.fullName.trim().length < 2) {\n      errors.push({\n        field: 'fullName',\n        message: 'Full name must be at least 2 characters',\n        code: 'TOO_SHORT'\n      })\n    } else if (command.fullName.length > 100) {\n      errors.push({\n        field: 'fullName',\n        message: 'Full name cannot exceed 100 characters',\n        code: 'TOO_LONG'\n      })\n    }\n\n    // Validate phone number if provided\n    if (command.phoneNumber && !this.isValidPhoneNumber(command.phoneNumber)) {\n      errors.push({\n        field: 'phoneNumber',\n        message: 'Invalid phone number format',\n        code: 'INVALID_FORMAT'\n      })\n    }\n\n    return errors.length === 0\n      ? ValidationResultFactory.success()\n      : ValidationResultFactory.failure(errors)\n  }\n\n  /**\n   * Validate email format\n   */\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    return emailRegex.test(email)\n  }\n\n  /**\n   * Validate phone number format\n   */\n  private isValidPhoneNumber(phoneNumber: string): boolean {\n    // Simple validation - starts with + and contains only digits and spaces\n    const phoneRegex = /^\\+[1-9]\\d{1,14}$/\n    return phoneRegex.test(phoneNumber.replace(/\\s/g, ''))\n  }\n}\n"],"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","ignoreList":[]}