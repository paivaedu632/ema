{"version":3,"names":["cov_1hicdpsrr3","actualCoverage","ConfigurationManager","DatabaseHealthCheck","constructor","supabaseClient","f","s","name","description","execute","startTime","Date","now","data","error","from","select","limit","single","duration","b","code","status","timestamp","message","details","errorCode","responseTime","Error","ContainerHealthCheck","container","healthStatus","getHealthStatus","isHealthy","servicesCount","singletonsCount","scopedServicesCount","totalResolutions","errors","length","join","undefined","ConfigurationHealthCheck","configManager","isLoaded","isConfigurationLoaded","config","getConfig","environment","version","MemoryHealthCheck","memoryUsage","process","heapUsedMB","Math","round","heapUsed","heapTotalMB","heapTotal","rssMB","rss","heapUsagePercent","HealthCheckService","checks","registerDefaultChecks","registerCheck","check","push","removeCheck","filter","executeAll","checkPromises","map","catch","results","Promise","all","summary","total","healthy","r","unhealthy","degraded","overallStatus","executeCheck","find","c","getRegisteredChecks","create","service","resolve","console","warn","getInstance"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\health\\HealthCheckService.ts"],"sourcesContent":["/**\n * Health Check Service\n * \n * Provides health monitoring for application dependencies and services.\n * Implements standard health check patterns for monitoring and alerting.\n */\n\nimport { SupabaseClient } from '@supabase/supabase-js'\nimport { Container } from '../di/Container'\nimport { ConfigurationManager } from '../config/ConfigurationManager'\n\nexport interface HealthCheckResult {\n  name: string\n  status: 'healthy' | 'unhealthy' | 'degraded'\n  description: string\n  duration: number\n  timestamp: Date\n  details?: Record<string, any>\n  error?: string\n}\n\nexport interface SystemHealthStatus {\n  status: 'healthy' | 'unhealthy' | 'degraded'\n  timestamp: Date\n  duration: number\n  checks: HealthCheckResult[]\n  summary: {\n    total: number\n    healthy: number\n    unhealthy: number\n    degraded: number\n  }\n}\n\nexport interface HealthCheck {\n  name: string\n  description: string\n  execute(): Promise<HealthCheckResult>\n}\n\n/**\n * Database Health Check\n */\nexport class DatabaseHealthCheck implements HealthCheck {\n  name = 'database'\n  description = 'Supabase database connectivity'\n\n  constructor(private supabaseClient: SupabaseClient) {}\n\n  async execute(): Promise<HealthCheckResult> {\n    const startTime = Date.now()\n    \n    try {\n      // Simple query to test database connectivity\n      const { data, error } = await this.supabaseClient\n        .from('users')\n        .select('count')\n        .limit(1)\n        .single()\n\n      const duration = Date.now() - startTime\n\n      if (error && error.code !== 'PGRST116') {\n        return {\n          name: this.name,\n          status: 'unhealthy',\n          description: this.description,\n          duration,\n          timestamp: new Date(),\n          error: error.message,\n          details: { errorCode: error.code }\n        }\n      }\n\n      return {\n        name: this.name,\n        status: 'healthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        details: { responseTime: `${duration}ms` }\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      return {\n        name: this.name,\n        status: 'unhealthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n}\n\n/**\n * Container Health Check\n */\nexport class ContainerHealthCheck implements HealthCheck {\n  name = 'container'\n  description = 'Dependency injection container'\n\n  constructor(private container: Container) {}\n\n  async execute(): Promise<HealthCheckResult> {\n    const startTime = Date.now()\n    \n    try {\n      const healthStatus = this.container.getHealthStatus()\n      const duration = Date.now() - startTime\n\n      const status = healthStatus.isHealthy ? 'healthy' : 'unhealthy'\n\n      return {\n        name: this.name,\n        status,\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        details: {\n          servicesCount: healthStatus.servicesCount,\n          singletonsCount: healthStatus.singletonsCount,\n          scopedServicesCount: healthStatus.scopedServicesCount,\n          totalResolutions: healthStatus.totalResolutions,\n          errors: healthStatus.errors\n        },\n        error: healthStatus.errors.length > 0 ? healthStatus.errors.join(', ') : undefined\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      return {\n        name: this.name,\n        status: 'unhealthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n}\n\n/**\n * Configuration Health Check\n */\nexport class ConfigurationHealthCheck implements HealthCheck {\n  name = 'configuration'\n  description = 'Application configuration'\n\n  constructor(private configManager: ConfigurationManager) {}\n\n  async execute(): Promise<HealthCheckResult> {\n    const startTime = Date.now()\n    \n    try {\n      const isLoaded = this.configManager.isConfigurationLoaded()\n      const config = this.configManager.getConfig()\n      const duration = Date.now() - startTime\n\n      const status = isLoaded ? 'healthy' : 'unhealthy'\n\n      return {\n        name: this.name,\n        status,\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        details: {\n          environment: config.environment,\n          version: config.version,\n          isLoaded\n        }\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      return {\n        name: this.name,\n        status: 'unhealthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n}\n\n/**\n * Memory Health Check\n */\nexport class MemoryHealthCheck implements HealthCheck {\n  name = 'memory'\n  description = 'System memory usage'\n\n  async execute(): Promise<HealthCheckResult> {\n    const startTime = Date.now()\n    \n    try {\n      const memoryUsage = process.memoryUsage()\n      const duration = Date.now() - startTime\n\n      // Convert bytes to MB\n      const heapUsedMB = Math.round(memoryUsage.heapUsed / 1024 / 1024)\n      const heapTotalMB = Math.round(memoryUsage.heapTotal / 1024 / 1024)\n      const rssMB = Math.round(memoryUsage.rss / 1024 / 1024)\n\n      // Consider unhealthy if heap usage is over 80%\n      const heapUsagePercent = (memoryUsage.heapUsed / memoryUsage.heapTotal) * 100\n      let status: 'healthy' | 'unhealthy' | 'degraded' = 'healthy'\n\n      if (heapUsagePercent > 90) {\n        status = 'unhealthy'\n      } else if (heapUsagePercent > 80) {\n        status = 'degraded'\n      }\n\n      return {\n        name: this.name,\n        status,\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        details: {\n          heapUsedMB,\n          heapTotalMB,\n          rssMB,\n          heapUsagePercent: Math.round(heapUsagePercent)\n        }\n      }\n    } catch (error) {\n      const duration = Date.now() - startTime\n      return {\n        name: this.name,\n        status: 'unhealthy',\n        description: this.description,\n        duration,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }\n    }\n  }\n}\n\n/**\n * Health Check Service\n */\nexport class HealthCheckService {\n  private checks: HealthCheck[] = []\n\n  constructor() {\n    this.registerDefaultChecks()\n  }\n\n  /**\n   * Register a health check\n   */\n  registerCheck(check: HealthCheck): void {\n    this.checks.push(check)\n  }\n\n  /**\n   * Remove a health check\n   */\n  removeCheck(name: string): void {\n    this.checks = this.checks.filter(check => check.name !== name)\n  }\n\n  /**\n   * Execute all health checks\n   */\n  async executeAll(): Promise<SystemHealthStatus> {\n    const startTime = Date.now()\n    \n    const checkPromises = this.checks.map(check => \n      check.execute().catch(error => ({\n        name: check.name,\n        status: 'unhealthy' as const,\n        description: check.description,\n        duration: 0,\n        timestamp: new Date(),\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }))\n    )\n\n    const results = await Promise.all(checkPromises)\n    const duration = Date.now() - startTime\n\n    const summary = {\n      total: results.length,\n      healthy: results.filter(r => r.status === 'healthy').length,\n      unhealthy: results.filter(r => r.status === 'unhealthy').length,\n      degraded: results.filter(r => r.status === 'degraded').length\n    }\n\n    let overallStatus: 'healthy' | 'unhealthy' | 'degraded' = 'healthy'\n    if (summary.unhealthy > 0) {\n      overallStatus = 'unhealthy'\n    } else if (summary.degraded > 0) {\n      overallStatus = 'degraded'\n    }\n\n    return {\n      status: overallStatus,\n      timestamp: new Date(),\n      duration,\n      checks: results,\n      summary\n    }\n  }\n\n  /**\n   * Execute a specific health check\n   */\n  async executeCheck(name: string): Promise<HealthCheckResult | null> {\n    const check = this.checks.find(c => c.name === name)\n    if (!check) {\n      return null\n    }\n\n    return check.execute()\n  }\n\n  /**\n   * Get all registered checks\n   */\n  getRegisteredChecks(): Array<{ name: string; description: string }> {\n    return this.checks.map(check => ({\n      name: check.name,\n      description: check.description\n    }))\n  }\n\n  /**\n   * Register default health checks\n   */\n  private registerDefaultChecks(): void {\n    // These will be registered when the service is initialized with dependencies\n  }\n\n  /**\n   * Initialize with dependencies\n   */\n  static create(container: Container): HealthCheckService {\n    const service = new HealthCheckService()\n    \n    try {\n      // Register database health check\n      const supabaseClient = container.resolve('supabaseClient')\n      service.registerCheck(new DatabaseHealthCheck(supabaseClient))\n    } catch (error) {\n      console.warn('Could not register database health check:', error)\n    }\n\n    try {\n      // Register container health check\n      service.registerCheck(new ContainerHealthCheck(container))\n    } catch (error) {\n      console.warn('Could not register container health check:', error)\n    }\n\n    try {\n      // Register configuration health check\n      const configManager = ConfigurationManager.getInstance()\n      service.registerCheck(new ConfigurationHealthCheck(configManager))\n    } catch (error) {\n      console.warn('Could not register configuration health check:', error)\n    }\n\n    // Register memory health check\n    service.registerCheck(new MemoryHealthCheck())\n\n    return service\n  }\n}\n"],"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","ignoreList":[]}