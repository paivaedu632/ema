{"version":3,"names":["cov_jkkwm05gz","actualCoverage","Money","constructor","amount","currency","f","s","_amount","_currency","fromNumber","Number","isFinite","b","Error","roundedAmount","Math","round","fromString","numericAmount","parseFloat","isNaN","zero","add","other","ensureSameCurrency","subtract","result","multiply","factor","divide","divisor","isGreaterThan","isGreaterThanOrEqual","isLessThan","isLessThanOrEqual","equals","abs","isZero","isPositive","toString","symbol","toFixed","toJSON","code"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\Money.ts"],"sourcesContent":["/**\n * Money Value Object\n * \n * Represents monetary amounts with currency information.\n * Provides type-safe arithmetic operations and validation.\n * Follows the Value Object pattern - immutable and equality by value.\n */\n\nimport { Currency } from './Currency'\n\nexport class Money {\n  private readonly _amount: number\n  private readonly _currency: Currency\n\n  private constructor(amount: number, currency: Currency) {\n    this._amount = amount\n    this._currency = currency\n  }\n\n  /**\n   * Create Money from number amount and currency\n   */\n  static fromNumber(amount: number, currency: Currency): Money {\n    if (!Number.isFinite(amount)) {\n      throw new Error('Amount must be a finite number')\n    }\n    \n    if (amount < 0) {\n      throw new Error('Amount cannot be negative')\n    }\n\n    // Round to 2 decimal places to avoid floating point precision issues\n    const roundedAmount = Math.round(amount * 100) / 100\n    \n    return new Money(roundedAmount, currency)\n  }\n\n  /**\n   * Create Money from string amount (for user input)\n   */\n  static fromString(amount: string, currency: Currency): Money {\n    const numericAmount = parseFloat(amount)\n    \n    if (isNaN(numericAmount)) {\n      throw new Error('Invalid amount format')\n    }\n    \n    return Money.fromNumber(numericAmount, currency)\n  }\n\n  /**\n   * Create zero amount for given currency\n   */\n  static zero(currency: Currency): Money {\n    return new Money(0, currency)\n  }\n\n  /**\n   * Get the numeric amount\n   */\n  get amount(): number {\n    return this._amount\n  }\n\n  /**\n   * Get the currency\n   */\n  get currency(): Currency {\n    return this._currency\n  }\n\n  /**\n   * Add another Money amount (must be same currency)\n   */\n  add(other: Money): Money {\n    this.ensureSameCurrency(other)\n    return new Money(this._amount + other._amount, this._currency)\n  }\n\n  /**\n   * Subtract another Money amount (must be same currency)\n   */\n  subtract(other: Money): Money {\n    this.ensureSameCurrency(other)\n    const result = this._amount - other._amount\n    \n    if (result < 0) {\n      throw new Error('Subtraction would result in negative amount')\n    }\n    \n    return new Money(result, this._currency)\n  }\n\n  /**\n   * Multiply by a factor\n   */\n  multiply(factor: number): Money {\n    if (!Number.isFinite(factor) || factor < 0) {\n      throw new Error('Factor must be a positive finite number')\n    }\n    \n    return new Money(this._amount * factor, this._currency)\n  }\n\n  /**\n   * Divide by a divisor\n   */\n  divide(divisor: number): Money {\n    if (!Number.isFinite(divisor) || divisor <= 0) {\n      throw new Error('Divisor must be a positive finite number')\n    }\n    \n    return new Money(this._amount / divisor, this._currency)\n  }\n\n  /**\n   * Check if this amount is greater than another\n   */\n  isGreaterThan(other: Money): boolean {\n    this.ensureSameCurrency(other)\n    return this._amount > other._amount\n  }\n\n  /**\n   * Check if this amount is greater than or equal to another\n   */\n  isGreaterThanOrEqual(other: Money): boolean {\n    this.ensureSameCurrency(other)\n    return this._amount >= other._amount\n  }\n\n  /**\n   * Check if this amount is less than another\n   */\n  isLessThan(other: Money): boolean {\n    this.ensureSameCurrency(other)\n    return this._amount < other._amount\n  }\n\n  /**\n   * Check if this amount is less than or equal to another\n   */\n  isLessThanOrEqual(other: Money): boolean {\n    this.ensureSameCurrency(other)\n    return this._amount <= other._amount\n  }\n\n  /**\n   * Check if this amount is equal to another\n   */\n  equals(other: Money): boolean {\n    return this._currency.equals(other._currency) &&\n           Math.abs(this._amount - other._amount) < 0.01 // Account for floating point precision\n  }\n\n  /**\n   * Check if amount is zero\n   */\n  isZero(): boolean {\n    return this._amount === 0\n  }\n\n  /**\n   * Check if amount is positive\n   */\n  isPositive(): boolean {\n    return this._amount > 0\n  }\n\n  /**\n   * Format as string for display\n   */\n  toString(): string {\n    return `${this._currency.symbol}${this._amount.toFixed(2)}`\n  }\n\n  /**\n   * Format for API/database storage\n   */\n  toJSON(): { amount: number; currency: string } {\n    return {\n      amount: this._amount,\n      currency: this._currency.code\n    }\n  }\n\n  /**\n   * Ensure two Money objects have the same currency\n   */\n  private ensureSameCurrency(other: Money): void {\n    if (!this._currency.equals(other._currency)) {\n      throw new Error(`Cannot operate on different currencies: ${this._currency.code} and ${other._currency.code}`)\n    }\n  }\n}\n"],"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","ignoreList":[]}