{"version":3,"names":["cov_1fkkko12rt","actualCoverage","createClient","NextResponse","supabase","s","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","authenticateRequest","request","f","b","success","error","authHeader","headers","get","startsWith","token","substring","data","user","getUser","console","payload","JSON","parse","Buffer","from","split","toString","sessionId","session_id","sid","jti","userId","id","tokenError","createAuthErrorResponse","message","json","code","status","withAuth","handler","args","authResult"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\auth\\middleware.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\nimport { NextRequest, NextResponse } from 'next/server';\n\nexport interface AuthenticatedUser {\n  userId: string;\n  sessionId: string;\n}\n\nexport interface AuthResult {\n  success: boolean;\n  user?: AuthenticatedUser;\n  error?: string;\n}\n\n// Initialize Supabase client for server-side auth\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\n/**\n * Authenticate a request using Supabase Auth JWT validation\n */\nexport async function authenticateRequest(request?: NextRequest): Promise<AuthResult> {\n  try {\n    if (!request) {\n      return {\n        success: false,\n        error: 'Request object required for authentication'\n      };\n    }\n\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return {\n        success: false,\n        error: 'Authorization header missing or invalid'\n      };\n    }\n\n    const token = authHeader.substring(7);\n\n    try {\n      // Verify JWT using Supabase Auth\n      const { data: { user }, error } = await supabase.auth.getUser(token);\n\n      if (error || !user) {\n        console.error('Supabase auth error:', error);\n        return {\n          success: false,\n          error: 'Invalid or expired token'\n        };\n      }\n\n      // Decode the JWT to extract session information\n      const payload = JSON.parse(Buffer.from(token.split('.')[1], 'base64url').toString());\n      const sessionId = payload.session_id || payload.sid || `session_${payload.jti}`;\n\n      return {\n        success: true,\n        user: {\n          userId: user.id,\n          sessionId: sessionId\n        }\n      };\n    } catch (tokenError) {\n      console.error('JWT validation failed:', tokenError);\n      return {\n        success: false,\n        error: 'Token validation failed'\n      };\n    }\n  } catch (error) {\n    console.error('Authentication error:', error);\n    return {\n      success: false,\n      error: 'Authentication service error'\n    };\n  }\n}\n\n/**\n * Create an authentication error response\n */\nexport function createAuthErrorResponse(message: string = 'Authentication required') {\n  return NextResponse.json(\n    {\n      success: false,\n      error: message,\n      code: 'AUTH_REQUIRED'\n    },\n    { status: 401 }\n  );\n}\n\n/**\n * Middleware wrapper for protected API routes\n */\nexport function withAuth<T extends unknown[]>(\n  handler: (request: NextRequest, user: AuthenticatedUser, ...args: T) => Promise<NextResponse>\n) {\n  return async (request: NextRequest, ...args: T): Promise<NextResponse> => {\n    const authResult = await authenticateRequest(request);\n\n    if (!authResult.success || !authResult.user) {\n      return createAuthErrorResponse(authResult.error);\n    }\n\n    return handler(request, authResult.user, ...args);\n  };\n}\n"],"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","ignoreList":[]}