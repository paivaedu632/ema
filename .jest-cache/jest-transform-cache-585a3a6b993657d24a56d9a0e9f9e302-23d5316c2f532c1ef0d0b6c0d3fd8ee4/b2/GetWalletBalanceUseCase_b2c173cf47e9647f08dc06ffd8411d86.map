{"version":3,"names":["cov_28asc5c0xg","actualCoverage","ResultFactory","ValidationResultFactory","ErrorCodes","Currency","Wallet","GetWalletBalanceQueryHandler","constructor","userRepository","walletRepository","f","s","handle","query","validationResult","validateQuery","isValid","b","error","errors","map","e","message","join","INVALID_INPUT","validationErrors","currency","fromCode","user","findByClerkId","userId","USER_NOT_FOUND","wallet","findByUserIdAndCurrency","id","create","save","success","code","availableBalance","amount","reservedBalance","totalBalance","lastUpdated","updatedAt","console","UNEXPECTED_ERROR","trim","length","push","field","isSupported","failure"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetWalletBalanceUseCase.ts"],"sourcesContent":["/**\n * Get Wallet Balance Use Case\n * \n * Retrieves wallet balance information for a user and currency.\n * Handles wallet creation if it doesn't exist.\n */\n\nimport {\n  QueryHandler,\n  Query,\n  Result,\n  SuccessResult,\n  ErrorResult,\n  ResultFactory,\n  ValidationResult,\n  ValidationResultFactory,\n  ErrorCodes\n} from '../common/UseCase'\n\nimport {\n  Money,\n  Currency,\n  UserId,\n  Wallet,\n  UserNotFoundException,\n  WalletNotFoundException\n} from '../../domain'\n\nimport {\n  UserRepository,\n  WalletRepository\n} from '../../domain/repositories'\n\n/**\n * Get Wallet Balance Query\n */\nexport interface GetWalletBalanceQuery extends Query {\n  readonly type: 'GET_WALLET_BALANCE'\n  readonly userId: string\n  readonly currency: string\n}\n\n/**\n * Wallet Balance Result\n */\nexport interface WalletBalanceResult extends SuccessResult<{\n  currency: string\n  availableBalance: number\n  reservedBalance: number\n  totalBalance: number\n  lastUpdated: Date\n}> {}\n\n/**\n * Get Wallet Balance Query Handler\n */\nexport class GetWalletBalanceQueryHandler implements QueryHandler<GetWalletBalanceQuery, WalletBalanceResult | ErrorResult> {\n  constructor(\n    private readonly userRepository: UserRepository,\n    private readonly walletRepository: WalletRepository\n  ) {}\n\n  async handle(query: GetWalletBalanceQuery): Promise<WalletBalanceResult | ErrorResult> {\n    try {\n      // 1. Validate input\n      const validationResult = this.validateQuery(query)\n      if (!validationResult.isValid) {\n        return ResultFactory.error(\n          `Validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`,\n          ErrorCodes.INVALID_INPUT,\n          { validationErrors: validationResult.errors }\n        )\n      }\n\n      // 2. Parse domain objects\n      const currency = Currency.fromCode(query.currency)\n\n      // 3. Verify user exists using Clerk ID\n      const user = await this.userRepository.findByClerkId(query.userId)\n      if (!user) {\n        return ResultFactory.error(\n          'User not found',\n          ErrorCodes.USER_NOT_FOUND\n        )\n      }\n\n      // 4. Get or create wallet\n      let wallet = await this.walletRepository.findByUserIdAndCurrency(user.id, currency)\n\n      if (!wallet) {\n        // Create wallet with zero balance if it doesn't exist\n        wallet = Wallet.create(user.id, currency)\n        await this.walletRepository.save(wallet)\n      }\n\n      // 5. Return balance information\n      return ResultFactory.success({\n        currency: currency.code,\n        availableBalance: wallet.availableBalance.amount,\n        reservedBalance: wallet.reservedBalance.amount,\n        totalBalance: wallet.totalBalance.amount,\n        lastUpdated: wallet.updatedAt\n      })\n\n    } catch (error) {\n      console.error('Unexpected error in GetWalletBalanceQueryHandler:', error)\n      return ResultFactory.error(\n        'An unexpected error occurred',\n        ErrorCodes.UNEXPECTED_ERROR\n      )\n    }\n  }\n\n  /**\n   * Validate the get wallet balance query\n   */\n  private validateQuery(query: GetWalletBalanceQuery): ValidationResult {\n    const errors = []\n\n    // Validate user ID\n    if (!query.userId || query.userId.trim().length === 0) {\n      errors.push({\n        field: 'userId',\n        message: 'User ID is required',\n        code: 'REQUIRED'\n      })\n    }\n\n    // Validate currency\n    if (!query.currency || !Currency.isSupported(query.currency)) {\n      errors.push({\n        field: 'currency',\n        message: 'Invalid or unsupported currency',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    return errors.length === 0\n      ? ValidationResultFactory.success()\n      : ValidationResultFactory.failure(errors)\n  }\n}\n"],"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","ignoreList":[]}