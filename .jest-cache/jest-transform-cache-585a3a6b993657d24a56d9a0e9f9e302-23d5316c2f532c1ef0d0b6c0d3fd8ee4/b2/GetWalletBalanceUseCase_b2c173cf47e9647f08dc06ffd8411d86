9b46e48a469b8c1a1d889c3522e99400
/* istanbul ignore next */
function cov_28asc5c0xg() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetWalletBalanceUseCase.ts";
  var hash = "aad25f52cf4cc8da84ef3ab09978144961237eb3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetWalletBalanceUseCase.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "1": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 49
        }
      },
      "2": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 50,
          column: 9
        }
      },
      "3": {
        start: {
          line: 20,
          column: 37
        },
        end: {
          line: 20,
          column: 62
        }
      },
      "4": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 23,
          column: 13
        }
      },
      "5": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 196
        }
      },
      "6": {
        start: {
          line: 22,
          column: 98
        },
        end: {
          line: 22,
          column: 107
        }
      },
      "7": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 62
        }
      },
      "8": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 78
        }
      },
      "9": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 30,
          column: 13
        }
      },
      "10": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 29,
          column: 88
        }
      },
      "11": {
        start: {
          line: 32,
          column: 25
        },
        end: {
          line: 32,
          column: 95
        }
      },
      "12": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "13": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 58
        }
      },
      "14": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 57
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 45,
          column: 15
        }
      },
      "16": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 86
        }
      },
      "17": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 100
        }
      },
      "18": {
        start: {
          line: 56,
          column: 23
        },
        end: {
          line: 56,
          column: 25
        }
      },
      "19": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "20": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 63,
          column: 15
        }
      },
      "21": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "22": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 71,
          column: 15
        }
      },
      "23": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 75,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 50
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 24
          },
          end: {
            line: 51,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 93
          },
          end: {
            line: 22,
            column: 94
          }
        },
        loc: {
          start: {
            line: 22,
            column: 98
          },
          end: {
            line: 22,
            column: 107
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        loc: {
          start: {
            line: 55,
            column: 25
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 55
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 30,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 25
          }
        }, {
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 58,
            column: 61
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "6": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 66,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 66,
            column: 27
          }
        }, {
          start: {
            line: 66,
            column: 31
          },
          end: {
            line: 66,
            column: 68
          }
        }],
        line: 66
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 15
          },
          end: {
            line: 75,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 74,
            column: 14
          },
          end: {
            line: 74,
            column: 47
          }
        }, {
          start: {
            line: 75,
            column: 14
          },
          end: {
            line: 75,
            column: 53
          }
        }],
        line: 73
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetWalletBalanceUseCase.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetWalletBalanceUseCase.ts"],
      sourcesContent: ["/**\n * Get Wallet Balance Use Case\n * \n * Retrieves wallet balance information for a user and currency.\n * Handles wallet creation if it doesn't exist.\n */\n\nimport {\n  QueryHandler,\n  Query,\n  Result,\n  SuccessResult,\n  ErrorResult,\n  ResultFactory,\n  ValidationResult,\n  ValidationResultFactory,\n  ErrorCodes\n} from '../common/UseCase'\n\nimport {\n  Money,\n  Currency,\n  UserId,\n  Wallet,\n  UserNotFoundException,\n  WalletNotFoundException\n} from '../../domain'\n\nimport {\n  UserRepository,\n  WalletRepository\n} from '../../domain/repositories'\n\n/**\n * Get Wallet Balance Query\n */\nexport interface GetWalletBalanceQuery extends Query {\n  readonly type: 'GET_WALLET_BALANCE'\n  readonly userId: string\n  readonly currency: string\n}\n\n/**\n * Wallet Balance Result\n */\nexport interface WalletBalanceResult extends SuccessResult<{\n  currency: string\n  availableBalance: number\n  reservedBalance: number\n  totalBalance: number\n  lastUpdated: Date\n}> {}\n\n/**\n * Get Wallet Balance Query Handler\n */\nexport class GetWalletBalanceQueryHandler implements QueryHandler<GetWalletBalanceQuery, WalletBalanceResult | ErrorResult> {\n  constructor(\n    private readonly userRepository: UserRepository,\n    private readonly walletRepository: WalletRepository\n  ) {}\n\n  async handle(query: GetWalletBalanceQuery): Promise<WalletBalanceResult | ErrorResult> {\n    try {\n      // 1. Validate input\n      const validationResult = this.validateQuery(query)\n      if (!validationResult.isValid) {\n        return ResultFactory.error(\n          `Validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`,\n          ErrorCodes.INVALID_INPUT,\n          { validationErrors: validationResult.errors }\n        )\n      }\n\n      // 2. Parse domain objects\n      const currency = Currency.fromCode(query.currency)\n\n      // 3. Verify user exists using Clerk ID\n      const user = await this.userRepository.findByClerkId(query.userId)\n      if (!user) {\n        return ResultFactory.error(\n          'User not found',\n          ErrorCodes.USER_NOT_FOUND\n        )\n      }\n\n      // 4. Get or create wallet\n      let wallet = await this.walletRepository.findByUserIdAndCurrency(user.id, currency)\n\n      if (!wallet) {\n        // Create wallet with zero balance if it doesn't exist\n        wallet = Wallet.create(user.id, currency)\n        await this.walletRepository.save(wallet)\n      }\n\n      // 5. Return balance information\n      return ResultFactory.success({\n        currency: currency.code,\n        availableBalance: wallet.availableBalance.amount,\n        reservedBalance: wallet.reservedBalance.amount,\n        totalBalance: wallet.totalBalance.amount,\n        lastUpdated: wallet.updatedAt\n      })\n\n    } catch (error) {\n      console.error('Unexpected error in GetWalletBalanceQueryHandler:', error)\n      return ResultFactory.error(\n        'An unexpected error occurred',\n        ErrorCodes.UNEXPECTED_ERROR\n      )\n    }\n  }\n\n  /**\n   * Validate the get wallet balance query\n   */\n  private validateQuery(query: GetWalletBalanceQuery): ValidationResult {\n    const errors = []\n\n    // Validate user ID\n    if (!query.userId || query.userId.trim().length === 0) {\n      errors.push({\n        field: 'userId',\n        message: 'User ID is required',\n        code: 'REQUIRED'\n      })\n    }\n\n    // Validate currency\n    if (!query.currency || !Currency.isSupported(query.currency)) {\n      errors.push({\n        field: 'currency',\n        message: 'Invalid or unsupported currency',\n        code: 'INVALID_VALUE'\n      })\n    }\n\n    return errors.length === 0\n      ? ValidationResultFactory.success()\n      : ValidationResultFactory.failure(errors)\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "aad25f52cf4cc8da84ef3ab09978144961237eb3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_28asc5c0xg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_28asc5c0xg();
/**
 * Get Wallet Balance Use Case
 *
 * Retrieves wallet balance information for a user and currency.
 * Handles wallet creation if it doesn't exist.
 */
import { ResultFactory, ValidationResultFactory, ErrorCodes } from '../common/UseCase';
import { Currency, Wallet } from '../../domain';
/**
 * Get Wallet Balance Query Handler
 */
export class GetWalletBalanceQueryHandler {
  constructor(userRepository, walletRepository) {
    /* istanbul ignore next */
    cov_28asc5c0xg().f[0]++;
    cov_28asc5c0xg().s[0]++;
    this.userRepository = userRepository;
    /* istanbul ignore next */
    cov_28asc5c0xg().s[1]++;
    this.walletRepository = walletRepository;
  }
  async handle(query) {
    /* istanbul ignore next */
    cov_28asc5c0xg().f[1]++;
    cov_28asc5c0xg().s[2]++;
    try {
      // 1. Validate input
      const validationResult =
      /* istanbul ignore next */
      (cov_28asc5c0xg().s[3]++, this.validateQuery(query));
      /* istanbul ignore next */
      cov_28asc5c0xg().s[4]++;
      if (!validationResult.isValid) {
        /* istanbul ignore next */
        cov_28asc5c0xg().b[0][0]++;
        cov_28asc5c0xg().s[5]++;
        return ResultFactory.error(`Validation failed: ${validationResult.errors.map(e => {
          /* istanbul ignore next */
          cov_28asc5c0xg().f[2]++;
          cov_28asc5c0xg().s[6]++;
          return e.message;
        }).join(', ')}`, ErrorCodes.INVALID_INPUT, {
          validationErrors: validationResult.errors
        });
      } else
      /* istanbul ignore next */
      {
        cov_28asc5c0xg().b[0][1]++;
      }
      // 2. Parse domain objects
      const currency =
      /* istanbul ignore next */
      (cov_28asc5c0xg().s[7]++, Currency.fromCode(query.currency));
      // 3. Verify user exists using Clerk ID
      const user =
      /* istanbul ignore next */
      (cov_28asc5c0xg().s[8]++, await this.userRepository.findByClerkId(query.userId));
      /* istanbul ignore next */
      cov_28asc5c0xg().s[9]++;
      if (!user) {
        /* istanbul ignore next */
        cov_28asc5c0xg().b[1][0]++;
        cov_28asc5c0xg().s[10]++;
        return ResultFactory.error('User not found', ErrorCodes.USER_NOT_FOUND);
      } else
      /* istanbul ignore next */
      {
        cov_28asc5c0xg().b[1][1]++;
      }
      // 4. Get or create wallet
      let wallet =
      /* istanbul ignore next */
      (cov_28asc5c0xg().s[11]++, await this.walletRepository.findByUserIdAndCurrency(user.id, currency));
      /* istanbul ignore next */
      cov_28asc5c0xg().s[12]++;
      if (!wallet) {
        /* istanbul ignore next */
        cov_28asc5c0xg().b[2][0]++;
        cov_28asc5c0xg().s[13]++;
        // Create wallet with zero balance if it doesn't exist
        wallet = Wallet.create(user.id, currency);
        /* istanbul ignore next */
        cov_28asc5c0xg().s[14]++;
        await this.walletRepository.save(wallet);
      } else
      /* istanbul ignore next */
      {
        cov_28asc5c0xg().b[2][1]++;
      }
      // 5. Return balance information
      cov_28asc5c0xg().s[15]++;
      return ResultFactory.success({
        currency: currency.code,
        availableBalance: wallet.availableBalance.amount,
        reservedBalance: wallet.reservedBalance.amount,
        totalBalance: wallet.totalBalance.amount,
        lastUpdated: wallet.updatedAt
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_28asc5c0xg().s[16]++;
      console.error('Unexpected error in GetWalletBalanceQueryHandler:', error);
      /* istanbul ignore next */
      cov_28asc5c0xg().s[17]++;
      return ResultFactory.error('An unexpected error occurred', ErrorCodes.UNEXPECTED_ERROR);
    }
  }
  /**
   * Validate the get wallet balance query
   */
  validateQuery(query) {
    /* istanbul ignore next */
    cov_28asc5c0xg().f[3]++;
    const errors =
    /* istanbul ignore next */
    (cov_28asc5c0xg().s[18]++, []);
    // Validate user ID
    /* istanbul ignore next */
    cov_28asc5c0xg().s[19]++;
    if (
    /* istanbul ignore next */
    (cov_28asc5c0xg().b[4][0]++, !query.userId) ||
    /* istanbul ignore next */
    (cov_28asc5c0xg().b[4][1]++, query.userId.trim().length === 0)) {
      /* istanbul ignore next */
      cov_28asc5c0xg().b[3][0]++;
      cov_28asc5c0xg().s[20]++;
      errors.push({
        field: 'userId',
        message: 'User ID is required',
        code: 'REQUIRED'
      });
    } else
    /* istanbul ignore next */
    {
      cov_28asc5c0xg().b[3][1]++;
    }
    // Validate currency
    cov_28asc5c0xg().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_28asc5c0xg().b[6][0]++, !query.currency) ||
    /* istanbul ignore next */
    (cov_28asc5c0xg().b[6][1]++, !Currency.isSupported(query.currency))) {
      /* istanbul ignore next */
      cov_28asc5c0xg().b[5][0]++;
      cov_28asc5c0xg().s[22]++;
      errors.push({
        field: 'currency',
        message: 'Invalid or unsupported currency',
        code: 'INVALID_VALUE'
      });
    } else
    /* istanbul ignore next */
    {
      cov_28asc5c0xg().b[5][1]++;
    }
    cov_28asc5c0xg().s[23]++;
    return errors.length === 0 ?
    /* istanbul ignore next */
    (cov_28asc5c0xg().b[7][0]++, ValidationResultFactory.success()) :
    /* istanbul ignore next */
    (cov_28asc5c0xg().b[7][1]++, ValidationResultFactory.failure(errors));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,