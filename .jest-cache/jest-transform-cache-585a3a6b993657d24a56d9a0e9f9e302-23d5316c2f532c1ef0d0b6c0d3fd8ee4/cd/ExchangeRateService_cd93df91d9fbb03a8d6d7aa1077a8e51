00dcebccda15edb229e8a9b2d9aabed6
/* istanbul ignore next */
function cov_20xrscj23() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\services\\ExchangeRateService.ts";
  var hash = "ca0b2905f64a2d3b90b5e531427f2798347fe361";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\services\\ExchangeRateService.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 41
        }
      },
      "1": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 19,
          column: 9
        }
      },
      "2": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 18,
          column: 26
        }
      },
      "3": {
        start: {
          line: 20,
          column: 29
        },
        end: {
          line: 22,
          column: 85
        }
      },
      "4": {
        start: {
          line: 23,
          column: 32
        },
        end: {
          line: 23,
          column: 65
        }
      },
      "5": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 65
        }
      },
      "6": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "7": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 39,
          column: 14
        }
      },
      "8": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 96
        }
      },
      "9": {
        start: {
          line: 45,
          column: 29
        },
        end: {
          line: 45,
          column: 93
        }
      },
      "10": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 38
        }
      },
      "11": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "12": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 66,
          column: 9
        }
      },
      "13": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 24
        }
      },
      "14": {
        start: {
          line: 67,
          column: 27
        },
        end: {
          line: 67,
          column: 61
        }
      },
      "15": {
        start: {
          line: 68,
          column: 26
        },
        end: {
          line: 68,
          column: 68
        }
      },
      "16": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 39
        }
      },
      "17": {
        start: {
          line: 75,
          column: 20
        },
        end: {
          line: 75,
          column: 30
        }
      },
      "18": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 76,
          column: 83
        }
      },
      "19": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 42
        }
      },
      "20": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 86,
          column: 10
        }
      },
      "21": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 115
        }
      },
      "22": {
        start: {
          line: 92,
          column: 53
        },
        end: {
          line: 92,
          column: 113
        }
      },
      "23": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 79
        }
      },
      "24": {
        start: {
          line: 104,
          column: 33
        },
        end: {
          line: 104,
          column: 55
        }
      },
      "25": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "26": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 107,
          column: 53
        }
      },
      "27": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 53
        }
      },
      "28": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "29": {
        start: {
          line: 126,
          column: 20
        },
        end: {
          line: 126,
          column: 61
        }
      },
      "30": {
        start: {
          line: 127,
          column: 21
        },
        end: {
          line: 127,
          column: 44
        }
      },
      "31": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "32": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 129,
          column: 106
        }
      },
      "33": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 137,
          column: 10
        }
      },
      "34": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 61
        }
      },
      "35": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 61
        }
      },
      "36": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 38
        }
      },
      "37": {
        start: {
          line: 150,
          column: 27
        },
        end: {
          line: 150,
          column: 68
        }
      },
      "38": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 49
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 70
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 77
          },
          end: {
            line: 47,
            column: 5
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 31
          },
          end: {
            line: 59,
            column: 5
          }
        },
        line: 51
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 70
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 63
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 41
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 82
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 46
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 91
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 92,
            column: 45
          },
          end: {
            line: 92,
            column: 46
          }
        },
        loc: {
          start: {
            line: 92,
            column: 53
          },
          end: {
            line: 92,
            column: 113
          }
        },
        line: 92
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 39
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 97
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 55
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 103
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 18
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 119
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 51
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 125
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        loc: {
          start: {
            line: 139,
            column: 60
          },
          end: {
            line: 142,
            column: 5
          }
        },
        line: 139
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 48
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 146
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 47
          },
          end: {
            line: 16,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 64
          },
          end: {
            line: 16,
            column: 68
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 8
          },
          end: {
            line: 19,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 29
          },
          end: {
            line: 22,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 21,
            column: 14
          },
          end: {
            line: 21,
            column: 85
          }
        }, {
          start: {
            line: 22,
            column: 14
          },
          end: {
            line: 22,
            column: 85
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: 41,
            column: 13
          },
          end: {
            line: 44,
            column: 9
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 45
          },
          end: {
            line: 63,
            column: 68
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 67
          },
          end: {
            line: 63,
            column: 68
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 8
          },
          end: {
            line: 66,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 74,
            column: 22
          },
          end: {
            line: 74,
            column: 39
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 74,
            column: 38
          },
          end: {
            line: 74,
            column: 39
          }
        }],
        line: 74
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 53
          },
          end: {
            line: 92,
            column: 113
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 53
          },
          end: {
            line: 92,
            column: 83
          }
        }, {
          start: {
            line: 92,
            column: 87
          },
          end: {
            line: 92,
            column: 113
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: 109,
            column: 13
          },
          end: {
            line: 112,
            column: 9
          }
        }],
        line: 105
      },
      "9": {
        loc: {
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 8
          },
          end: {
            line: 130,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\services\\ExchangeRateService.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\services\\ExchangeRateService.ts"],
      sourcesContent: ["/**\n * Exchange Rate Domain Service\n * \n * Handles currency exchange rate calculations and validations.\n * Contains business logic for exchange rate operations.\n */\n\nimport { Money } from '../value-objects/Money'\nimport { Currency } from '../value-objects/Currency'\n\nexport interface ExchangeRate {\n  fromCurrency: Currency\n  toCurrency: Currency\n  rate: number\n  timestamp: Date\n  source: string\n}\n\nexport interface ExchangeRateProvider {\n  getCurrentRate(fromCurrency: Currency, toCurrency: Currency): Promise<ExchangeRate>\n  getHistoricalRate(fromCurrency: Currency, toCurrency: Currency, date: Date): Promise<ExchangeRate>\n}\n\nexport class ExchangeRateService {\n  private readonly rateProvider: ExchangeRateProvider\n\n  constructor(rateProvider: ExchangeRateProvider) {\n    this.rateProvider = rateProvider\n  }\n\n  /**\n   * Convert money from one currency to another\n   */\n  async convertMoney(\n    amount: Money,\n    targetCurrency: Currency,\n    useCurrentRate: boolean = true\n  ): Promise<Money> {\n    if (amount.currency.equals(targetCurrency)) {\n      return amount\n    }\n\n    const exchangeRate = useCurrentRate\n      ? await this.rateProvider.getCurrentRate(amount.currency, targetCurrency)\n      : await this.rateProvider.getCurrentRate(amount.currency, targetCurrency)\n\n    const convertedAmount = amount.amount * exchangeRate.rate\n    return Money.fromNumber(convertedAmount, targetCurrency)\n  }\n\n  /**\n   * Calculate exchange amount for a given input\n   */\n  async calculateExchangeAmount(\n    inputAmount: Money,\n    outputCurrency: Currency,\n    exchangeRate?: number\n  ): Promise<{ outputAmount: Money; rate: ExchangeRate }> {\n    let rate: ExchangeRate\n\n    if (exchangeRate) {\n      // Use provided rate\n      rate = {\n        fromCurrency: inputAmount.currency,\n        toCurrency: outputCurrency,\n        rate: exchangeRate,\n        timestamp: new Date(),\n        source: 'manual'\n      }\n    } else {\n      // Get current market rate\n      rate = await this.rateProvider.getCurrentRate(inputAmount.currency, outputCurrency)\n    }\n\n    const outputAmount = Money.fromNumber(\n      inputAmount.amount * rate.rate,\n      outputCurrency\n    )\n\n    return { outputAmount, rate }\n  }\n\n  /**\n   * Calculate the inverse exchange rate\n   */\n  calculateInverseRate(rate: ExchangeRate): ExchangeRate {\n    return {\n      fromCurrency: rate.toCurrency,\n      toCurrency: rate.fromCurrency,\n      rate: 1 / rate.rate,\n      timestamp: rate.timestamp,\n      source: rate.source\n    }\n  }\n\n  /**\n   * Validate exchange rate is within acceptable bounds\n   */\n  validateExchangeRate(\n    rate: ExchangeRate,\n    expectedRate?: number,\n    tolerancePercentage: number = 5\n  ): boolean {\n    if (!expectedRate) {\n      return true\n    }\n\n    const difference = Math.abs(rate.rate - expectedRate)\n    const tolerance = expectedRate * (tolerancePercentage / 100)\n    \n    return difference <= tolerance\n  }\n\n  /**\n   * Check if exchange rate is stale\n   */\n  isRateStale(rate: ExchangeRate, maxAgeMinutes: number = 5): boolean {\n    const now = new Date()\n    const ageMinutes = (now.getTime() - rate.timestamp.getTime()) / (1000 * 60)\n    return ageMinutes > maxAgeMinutes\n  }\n\n  /**\n   * Get supported currency pairs\n   */\n  getSupportedPairs(): Array<{ from: Currency; to: Currency }> {\n    return [\n      { from: Currency.EUR(), to: Currency.AOA() },\n      { from: Currency.AOA(), to: Currency.EUR() }\n    ]\n  }\n\n  /**\n   * Check if currency pair is supported\n   */\n  isPairSupported(fromCurrency: Currency, toCurrency: Currency): boolean {\n    return this.getSupportedPairs().some(pair =>\n      pair.from.equals(fromCurrency) && pair.to.equals(toCurrency)\n    )\n  }\n\n  /**\n   * Calculate spread between buy and sell rates\n   */\n  calculateSpread(buyRate: number, sellRate: number): number {\n    return Math.abs(buyRate - sellRate) / ((buyRate + sellRate) / 2) * 100\n  }\n\n  /**\n   * Apply spread to exchange rate\n   */\n  applySpread(\n    baseRate: number,\n    spreadPercentage: number,\n    operation: 'buy' | 'sell'\n  ): number {\n    const spreadMultiplier = spreadPercentage / 100\n    \n    if (operation === 'buy') {\n      // When buying foreign currency, rate is higher (less favorable)\n      return baseRate * (1 + spreadMultiplier)\n    } else {\n      // When selling foreign currency, rate is lower (less favorable)\n      return baseRate * (1 - spreadMultiplier)\n    }\n  }\n}\n\n/**\n * Mock Exchange Rate Provider for testing and development\n */\nexport class MockExchangeRateProvider implements ExchangeRateProvider {\n  private readonly mockRates: Map<string, number> = new Map([\n    ['EUR-AOA', 1200], // 1 EUR = 1200 AOA\n    ['AOA-EUR', 1/1200] // 1 AOA = 0.000833 EUR\n  ])\n\n  async getCurrentRate(fromCurrency: Currency, toCurrency: Currency): Promise<ExchangeRate> {\n    const key = `${fromCurrency.code}-${toCurrency.code}`\n    const rate = this.mockRates.get(key)\n    \n    if (!rate) {\n      throw new Error(`Exchange rate not available for ${fromCurrency.code} to ${toCurrency.code}`)\n    }\n\n    return {\n      fromCurrency,\n      toCurrency,\n      rate,\n      timestamp: new Date(),\n      source: 'mock'\n    }\n  }\n\n  async getHistoricalRate(\n    fromCurrency: Currency,\n    toCurrency: Currency,\n    date: Date\n  ): Promise<ExchangeRate> {\n    // For mock, return current rate\n    return this.getCurrentRate(fromCurrency, toCurrency)\n  }\n\n  /**\n   * Update mock rate for testing\n   */\n  setMockRate(fromCurrency: Currency, toCurrency: Currency, rate: number): void {\n    const key = `${fromCurrency.code}-${toCurrency.code}`\n    this.mockRates.set(key, rate)\n    \n    // Also set inverse rate\n    const inverseKey = `${toCurrency.code}-${fromCurrency.code}`\n    this.mockRates.set(inverseKey, 1 / rate)\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ca0b2905f64a2d3b90b5e531427f2798347fe361"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20xrscj23 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20xrscj23();
/**
 * Exchange Rate Domain Service
 *
 * Handles currency exchange rate calculations and validations.
 * Contains business logic for exchange rate operations.
 */
import { Money } from '../value-objects/Money';
import { Currency } from '../value-objects/Currency';
export class ExchangeRateService {
  constructor(rateProvider) {
    /* istanbul ignore next */
    cov_20xrscj23().f[0]++;
    cov_20xrscj23().s[0]++;
    this.rateProvider = rateProvider;
  }
  /**
   * Convert money from one currency to another
   */
  async convertMoney(amount, targetCurrency, useCurrentRate =
  /* istanbul ignore next */
  (cov_20xrscj23().b[0][0]++, true)) {
    /* istanbul ignore next */
    cov_20xrscj23().f[1]++;
    cov_20xrscj23().s[1]++;
    if (amount.currency.equals(targetCurrency)) {
      /* istanbul ignore next */
      cov_20xrscj23().b[1][0]++;
      cov_20xrscj23().s[2]++;
      return amount;
    } else
    /* istanbul ignore next */
    {
      cov_20xrscj23().b[1][1]++;
    }
    const exchangeRate =
    /* istanbul ignore next */
    (cov_20xrscj23().s[3]++, useCurrentRate ?
    /* istanbul ignore next */
    (cov_20xrscj23().b[2][0]++, await this.rateProvider.getCurrentRate(amount.currency, targetCurrency)) :
    /* istanbul ignore next */
    (cov_20xrscj23().b[2][1]++, await this.rateProvider.getCurrentRate(amount.currency, targetCurrency)));
    const convertedAmount =
    /* istanbul ignore next */
    (cov_20xrscj23().s[4]++, amount.amount * exchangeRate.rate);
    /* istanbul ignore next */
    cov_20xrscj23().s[5]++;
    return Money.fromNumber(convertedAmount, targetCurrency);
  }
  /**
   * Calculate exchange amount for a given input
   */
  async calculateExchangeAmount(inputAmount, outputCurrency, exchangeRate) {
    /* istanbul ignore next */
    cov_20xrscj23().f[2]++;
    let rate;
    /* istanbul ignore next */
    cov_20xrscj23().s[6]++;
    if (exchangeRate) {
      /* istanbul ignore next */
      cov_20xrscj23().b[3][0]++;
      cov_20xrscj23().s[7]++;
      // Use provided rate
      rate = {
        fromCurrency: inputAmount.currency,
        toCurrency: outputCurrency,
        rate: exchangeRate,
        timestamp: new Date(),
        source: 'manual'
      };
    } else {
      /* istanbul ignore next */
      cov_20xrscj23().b[3][1]++;
      cov_20xrscj23().s[8]++;
      // Get current market rate
      rate = await this.rateProvider.getCurrentRate(inputAmount.currency, outputCurrency);
    }
    const outputAmount =
    /* istanbul ignore next */
    (cov_20xrscj23().s[9]++, Money.fromNumber(inputAmount.amount * rate.rate, outputCurrency));
    /* istanbul ignore next */
    cov_20xrscj23().s[10]++;
    return {
      outputAmount,
      rate
    };
  }
  /**
   * Calculate the inverse exchange rate
   */
  calculateInverseRate(rate) {
    /* istanbul ignore next */
    cov_20xrscj23().f[3]++;
    cov_20xrscj23().s[11]++;
    return {
      fromCurrency: rate.toCurrency,
      toCurrency: rate.fromCurrency,
      rate: 1 / rate.rate,
      timestamp: rate.timestamp,
      source: rate.source
    };
  }
  /**
   * Validate exchange rate is within acceptable bounds
   */
  validateExchangeRate(rate, expectedRate, tolerancePercentage =
  /* istanbul ignore next */
  (cov_20xrscj23().b[4][0]++, 5)) {
    /* istanbul ignore next */
    cov_20xrscj23().f[4]++;
    cov_20xrscj23().s[12]++;
    if (!expectedRate) {
      /* istanbul ignore next */
      cov_20xrscj23().b[5][0]++;
      cov_20xrscj23().s[13]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_20xrscj23().b[5][1]++;
    }
    const difference =
    /* istanbul ignore next */
    (cov_20xrscj23().s[14]++, Math.abs(rate.rate - expectedRate));
    const tolerance =
    /* istanbul ignore next */
    (cov_20xrscj23().s[15]++, expectedRate * (tolerancePercentage / 100));
    /* istanbul ignore next */
    cov_20xrscj23().s[16]++;
    return difference <= tolerance;
  }
  /**
   * Check if exchange rate is stale
   */
  isRateStale(rate, maxAgeMinutes =
  /* istanbul ignore next */
  (cov_20xrscj23().b[6][0]++, 5)) {
    /* istanbul ignore next */
    cov_20xrscj23().f[5]++;
    const now =
    /* istanbul ignore next */
    (cov_20xrscj23().s[17]++, new Date());
    const ageMinutes =
    /* istanbul ignore next */
    (cov_20xrscj23().s[18]++, (now.getTime() - rate.timestamp.getTime()) / (1000 * 60));
    /* istanbul ignore next */
    cov_20xrscj23().s[19]++;
    return ageMinutes > maxAgeMinutes;
  }
  /**
   * Get supported currency pairs
   */
  getSupportedPairs() {
    /* istanbul ignore next */
    cov_20xrscj23().f[6]++;
    cov_20xrscj23().s[20]++;
    return [{
      from: Currency.EUR(),
      to: Currency.AOA()
    }, {
      from: Currency.AOA(),
      to: Currency.EUR()
    }];
  }
  /**
   * Check if currency pair is supported
   */
  isPairSupported(fromCurrency, toCurrency) {
    /* istanbul ignore next */
    cov_20xrscj23().f[7]++;
    cov_20xrscj23().s[21]++;
    return this.getSupportedPairs().some(pair => {
      /* istanbul ignore next */
      cov_20xrscj23().f[8]++;
      cov_20xrscj23().s[22]++;
      return /* istanbul ignore next */(cov_20xrscj23().b[7][0]++, pair.from.equals(fromCurrency)) &&
      /* istanbul ignore next */
      (cov_20xrscj23().b[7][1]++, pair.to.equals(toCurrency));
    });
  }
  /**
   * Calculate spread between buy and sell rates
   */
  calculateSpread(buyRate, sellRate) {
    /* istanbul ignore next */
    cov_20xrscj23().f[9]++;
    cov_20xrscj23().s[23]++;
    return Math.abs(buyRate - sellRate) / ((buyRate + sellRate) / 2) * 100;
  }
  /**
   * Apply spread to exchange rate
   */
  applySpread(baseRate, spreadPercentage, operation) {
    /* istanbul ignore next */
    cov_20xrscj23().f[10]++;
    const spreadMultiplier =
    /* istanbul ignore next */
    (cov_20xrscj23().s[24]++, spreadPercentage / 100);
    /* istanbul ignore next */
    cov_20xrscj23().s[25]++;
    if (operation === 'buy') {
      /* istanbul ignore next */
      cov_20xrscj23().b[8][0]++;
      cov_20xrscj23().s[26]++;
      // When buying foreign currency, rate is higher (less favorable)
      return baseRate * (1 + spreadMultiplier);
    } else {
      /* istanbul ignore next */
      cov_20xrscj23().b[8][1]++;
      cov_20xrscj23().s[27]++;
      // When selling foreign currency, rate is lower (less favorable)
      return baseRate * (1 - spreadMultiplier);
    }
  }
}
/**
 * Mock Exchange Rate Provider for testing and development
 */
export class MockExchangeRateProvider {
  constructor() {
    /* istanbul ignore next */
    cov_20xrscj23().f[11]++;
    cov_20xrscj23().s[28]++;
    this.mockRates = new Map([['EUR-AOA', 1200],
    // 1 EUR = 1200 AOA
    ['AOA-EUR', 1 / 1200] // 1 AOA = 0.000833 EUR
    ]);
  }
  async getCurrentRate(fromCurrency, toCurrency) {
    /* istanbul ignore next */
    cov_20xrscj23().f[12]++;
    const key =
    /* istanbul ignore next */
    (cov_20xrscj23().s[29]++, `${fromCurrency.code}-${toCurrency.code}`);
    const rate =
    /* istanbul ignore next */
    (cov_20xrscj23().s[30]++, this.mockRates.get(key));
    /* istanbul ignore next */
    cov_20xrscj23().s[31]++;
    if (!rate) {
      /* istanbul ignore next */
      cov_20xrscj23().b[9][0]++;
      cov_20xrscj23().s[32]++;
      throw new Error(`Exchange rate not available for ${fromCurrency.code} to ${toCurrency.code}`);
    } else
    /* istanbul ignore next */
    {
      cov_20xrscj23().b[9][1]++;
    }
    cov_20xrscj23().s[33]++;
    return {
      fromCurrency,
      toCurrency,
      rate,
      timestamp: new Date(),
      source: 'mock'
    };
  }
  async getHistoricalRate(fromCurrency, toCurrency, date) {
    /* istanbul ignore next */
    cov_20xrscj23().f[13]++;
    cov_20xrscj23().s[34]++;
    // For mock, return current rate
    return this.getCurrentRate(fromCurrency, toCurrency);
  }
  /**
   * Update mock rate for testing
   */
  setMockRate(fromCurrency, toCurrency, rate) {
    /* istanbul ignore next */
    cov_20xrscj23().f[14]++;
    const key =
    /* istanbul ignore next */
    (cov_20xrscj23().s[35]++, `${fromCurrency.code}-${toCurrency.code}`);
    /* istanbul ignore next */
    cov_20xrscj23().s[36]++;
    this.mockRates.set(key, rate);
    // Also set inverse rate
    const inverseKey =
    /* istanbul ignore next */
    (cov_20xrscj23().s[37]++, `${toCurrency.code}-${fromCurrency.code}`);
    /* istanbul ignore next */
    cov_20xrscj23().s[38]++;
    this.mockRates.set(inverseKey, 1 / rate);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,