{"version":3,"names":["cov_2dejolvorh","actualCoverage","checkDatabaseHealth","createSuccessResponse","createErrorResponse","withErrorHandling","withCors","healthHandler","f","dbHealth","s","success","b","healthData","status","timestamp","Date","toISOString","version","database","_a","data","environment","process","env","NODE_ENV","GET"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\health\\status\\route.ts"],"sourcesContent":["\nimport { checkDatabaseHealth } from '@/lib/database/functions';\nimport { createSuccessResponse, createErrorResponse, withErrorHandling } from '@/lib/api/responses';\nimport { withCors } from '@/lib/api/cors';\n\nasync function healthHandler() {\n  // Check database connectivity\n  const dbHealth = await checkDatabaseHealth();\n\n  if (!dbHealth.success) {\n    return createErrorResponse(\n      'Database connection failed',\n      'DATABASE_ERROR',\n      503\n    );\n  }\n\n  const healthData = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    version: '1.0.0',\n    database: {\n      status: 'connected',\n      timestamp: dbHealth.data?.timestamp\n    },\n    environment: process.env.NODE_ENV || 'development'\n  };\n\n  return createSuccessResponse(healthData, 'System is healthy');\n}\n\nexport const GET = withCors(withErrorHandling(healthHandler));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAsBM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AArBN,SAASE,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,qBAAqB,EAAEC,mBAAmB,EAAEC,iBAAiB,QAAQ,qBAAqB;AACnG,SAASC,QAAQ,QAAQ,gBAAgB;AAEzC,eAAeC,aAAaA,CAAA;EAAA;EAAAP,cAAA,GAAAQ,CAAA;;EAC1B;EACA,MAAMC,QAAQ;EAAA;EAAA,CAAAT,cAAA,GAAAU,CAAA,OAAG,MAAMR,mBAAmB,EAAE;EAAC;EAAAF,cAAA,GAAAU,CAAA;EAE7C,IAAI,CAACD,QAAQ,CAACE,OAAO,EAAE;IAAA;IAAAX,cAAA,GAAAY,CAAA;IAAAZ,cAAA,GAAAU,CAAA;IACrB,OAAON,mBAAmB,CACxB,4BAA4B,EAC5B,gBAAgB,EAChB,GAAG,CACJ;EACH,CAAC;EAAA;EAAA;IAAAJ,cAAA,GAAAY,CAAA;EAAA;EAED,MAAMC,UAAU;EAAA;EAAA,CAAAb,cAAA,GAAAU,CAAA,OAAG;IACjBI,MAAM,EAAE,SAAS;IACjBC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;IACnCC,OAAO,EAAE,OAAO;IAChBC,QAAQ,EAAE;MACRL,MAAM,EAAE,WAAW;MACnBC,SAAS;MAAE;MAAA,CAAAf,cAAA,GAAAY,CAAA,WAAAQ,EAAA,GAAAX,QAAQ,CAACY,IAAI;MAAA;MAAA,CAAArB,cAAA,GAAAY,CAAA,UAAAQ,EAAA;MAAA;MAAA,CAAApB,cAAA,GAAAY,CAAA;MAAA;MAAA,CAAAZ,cAAA,GAAAY,CAAA,UAAAQ,EAAA,CAAEL,SAAS;KACpC;IACDO,WAAW;IAAE;IAAA,CAAAtB,cAAA,GAAAY,CAAA,UAAAW,OAAO,CAACC,GAAG,CAACC,QAAQ;IAAA;IAAA,CAAAzB,cAAA,GAAAY,CAAA,UAAI,aAAa;GACnD;EAAC;EAAAZ,cAAA,GAAAU,CAAA;EAEF,OAAOP,qBAAqB,CAACU,UAAU,EAAE,mBAAmB,CAAC;AAC/D;AAEA,OAAO,MAAMa,GAAG;AAAA;AAAA,CAAA1B,cAAA,GAAAU,CAAA,OAAGJ,QAAQ,CAACD,iBAAiB,CAACE,aAAa,CAAC,CAAC","ignoreList":[]}