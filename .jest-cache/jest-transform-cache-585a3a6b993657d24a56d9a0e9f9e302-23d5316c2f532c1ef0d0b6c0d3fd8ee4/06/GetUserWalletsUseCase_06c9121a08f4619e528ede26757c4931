4f70d41ef48f2a94634d1002765bc2d2
/* istanbul ignore next */
function cov_5bgyb2veb() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetUserWalletsUseCase.ts";
  var hash = "e59a5eed01cf9c92dee328a653c8d30f93e98c5f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetUserWalletsUseCase.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 45
        }
      },
      "1": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 49
        }
      },
      "2": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "3": {
        start: {
          line: 20,
          column: 37
        },
        end: {
          line: 20,
          column: 62
        }
      },
      "4": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 23,
          column: 13
        }
      },
      "5": {
        start: {
          line: 22,
          column: 16
        },
        end: {
          line: 22,
          column: 196
        }
      },
      "6": {
        start: {
          line: 22,
          column: 98
        },
        end: {
          line: 22,
          column: 107
        }
      },
      "7": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 25,
          column: 78
        }
      },
      "8": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 28,
          column: 13
        }
      },
      "9": {
        start: {
          line: 27,
          column: 16
        },
        end: {
          line: 27,
          column: 88
        }
      },
      "10": {
        start: {
          line: 30,
          column: 36
        },
        end: {
          line: 30,
          column: 85
        }
      },
      "11": {
        start: {
          line: 31,
          column: 39
        },
        end: {
          line: 31,
          column: 89
        }
      },
      "12": {
        start: {
          line: 31,
          column: 72
        },
        end: {
          line: 31,
          column: 87
        }
      },
      "13": {
        start: {
          line: 33,
          column: 40
        },
        end: {
          line: 33,
          column: 66
        }
      },
      "14": {
        start: {
          line: 34,
          column: 36
        },
        end: {
          line: 34,
          column: 38
        }
      },
      "15": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "16": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 39,
          column: 17
        }
      },
      "17": {
        start: {
          line: 37,
          column: 38
        },
        end: {
          line: 37,
          column: 70
        }
      },
      "18": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 52
        }
      },
      "19": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 44,
          column: 13
        }
      },
      "20": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 70
        }
      },
      "21": {
        start: {
          line: 46,
          column: 31
        },
        end: {
          line: 46,
          column: 71
        }
      },
      "22": {
        start: {
          line: 48,
          column: 36
        },
        end: {
          line: 48,
          column: 37
        }
      },
      "23": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 57,
          column: 13
        }
      },
      "24": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 56,
          column: 17
        }
      },
      "25": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 68
        }
      },
      "26": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 75
        }
      },
      "27": {
        start: {
          line: 59,
          column: 31
        },
        end: {
          line: 65,
          column: 15
        }
      },
      "28": {
        start: {
          line: 59,
          column: 57
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "29": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 69,
          column: 15
        }
      },
      "30": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 84
        }
      },
      "31": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 100
        }
      },
      "32": {
        start: {
          line: 80,
          column: 23
        },
        end: {
          line: 80,
          column: 25
        }
      },
      "33": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "34": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 87,
          column: 15
        }
      },
      "35": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 91,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 50
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 24
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 93
          },
          end: {
            line: 22,
            column: 94
          }
        },
        loc: {
          start: {
            line: 22,
            column: 98
          },
          end: {
            line: 22,
            column: 107
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 67
          },
          end: {
            line: 31,
            column: 68
          }
        },
        loc: {
          start: {
            line: 31,
            column: 72
          },
          end: {
            line: 31,
            column: 87
          }
        },
        line: 31
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 59,
            column: 46
          },
          end: {
            line: 59,
            column: 47
          }
        },
        loc: {
          start: {
            line: 59,
            column: 57
          },
          end: {
            line: 65,
            column: 13
          }
        },
        line: 59
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 25
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 79
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 12
          },
          end: {
            line: 23,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 12
          },
          end: {
            line: 28,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "3": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 44,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "4": {
        loc: {
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        }, {
          start: {
            line: 53,
            column: 21
          },
          end: {
            line: 56,
            column: 17
          }
        }],
        line: 50
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 82,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 12
          },
          end: {
            line: 82,
            column: 25
          }
        }, {
          start: {
            line: 82,
            column: 29
          },
          end: {
            line: 82,
            column: 61
          }
        }],
        line: 82
      },
      "7": {
        loc: {
          start: {
            line: 89,
            column: 15
          },
          end: {
            line: 91,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 90,
            column: 14
          },
          end: {
            line: 90,
            column: 47
          }
        }, {
          start: {
            line: 91,
            column: 14
          },
          end: {
            line: 91,
            column: 53
          }
        }],
        line: 89
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetUserWalletsUseCase.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetUserWalletsUseCase.ts"],
      sourcesContent: ["/**\n * Get User Wallets Use Case\n * \n * Retrieves all wallets for a user across all supported currencies.\n * Creates missing wallets if they don't exist.\n */\n\nimport {\n  QueryHandler,\n  Query,\n  Result,\n  SuccessResult,\n  ErrorResult,\n  ResultFactory,\n  ValidationResult,\n  ValidationResultFactory,\n  ErrorCodes\n} from '../common/UseCase'\n\nimport {\n  Money,\n  Currency,\n  UserId,\n  Wallet,\n  UserNotFoundException\n} from '../../domain'\n\nimport {\n  UserRepository,\n  WalletRepository\n} from '../../domain/repositories'\n\n/**\n * Get User Wallets Query\n */\nexport interface GetUserWalletsQuery extends Query {\n  readonly type: 'GET_USER_WALLETS'\n  readonly userId: string\n}\n\n/**\n * User Wallets Result\n */\nexport interface UserWalletsResult extends SuccessResult<{\n  wallets: Array<{\n    currency: string\n    availableBalance: number\n    reservedBalance: number\n    totalBalance: number\n    lastUpdated: Date\n  }>\n  totalBalanceInEUR: number\n}> {}\n\n/**\n * Get User Wallets Query Handler\n */\nexport class GetUserWalletsQueryHandler implements QueryHandler<GetUserWalletsQuery, UserWalletsResult | ErrorResult> {\n  constructor(\n    private readonly userRepository: UserRepository,\n    private readonly walletRepository: WalletRepository\n  ) {}\n\n  async handle(query: GetUserWalletsQuery): Promise<UserWalletsResult | ErrorResult> {\n    try {\n      // 1. Validate input\n      const validationResult = this.validateQuery(query)\n      if (!validationResult.isValid) {\n        return ResultFactory.error(\n          `Validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`,\n          ErrorCodes.INVALID_INPUT,\n          { validationErrors: validationResult.errors }\n        )\n      }\n\n      // 2. Verify user exists using Clerk ID\n      const user = await this.userRepository.findByClerkId(query.userId)\n      if (!user) {\n        return ResultFactory.error(\n          'User not found',\n          ErrorCodes.USER_NOT_FOUND\n        )\n      }\n\n      // 3. Get existing wallets using the user's actual ID\n      const existingWallets = await this.walletRepository.findByUserId(user.id)\n      const existingCurrencies = new Set(existingWallets.map(w => w.currency.code))\n\n      // 5. Create missing wallets for supported currencies\n      const supportedCurrencies = Currency.getAllSupported()\n      const walletsToCreate: Wallet[] = []\n\n      for (const currency of supportedCurrencies) {\n        if (!existingCurrencies.has(currency.code)) {\n          const newWallet = Wallet.create(user.id, currency)\n          walletsToCreate.push(newWallet)\n        }\n      }\n\n      // Save new wallets if any\n      if (walletsToCreate.length > 0) {\n        await this.walletRepository.saveMany(walletsToCreate)\n      }\n\n      // 6. Combine all wallets\n      const allWallets = [...existingWallets, ...walletsToCreate]\n\n      // 7. Calculate total balance in EUR (simplified - would need exchange rates in real implementation)\n      let totalBalanceInEUR = 0\n      for (const wallet of allWallets) {\n        if (wallet.currency.isEUR()) {\n          totalBalanceInEUR += wallet.totalBalance.amount\n        } else {\n          // Simplified conversion - in real implementation, use ExchangeRateService\n          totalBalanceInEUR += wallet.totalBalance.amount / 1200 // Assuming 1 EUR = 1200 AOA\n        }\n      }\n\n      // 8. Format response\n      const walletData = allWallets.map(wallet => ({\n        currency: wallet.currency.code,\n        availableBalance: wallet.availableBalance.amount,\n        reservedBalance: wallet.reservedBalance.amount,\n        totalBalance: wallet.totalBalance.amount,\n        lastUpdated: wallet.updatedAt\n      }))\n\n      return ResultFactory.success({\n        wallets: walletData,\n        totalBalanceInEUR: Math.round(totalBalanceInEUR * 100) / 100 // Round to 2 decimal places\n      })\n\n    } catch (error) {\n      console.error('Unexpected error in GetUserWalletsQueryHandler:', error)\n      return ResultFactory.error(\n        'An unexpected error occurred',\n        ErrorCodes.UNEXPECTED_ERROR\n      )\n    }\n  }\n\n  /**\n   * Validate the get user wallets query\n   */\n  private validateQuery(query: GetUserWalletsQuery): ValidationResult {\n    const errors = []\n\n    // Validate user ID\n    if (!query.userId || query.userId.trim().length === 0) {\n      errors.push({\n        field: 'userId',\n        message: 'User ID is required',\n        code: 'REQUIRED'\n      })\n    }\n\n    return errors.length === 0\n      ? ValidationResultFactory.success()\n      : ValidationResultFactory.failure(errors)\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e59a5eed01cf9c92dee328a653c8d30f93e98c5f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_5bgyb2veb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_5bgyb2veb();
/**
 * Get User Wallets Use Case
 *
 * Retrieves all wallets for a user across all supported currencies.
 * Creates missing wallets if they don't exist.
 */
import { ResultFactory, ValidationResultFactory, ErrorCodes } from '../common/UseCase';
import { Currency, Wallet } from '../../domain';
/**
 * Get User Wallets Query Handler
 */
export class GetUserWalletsQueryHandler {
  constructor(userRepository, walletRepository) {
    /* istanbul ignore next */
    cov_5bgyb2veb().f[0]++;
    cov_5bgyb2veb().s[0]++;
    this.userRepository = userRepository;
    /* istanbul ignore next */
    cov_5bgyb2veb().s[1]++;
    this.walletRepository = walletRepository;
  }
  async handle(query) {
    /* istanbul ignore next */
    cov_5bgyb2veb().f[1]++;
    cov_5bgyb2veb().s[2]++;
    try {
      // 1. Validate input
      const validationResult =
      /* istanbul ignore next */
      (cov_5bgyb2veb().s[3]++, this.validateQuery(query));
      /* istanbul ignore next */
      cov_5bgyb2veb().s[4]++;
      if (!validationResult.isValid) {
        /* istanbul ignore next */
        cov_5bgyb2veb().b[0][0]++;
        cov_5bgyb2veb().s[5]++;
        return ResultFactory.error(`Validation failed: ${validationResult.errors.map(e => {
          /* istanbul ignore next */
          cov_5bgyb2veb().f[2]++;
          cov_5bgyb2veb().s[6]++;
          return e.message;
        }).join(', ')}`, ErrorCodes.INVALID_INPUT, {
          validationErrors: validationResult.errors
        });
      } else
      /* istanbul ignore next */
      {
        cov_5bgyb2veb().b[0][1]++;
      }
      // 2. Verify user exists using Clerk ID
      const user =
      /* istanbul ignore next */
      (cov_5bgyb2veb().s[7]++, await this.userRepository.findByClerkId(query.userId));
      /* istanbul ignore next */
      cov_5bgyb2veb().s[8]++;
      if (!user) {
        /* istanbul ignore next */
        cov_5bgyb2veb().b[1][0]++;
        cov_5bgyb2veb().s[9]++;
        return ResultFactory.error('User not found', ErrorCodes.USER_NOT_FOUND);
      } else
      /* istanbul ignore next */
      {
        cov_5bgyb2veb().b[1][1]++;
      }
      // 3. Get existing wallets using the user's actual ID
      const existingWallets =
      /* istanbul ignore next */
      (cov_5bgyb2veb().s[10]++, await this.walletRepository.findByUserId(user.id));
      const existingCurrencies =
      /* istanbul ignore next */
      (cov_5bgyb2veb().s[11]++, new Set(existingWallets.map(w => {
        /* istanbul ignore next */
        cov_5bgyb2veb().f[3]++;
        cov_5bgyb2veb().s[12]++;
        return w.currency.code;
      })));
      // 5. Create missing wallets for supported currencies
      const supportedCurrencies =
      /* istanbul ignore next */
      (cov_5bgyb2veb().s[13]++, Currency.getAllSupported());
      const walletsToCreate =
      /* istanbul ignore next */
      (cov_5bgyb2veb().s[14]++, []);
      /* istanbul ignore next */
      cov_5bgyb2veb().s[15]++;
      for (const currency of supportedCurrencies) {
        /* istanbul ignore next */
        cov_5bgyb2veb().s[16]++;
        if (!existingCurrencies.has(currency.code)) {
          /* istanbul ignore next */
          cov_5bgyb2veb().b[2][0]++;
          const newWallet =
          /* istanbul ignore next */
          (cov_5bgyb2veb().s[17]++, Wallet.create(user.id, currency));
          /* istanbul ignore next */
          cov_5bgyb2veb().s[18]++;
          walletsToCreate.push(newWallet);
        } else
        /* istanbul ignore next */
        {
          cov_5bgyb2veb().b[2][1]++;
        }
      }
      // Save new wallets if any
      /* istanbul ignore next */
      cov_5bgyb2veb().s[19]++;
      if (walletsToCreate.length > 0) {
        /* istanbul ignore next */
        cov_5bgyb2veb().b[3][0]++;
        cov_5bgyb2veb().s[20]++;
        await this.walletRepository.saveMany(walletsToCreate);
      } else
      /* istanbul ignore next */
      {
        cov_5bgyb2veb().b[3][1]++;
      }
      // 6. Combine all wallets
      const allWallets =
      /* istanbul ignore next */
      (cov_5bgyb2veb().s[21]++, [...existingWallets, ...walletsToCreate]);
      // 7. Calculate total balance in EUR (simplified - would need exchange rates in real implementation)
      let totalBalanceInEUR =
      /* istanbul ignore next */
      (cov_5bgyb2veb().s[22]++, 0);
      /* istanbul ignore next */
      cov_5bgyb2veb().s[23]++;
      for (const wallet of allWallets) {
        /* istanbul ignore next */
        cov_5bgyb2veb().s[24]++;
        if (wallet.currency.isEUR()) {
          /* istanbul ignore next */
          cov_5bgyb2veb().b[4][0]++;
          cov_5bgyb2veb().s[25]++;
          totalBalanceInEUR += wallet.totalBalance.amount;
        } else {
          /* istanbul ignore next */
          cov_5bgyb2veb().b[4][1]++;
          cov_5bgyb2veb().s[26]++;
          // Simplified conversion - in real implementation, use ExchangeRateService
          totalBalanceInEUR += wallet.totalBalance.amount / 1200; // Assuming 1 EUR = 1200 AOA
        }
      }
      // 8. Format response
      const walletData =
      /* istanbul ignore next */
      (cov_5bgyb2veb().s[27]++, allWallets.map(wallet => {
        /* istanbul ignore next */
        cov_5bgyb2veb().f[4]++;
        cov_5bgyb2veb().s[28]++;
        return {
          currency: wallet.currency.code,
          availableBalance: wallet.availableBalance.amount,
          reservedBalance: wallet.reservedBalance.amount,
          totalBalance: wallet.totalBalance.amount,
          lastUpdated: wallet.updatedAt
        };
      }));
      /* istanbul ignore next */
      cov_5bgyb2veb().s[29]++;
      return ResultFactory.success({
        wallets: walletData,
        totalBalanceInEUR: Math.round(totalBalanceInEUR * 100) / 100 // Round to 2 decimal places
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_5bgyb2veb().s[30]++;
      console.error('Unexpected error in GetUserWalletsQueryHandler:', error);
      /* istanbul ignore next */
      cov_5bgyb2veb().s[31]++;
      return ResultFactory.error('An unexpected error occurred', ErrorCodes.UNEXPECTED_ERROR);
    }
  }
  /**
   * Validate the get user wallets query
   */
  validateQuery(query) {
    /* istanbul ignore next */
    cov_5bgyb2veb().f[5]++;
    const errors =
    /* istanbul ignore next */
    (cov_5bgyb2veb().s[32]++, []);
    // Validate user ID
    /* istanbul ignore next */
    cov_5bgyb2veb().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_5bgyb2veb().b[6][0]++, !query.userId) ||
    /* istanbul ignore next */
    (cov_5bgyb2veb().b[6][1]++, query.userId.trim().length === 0)) {
      /* istanbul ignore next */
      cov_5bgyb2veb().b[5][0]++;
      cov_5bgyb2veb().s[34]++;
      errors.push({
        field: 'userId',
        message: 'User ID is required',
        code: 'REQUIRED'
      });
    } else
    /* istanbul ignore next */
    {
      cov_5bgyb2veb().b[5][1]++;
    }
    cov_5bgyb2veb().s[35]++;
    return errors.length === 0 ?
    /* istanbul ignore next */
    (cov_5bgyb2veb().b[7][0]++, ValidationResultFactory.success()) :
    /* istanbul ignore next */
    (cov_5bgyb2veb().b[7][1]++, ValidationResultFactory.failure(errors));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,