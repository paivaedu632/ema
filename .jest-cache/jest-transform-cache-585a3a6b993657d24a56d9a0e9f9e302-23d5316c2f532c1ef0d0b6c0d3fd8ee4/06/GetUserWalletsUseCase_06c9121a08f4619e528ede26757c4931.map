{"version":3,"names":["cov_5bgyb2veb","actualCoverage","ResultFactory","ValidationResultFactory","ErrorCodes","Currency","Wallet","GetUserWalletsQueryHandler","constructor","userRepository","walletRepository","f","s","handle","query","validationResult","validateQuery","isValid","b","error","errors","map","e","message","join","INVALID_INPUT","validationErrors","user","findByClerkId","userId","USER_NOT_FOUND","existingWallets","findByUserId","id","existingCurrencies","Set","w","currency","code","supportedCurrencies","getAllSupported","walletsToCreate","has","newWallet","create","push","length","saveMany","allWallets","totalBalanceInEUR","wallet","isEUR","totalBalance","amount","walletData","availableBalance","reservedBalance","lastUpdated","updatedAt","success","wallets","Math","round","console","UNEXPECTED_ERROR","trim","field","failure"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\application\\use-cases\\GetUserWalletsUseCase.ts"],"sourcesContent":["/**\n * Get User Wallets Use Case\n * \n * Retrieves all wallets for a user across all supported currencies.\n * Creates missing wallets if they don't exist.\n */\n\nimport {\n  QueryHandler,\n  Query,\n  Result,\n  SuccessResult,\n  ErrorResult,\n  ResultFactory,\n  ValidationResult,\n  ValidationResultFactory,\n  ErrorCodes\n} from '../common/UseCase'\n\nimport {\n  Money,\n  Currency,\n  UserId,\n  Wallet,\n  UserNotFoundException\n} from '../../domain'\n\nimport {\n  UserRepository,\n  WalletRepository\n} from '../../domain/repositories'\n\n/**\n * Get User Wallets Query\n */\nexport interface GetUserWalletsQuery extends Query {\n  readonly type: 'GET_USER_WALLETS'\n  readonly userId: string\n}\n\n/**\n * User Wallets Result\n */\nexport interface UserWalletsResult extends SuccessResult<{\n  wallets: Array<{\n    currency: string\n    availableBalance: number\n    reservedBalance: number\n    totalBalance: number\n    lastUpdated: Date\n  }>\n  totalBalanceInEUR: number\n}> {}\n\n/**\n * Get User Wallets Query Handler\n */\nexport class GetUserWalletsQueryHandler implements QueryHandler<GetUserWalletsQuery, UserWalletsResult | ErrorResult> {\n  constructor(\n    private readonly userRepository: UserRepository,\n    private readonly walletRepository: WalletRepository\n  ) {}\n\n  async handle(query: GetUserWalletsQuery): Promise<UserWalletsResult | ErrorResult> {\n    try {\n      // 1. Validate input\n      const validationResult = this.validateQuery(query)\n      if (!validationResult.isValid) {\n        return ResultFactory.error(\n          `Validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`,\n          ErrorCodes.INVALID_INPUT,\n          { validationErrors: validationResult.errors }\n        )\n      }\n\n      // 2. Verify user exists using Clerk ID\n      const user = await this.userRepository.findByClerkId(query.userId)\n      if (!user) {\n        return ResultFactory.error(\n          'User not found',\n          ErrorCodes.USER_NOT_FOUND\n        )\n      }\n\n      // 3. Get existing wallets using the user's actual ID\n      const existingWallets = await this.walletRepository.findByUserId(user.id)\n      const existingCurrencies = new Set(existingWallets.map(w => w.currency.code))\n\n      // 5. Create missing wallets for supported currencies\n      const supportedCurrencies = Currency.getAllSupported()\n      const walletsToCreate: Wallet[] = []\n\n      for (const currency of supportedCurrencies) {\n        if (!existingCurrencies.has(currency.code)) {\n          const newWallet = Wallet.create(user.id, currency)\n          walletsToCreate.push(newWallet)\n        }\n      }\n\n      // Save new wallets if any\n      if (walletsToCreate.length > 0) {\n        await this.walletRepository.saveMany(walletsToCreate)\n      }\n\n      // 6. Combine all wallets\n      const allWallets = [...existingWallets, ...walletsToCreate]\n\n      // 7. Calculate total balance in EUR (simplified - would need exchange rates in real implementation)\n      let totalBalanceInEUR = 0\n      for (const wallet of allWallets) {\n        if (wallet.currency.isEUR()) {\n          totalBalanceInEUR += wallet.totalBalance.amount\n        } else {\n          // Simplified conversion - in real implementation, use ExchangeRateService\n          totalBalanceInEUR += wallet.totalBalance.amount / 1200 // Assuming 1 EUR = 1200 AOA\n        }\n      }\n\n      // 8. Format response\n      const walletData = allWallets.map(wallet => ({\n        currency: wallet.currency.code,\n        availableBalance: wallet.availableBalance.amount,\n        reservedBalance: wallet.reservedBalance.amount,\n        totalBalance: wallet.totalBalance.amount,\n        lastUpdated: wallet.updatedAt\n      }))\n\n      return ResultFactory.success({\n        wallets: walletData,\n        totalBalanceInEUR: Math.round(totalBalanceInEUR * 100) / 100 // Round to 2 decimal places\n      })\n\n    } catch (error) {\n      console.error('Unexpected error in GetUserWalletsQueryHandler:', error)\n      return ResultFactory.error(\n        'An unexpected error occurred',\n        ErrorCodes.UNEXPECTED_ERROR\n      )\n    }\n  }\n\n  /**\n   * Validate the get user wallets query\n   */\n  private validateQuery(query: GetUserWalletsQuery): ValidationResult {\n    const errors = []\n\n    // Validate user ID\n    if (!query.userId || query.userId.trim().length === 0) {\n      errors.push({\n        field: 'userId',\n        message: 'User ID is required',\n        code: 'REQUIRED'\n      })\n    }\n\n    return errors.length === 0\n      ? ValidationResultFactory.success()\n      : ValidationResultFactory.failure(errors)\n  }\n}\n"],"mappingsaAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AA7DN;;;;;;AAOA,SAMEE,aAAa,EAEbC,uBAAuB,EACvBC,UAAU,QACL,mBAAmB;AAE1B,SAEEC,QAAQ,EAERC,MAAM,QAED,cAAc;AA6BrB;;;AAGA,OAAM,MAAOC,0BAA0B;EACrCC,YACmBC,cAA8B,EAC9BC,gBAAkC;IAAA;IAAAV,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAY,CAAA;IADlC,KAAAH,cAAc,GAAdA,cAAc;IAAgB;IAAAT,aAAA,GAAAY,CAAA;IAC9B,KAAAF,gBAAgB,GAAhBA,gBAAgB;EAChC;EAEH,MAAMG,MAAMA,CAACC,KAA0B;IAAA;IAAAd,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAY,CAAA;IACrC,IAAI;MACF;MACA,MAAMG,gBAAgB;MAAA;MAAA,CAAAf,aAAA,GAAAY,CAAA,OAAG,IAAI,CAACI,aAAa,CAACF,KAAK,CAAC;MAAA;MAAAd,aAAA,GAAAY,CAAA;MAClD,IAAI,CAACG,gBAAgB,CAACE,OAAO,EAAE;QAAA;QAAAjB,aAAA,GAAAkB,CAAA;QAAAlB,aAAA,GAAAY,CAAA;QAC7B,OAAOV,aAAa,CAACiB,KAAK,CACxB,sBAAsBJ,gBAAgB,CAACK,MAAM,CAACC,GAAG,CAACC,CAAC,IAAI;UAAA;UAAAtB,aAAA,GAAAW,CAAA;UAAAX,aAAA,GAAAY,CAAA;UAAA,OAAAU,CAAC,CAACC,OAAO;QAAP,CAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,EAC9EpB,UAAU,CAACqB,aAAa,EACxB;UAAEC,gBAAgB,EAAEX,gBAAgB,CAACK;QAAM,CAAE,CAC9C;MACH,CAAC;MAAA;MAAA;QAAApB,aAAA,GAAAkB,CAAA;MAAA;MAED;MACA,MAAMS,IAAI;MAAA;MAAA,CAAA3B,aAAA,GAAAY,CAAA,OAAG,MAAM,IAAI,CAACH,cAAc,CAACmB,aAAa,CAACd,KAAK,CAACe,MAAM,CAAC;MAAA;MAAA7B,aAAA,GAAAY,CAAA;MAClE,IAAI,CAACe,IAAI,EAAE;QAAA;QAAA3B,aAAA,GAAAkB,CAAA;QAAAlB,aAAA,GAAAY,CAAA;QACT,OAAOV,aAAa,CAACiB,KAAK,CACxB,gBAAgB,EAChBf,UAAU,CAAC0B,cAAc,CAC1B;MACH,CAAC;MAAA;MAAA;QAAA9B,aAAA,GAAAkB,CAAA;MAAA;MAED;MACA,MAAMa,eAAe;MAAA;MAAA,CAAA/B,aAAA,GAAAY,CAAA,QAAG,MAAM,IAAI,CAACF,gBAAgB,CAACsB,YAAY,CAACL,IAAI,CAACM,EAAE,CAAC;MACzE,MAAMC,kBAAkB;MAAA;MAAA,CAAAlC,aAAA,GAAAY,CAAA,QAAG,IAAIuB,GAAG,CAACJ,eAAe,CAACV,GAAG,CAACe,CAAC,IAAI;QAAA;QAAApC,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAY,CAAA;QAAA,OAAAwB,CAAC,CAACC,QAAQ,CAACC,IAAI;MAAJ,CAAI,CAAC,CAAC;MAE7E;MACA,MAAMC,mBAAmB;MAAA;MAAA,CAAAvC,aAAA,GAAAY,CAAA,QAAGP,QAAQ,CAACmC,eAAe,EAAE;MACtD,MAAMC,eAAe;MAAA;MAAA,CAAAzC,aAAA,GAAAY,CAAA,QAAa,EAAE;MAAA;MAAAZ,aAAA,GAAAY,CAAA;MAEpC,KAAK,MAAMyB,QAAQ,IAAIE,mBAAmB,EAAE;QAAA;QAAAvC,aAAA,GAAAY,CAAA;QAC1C,IAAI,CAACsB,kBAAkB,CAACQ,GAAG,CAACL,QAAQ,CAACC,IAAI,CAAC,EAAE;UAAA;UAAAtC,aAAA,GAAAkB,CAAA;UAC1C,MAAMyB,SAAS;UAAA;UAAA,CAAA3C,aAAA,GAAAY,CAAA,QAAGN,MAAM,CAACsC,MAAM,CAACjB,IAAI,CAACM,EAAE,EAAEI,QAAQ,CAAC;UAAA;UAAArC,aAAA,GAAAY,CAAA;UAClD6B,eAAe,CAACI,IAAI,CAACF,SAAS,CAAC;QACjC,CAAC;QAAA;QAAA;UAAA3C,aAAA,GAAAkB,CAAA;QAAA;MACH;MAEA;MAAA;MAAAlB,aAAA,GAAAY,CAAA;MACA,IAAI6B,eAAe,CAACK,MAAM,GAAG,CAAC,EAAE;QAAA;QAAA9C,aAAA,GAAAkB,CAAA;QAAAlB,aAAA,GAAAY,CAAA;QAC9B,MAAM,IAAI,CAACF,gBAAgB,CAACqC,QAAQ,CAACN,eAAe,CAAC;MACvD,CAAC;MAAA;MAAA;QAAAzC,aAAA,GAAAkB,CAAA;MAAA;MAED;MACA,MAAM8B,UAAU;MAAA;MAAA,CAAAhD,aAAA,GAAAY,CAAA,QAAG,CAAC,GAAGmB,eAAe,EAAE,GAAGU,eAAe,CAAC;MAE3D;MACA,IAAIQ,iBAAiB;MAAA;MAAA,CAAAjD,aAAA,GAAAY,CAAA,QAAG,CAAC;MAAA;MAAAZ,aAAA,GAAAY,CAAA;MACzB,KAAK,MAAMsC,MAAM,IAAIF,UAAU,EAAE;QAAA;QAAAhD,aAAA,GAAAY,CAAA;QAC/B,IAAIsC,MAAM,CAACb,QAAQ,CAACc,KAAK,EAAE,EAAE;UAAA;UAAAnD,aAAA,GAAAkB,CAAA;UAAAlB,aAAA,GAAAY,CAAA;UAC3BqC,iBAAiB,IAAIC,MAAM,CAACE,YAAY,CAACC,MAAM;QACjD,CAAC,MAAM;UAAA;UAAArD,aAAA,GAAAkB,CAAA;UAAAlB,aAAA,GAAAY,CAAA;UACL;UACAqC,iBAAiB,IAAIC,MAAM,CAACE,YAAY,CAACC,MAAM,GAAG,IAAI,EAAC;QACzD;MACF;MAEA;MACA,MAAMC,UAAU;MAAA;MAAA,CAAAtD,aAAA,GAAAY,CAAA,QAAGoC,UAAU,CAAC3B,GAAG,CAAC6B,MAAM,IAAK;QAAA;QAAAlD,aAAA,GAAAW,CAAA;QAAAX,aAAA,GAAAY,CAAA;QAAA;UAC3CyB,QAAQ,EAAEa,MAAM,CAACb,QAAQ,CAACC,IAAI;UAC9BiB,gBAAgB,EAAEL,MAAM,CAACK,gBAAgB,CAACF,MAAM;UAChDG,eAAe,EAAEN,MAAM,CAACM,eAAe,CAACH,MAAM;UAC9CD,YAAY,EAAEF,MAAM,CAACE,YAAY,CAACC,MAAM;UACxCI,WAAW,EAAEP,MAAM,CAACQ;SACrB;OAAC,CAAC;MAAA;MAAA1D,aAAA,GAAAY,CAAA;MAEH,OAAOV,aAAa,CAACyD,OAAO,CAAC;QAC3BC,OAAO,EAAEN,UAAU;QACnBL,iBAAiB,EAAEY,IAAI,CAACC,KAAK,CAACb,iBAAiB,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;OAC9D,CAAC;IAEJ,CAAC,CAAC,OAAO9B,KAAK,EAAE;MAAA;MAAAnB,aAAA,GAAAY,CAAA;MACdmD,OAAO,CAAC5C,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MAAA;MAAAnB,aAAA,GAAAY,CAAA;MACvE,OAAOV,aAAa,CAACiB,KAAK,CACxB,8BAA8B,EAC9Bf,UAAU,CAAC4D,gBAAgB,CAC5B;IACH;EACF;EAEA;;;EAGQhD,aAAaA,CAACF,KAA0B;IAAA;IAAAd,aAAA,GAAAW,CAAA;IAC9C,MAAMS,MAAM;IAAA;IAAA,CAAApB,aAAA,GAAAY,CAAA,QAAG,EAAE;IAEjB;IAAA;IAAAZ,aAAA,GAAAY,CAAA;IACA;IAAI;IAAA,CAAAZ,aAAA,GAAAkB,CAAA,WAACJ,KAAK,CAACe,MAAM;IAAA;IAAA,CAAA7B,aAAA,GAAAkB,CAAA,UAAIJ,KAAK,CAACe,MAAM,CAACoC,IAAI,EAAE,CAACnB,MAAM,KAAK,CAAC,GAAE;MAAA;MAAA9C,aAAA,GAAAkB,CAAA;MAAAlB,aAAA,GAAAY,CAAA;MACrDQ,MAAM,CAACyB,IAAI,CAAC;QACVqB,KAAK,EAAE,QAAQ;QACf3C,OAAO,EAAE,qBAAqB;QAC9Be,IAAI,EAAE;OACP,CAAC;IACJ,CAAC;IAAA;IAAA;MAAAtC,aAAA,GAAAkB,CAAA;IAAA;IAAAlB,aAAA,GAAAY,CAAA;IAED,OAAOQ,MAAM,CAAC0B,MAAM,KAAK,CAAC;IAAA;IAAA,CAAA9C,aAAA,GAAAkB,CAAA,UACtBf,uBAAuB,CAACwD,OAAO,EAAE;IAAA;IAAA,CAAA3D,aAAA,GAAAkB,CAAA,UACjCf,uBAAuB,CAACgE,OAAO,CAAC/C,MAAM,CAAC;EAC7C","ignoreList":[]}