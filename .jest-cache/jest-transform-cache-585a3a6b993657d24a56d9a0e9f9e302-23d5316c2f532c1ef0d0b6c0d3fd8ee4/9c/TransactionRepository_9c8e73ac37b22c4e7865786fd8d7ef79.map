{"version":3,"names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\TransactionRepository.ts"],"sourcesContent":["/**\n * Transaction Repository Interface\n * \n * Defines the contract for transaction data access operations.\n * This interface abstracts the data layer from the domain layer.\n */\n\nimport { Transaction, TransactionSnapshot, TransactionType, TransactionStatus } from '../entities/Transaction'\nimport { TransactionId, UserId } from '../value-objects/EntityId'\nimport { Currency } from '../value-objects/Currency'\nimport { Money } from '../value-objects/Money'\n\nexport interface TransactionSearchCriteria {\n  userId?: UserId\n  type?: TransactionType\n  status?: TransactionStatus\n  currency?: Currency\n  amountRange?: {\n    min: Money\n    max: Money\n  }\n  dateRange?: {\n    start: Date\n    end: Date\n  }\n  recipientId?: UserId\n}\n\nexport interface TransactionRepository {\n  /**\n   * Find transaction by ID\n   */\n  findById(id: TransactionId): Promise<Transaction | null>\n\n  /**\n   * Find transactions by user ID\n   */\n  findByUserId(userId: UserId): Promise<Transaction[]>\n\n  /**\n   * Find transactions by user ID with pagination\n   */\n  findByUserIdWithPagination(\n    userId: UserId,\n    offset: number,\n    limit: number,\n    orderBy?: 'created_at' | 'updated_at' | 'amount',\n    orderDirection?: 'asc' | 'desc'\n  ): Promise<{\n    transactions: Transaction[]\n    total: number\n    hasMore: boolean\n  }>\n\n  /**\n   * Save transaction (create or update)\n   */\n  save(transaction: Transaction): Promise<void>\n\n  /**\n   * Save multiple transactions in a batch\n   */\n  saveMany(transactions: Transaction[]): Promise<void>\n\n  /**\n   * Delete transaction\n   */\n  delete(id: TransactionId): Promise<void>\n\n  /**\n   * Find transactions by criteria\n   */\n  findByCriteria(criteria: TransactionSearchCriteria): Promise<Transaction[]>\n\n  /**\n   * Find transactions by criteria with pagination\n   */\n  findByCriteriaWithPagination(\n    criteria: TransactionSearchCriteria,\n    offset: number,\n    limit: number,\n    orderBy?: 'created_at' | 'updated_at' | 'amount',\n    orderDirection?: 'asc' | 'desc'\n  ): Promise<{\n    transactions: Transaction[]\n    total: number\n    hasMore: boolean\n  }>\n\n  /**\n   * Find transactions by status\n   */\n  findByStatus(status: TransactionStatus): Promise<Transaction[]>\n\n  /**\n   * Find transactions by type\n   */\n  findByType(type: TransactionType): Promise<Transaction[]>\n\n  /**\n   * Find pending transactions older than specified time\n   */\n  findPendingOlderThan(minutes: number): Promise<Transaction[]>\n\n  /**\n   * Get transaction statistics for a user\n   */\n  getUserTransactionStatistics(\n    userId: UserId,\n    dateRange?: { start: Date; end: Date }\n  ): Promise<{\n    totalTransactions: number\n    totalAmountByCurrency: Map<Currency, Money>\n    totalFeesByCurrency: Map<Currency, Money>\n    transactionsByType: Map<TransactionType, number>\n    transactionsByStatus: Map<TransactionStatus, number>\n    averageTransactionAmount: Map<Currency, Money>\n  }>\n\n  /**\n   * Get system-wide transaction statistics\n   */\n  getSystemTransactionStatistics(\n    dateRange?: { start: Date; end: Date }\n  ): Promise<{\n    totalTransactions: number\n    totalVolumeByCurrency: Map<Currency, Money>\n    totalFeesByCurrency: Map<Currency, Money>\n    transactionsByType: Map<TransactionType, number>\n    transactionsByStatus: Map<TransactionStatus, number>\n    uniqueUsers: number\n  }>\n\n  /**\n   * Find transactions between two users\n   */\n  findBetweenUsers(\n    userId1: UserId,\n    userId2: UserId,\n    dateRange?: { start: Date; end: Date }\n  ): Promise<Transaction[]>\n\n  /**\n   * Get daily transaction volume for a date range\n   */\n  getDailyTransactionVolume(\n    startDate: Date,\n    endDate: Date,\n    currency?: Currency\n  ): Promise<Array<{\n    date: Date\n    volume: Money\n    transactionCount: number\n  }>>\n\n  /**\n   * Find transactions that need processing\n   */\n  findTransactionsNeedingProcessing(): Promise<Transaction[]>\n\n  /**\n   * Count transactions by status\n   */\n  countByStatus(status: TransactionStatus): Promise<number>\n\n  /**\n   * Find recent transactions for a user\n   */\n  findRecentByUserId(\n    userId: UserId,\n    limit: number\n  ): Promise<Transaction[]>\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","ignoreList":[]}