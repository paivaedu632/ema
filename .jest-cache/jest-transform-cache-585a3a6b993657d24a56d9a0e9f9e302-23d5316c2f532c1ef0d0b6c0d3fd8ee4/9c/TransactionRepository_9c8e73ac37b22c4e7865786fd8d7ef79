0cc8bc07e121bcc57b2b1b6aee939975
/* istanbul ignore next */
function cov_2b1xlbltkt() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\TransactionRepository.ts";
  var hash = "40dfa87fee395c8d90aa16f661adfb51e68bc2e7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\TransactionRepository.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\TransactionRepository.ts",
      mappings: "AAAA;;;;;GAKG",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\TransactionRepository.ts"],
      sourcesContent: ["/**\n * Transaction Repository Interface\n * \n * Defines the contract for transaction data access operations.\n * This interface abstracts the data layer from the domain layer.\n */\n\nimport { Transaction, TransactionSnapshot, TransactionType, TransactionStatus } from '../entities/Transaction'\nimport { TransactionId, UserId } from '../value-objects/EntityId'\nimport { Currency } from '../value-objects/Currency'\nimport { Money } from '../value-objects/Money'\n\nexport interface TransactionSearchCriteria {\n  userId?: UserId\n  type?: TransactionType\n  status?: TransactionStatus\n  currency?: Currency\n  amountRange?: {\n    min: Money\n    max: Money\n  }\n  dateRange?: {\n    start: Date\n    end: Date\n  }\n  recipientId?: UserId\n}\n\nexport interface TransactionRepository {\n  /**\n   * Find transaction by ID\n   */\n  findById(id: TransactionId): Promise<Transaction | null>\n\n  /**\n   * Find transactions by user ID\n   */\n  findByUserId(userId: UserId): Promise<Transaction[]>\n\n  /**\n   * Find transactions by user ID with pagination\n   */\n  findByUserIdWithPagination(\n    userId: UserId,\n    offset: number,\n    limit: number,\n    orderBy?: 'created_at' | 'updated_at' | 'amount',\n    orderDirection?: 'asc' | 'desc'\n  ): Promise<{\n    transactions: Transaction[]\n    total: number\n    hasMore: boolean\n  }>\n\n  /**\n   * Save transaction (create or update)\n   */\n  save(transaction: Transaction): Promise<void>\n\n  /**\n   * Save multiple transactions in a batch\n   */\n  saveMany(transactions: Transaction[]): Promise<void>\n\n  /**\n   * Delete transaction\n   */\n  delete(id: TransactionId): Promise<void>\n\n  /**\n   * Find transactions by criteria\n   */\n  findByCriteria(criteria: TransactionSearchCriteria): Promise<Transaction[]>\n\n  /**\n   * Find transactions by criteria with pagination\n   */\n  findByCriteriaWithPagination(\n    criteria: TransactionSearchCriteria,\n    offset: number,\n    limit: number,\n    orderBy?: 'created_at' | 'updated_at' | 'amount',\n    orderDirection?: 'asc' | 'desc'\n  ): Promise<{\n    transactions: Transaction[]\n    total: number\n    hasMore: boolean\n  }>\n\n  /**\n   * Find transactions by status\n   */\n  findByStatus(status: TransactionStatus): Promise<Transaction[]>\n\n  /**\n   * Find transactions by type\n   */\n  findByType(type: TransactionType): Promise<Transaction[]>\n\n  /**\n   * Find pending transactions older than specified time\n   */\n  findPendingOlderThan(minutes: number): Promise<Transaction[]>\n\n  /**\n   * Get transaction statistics for a user\n   */\n  getUserTransactionStatistics(\n    userId: UserId,\n    dateRange?: { start: Date; end: Date }\n  ): Promise<{\n    totalTransactions: number\n    totalAmountByCurrency: Map<Currency, Money>\n    totalFeesByCurrency: Map<Currency, Money>\n    transactionsByType: Map<TransactionType, number>\n    transactionsByStatus: Map<TransactionStatus, number>\n    averageTransactionAmount: Map<Currency, Money>\n  }>\n\n  /**\n   * Get system-wide transaction statistics\n   */\n  getSystemTransactionStatistics(\n    dateRange?: { start: Date; end: Date }\n  ): Promise<{\n    totalTransactions: number\n    totalVolumeByCurrency: Map<Currency, Money>\n    totalFeesByCurrency: Map<Currency, Money>\n    transactionsByType: Map<TransactionType, number>\n    transactionsByStatus: Map<TransactionStatus, number>\n    uniqueUsers: number\n  }>\n\n  /**\n   * Find transactions between two users\n   */\n  findBetweenUsers(\n    userId1: UserId,\n    userId2: UserId,\n    dateRange?: { start: Date; end: Date }\n  ): Promise<Transaction[]>\n\n  /**\n   * Get daily transaction volume for a date range\n   */\n  getDailyTransactionVolume(\n    startDate: Date,\n    endDate: Date,\n    currency?: Currency\n  ): Promise<Array<{\n    date: Date\n    volume: Money\n    transactionCount: number\n  }>>\n\n  /**\n   * Find transactions that need processing\n   */\n  findTransactionsNeedingProcessing(): Promise<Transaction[]>\n\n  /**\n   * Count transactions by status\n   */\n  countByStatus(status: TransactionStatus): Promise<number>\n\n  /**\n   * Find recent transactions for a user\n   */\n  findRecentByUserId(\n    userId: UserId,\n    limit: number\n  ): Promise<Transaction[]>\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "40dfa87fee395c8d90aa16f661adfb51e68bc2e7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2b1xlbltkt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2b1xlbltkt();
/**
 * Transaction Repository Interface
 *
 * Defines the contract for transaction data access operations.
 * This interface abstracts the data layer from the domain layer.
 */
export {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVc2VyXFxEb2N1bWVudHNcXEdpdEh1YlxcZW1hXFxzcmNcXGRvbWFpblxccmVwb3NpdG9yaWVzXFxUcmFuc2FjdGlvblJlcG9zaXRvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUcmFuc2FjdGlvbiBSZXBvc2l0b3J5IEludGVyZmFjZVxuICogXG4gKiBEZWZpbmVzIHRoZSBjb250cmFjdCBmb3IgdHJhbnNhY3Rpb24gZGF0YSBhY2Nlc3Mgb3BlcmF0aW9ucy5cbiAqIFRoaXMgaW50ZXJmYWNlIGFic3RyYWN0cyB0aGUgZGF0YSBsYXllciBmcm9tIHRoZSBkb21haW4gbGF5ZXIuXG4gKi9cblxuaW1wb3J0IHsgVHJhbnNhY3Rpb24sIFRyYW5zYWN0aW9uU25hcHNob3QsIFRyYW5zYWN0aW9uVHlwZSwgVHJhbnNhY3Rpb25TdGF0dXMgfSBmcm9tICcuLi9lbnRpdGllcy9UcmFuc2FjdGlvbidcbmltcG9ydCB7IFRyYW5zYWN0aW9uSWQsIFVzZXJJZCB9IGZyb20gJy4uL3ZhbHVlLW9iamVjdHMvRW50aXR5SWQnXG5pbXBvcnQgeyBDdXJyZW5jeSB9IGZyb20gJy4uL3ZhbHVlLW9iamVjdHMvQ3VycmVuY3knXG5pbXBvcnQgeyBNb25leSB9IGZyb20gJy4uL3ZhbHVlLW9iamVjdHMvTW9uZXknXG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25TZWFyY2hDcml0ZXJpYSB7XG4gIHVzZXJJZD86IFVzZXJJZFxuICB0eXBlPzogVHJhbnNhY3Rpb25UeXBlXG4gIHN0YXR1cz86IFRyYW5zYWN0aW9uU3RhdHVzXG4gIGN1cnJlbmN5PzogQ3VycmVuY3lcbiAgYW1vdW50UmFuZ2U/OiB7XG4gICAgbWluOiBNb25leVxuICAgIG1heDogTW9uZXlcbiAgfVxuICBkYXRlUmFuZ2U/OiB7XG4gICAgc3RhcnQ6IERhdGVcbiAgICBlbmQ6IERhdGVcbiAgfVxuICByZWNpcGllbnRJZD86IFVzZXJJZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zYWN0aW9uUmVwb3NpdG9yeSB7XG4gIC8qKlxuICAgKiBGaW5kIHRyYW5zYWN0aW9uIGJ5IElEXG4gICAqL1xuICBmaW5kQnlJZChpZDogVHJhbnNhY3Rpb25JZCk6IFByb21pc2U8VHJhbnNhY3Rpb24gfCBudWxsPlxuXG4gIC8qKlxuICAgKiBGaW5kIHRyYW5zYWN0aW9ucyBieSB1c2VyIElEXG4gICAqL1xuICBmaW5kQnlVc2VySWQodXNlcklkOiBVc2VySWQpOiBQcm9taXNlPFRyYW5zYWN0aW9uW10+XG5cbiAgLyoqXG4gICAqIEZpbmQgdHJhbnNhY3Rpb25zIGJ5IHVzZXIgSUQgd2l0aCBwYWdpbmF0aW9uXG4gICAqL1xuICBmaW5kQnlVc2VySWRXaXRoUGFnaW5hdGlvbihcbiAgICB1c2VySWQ6IFVzZXJJZCxcbiAgICBvZmZzZXQ6IG51bWJlcixcbiAgICBsaW1pdDogbnVtYmVyLFxuICAgIG9yZGVyQnk/OiAnY3JlYXRlZF9hdCcgfCAndXBkYXRlZF9hdCcgfCAnYW1vdW50JyxcbiAgICBvcmRlckRpcmVjdGlvbj86ICdhc2MnIHwgJ2Rlc2MnXG4gICk6IFByb21pc2U8e1xuICAgIHRyYW5zYWN0aW9uczogVHJhbnNhY3Rpb25bXVxuICAgIHRvdGFsOiBudW1iZXJcbiAgICBoYXNNb3JlOiBib29sZWFuXG4gIH0+XG5cbiAgLyoqXG4gICAqIFNhdmUgdHJhbnNhY3Rpb24gKGNyZWF0ZSBvciB1cGRhdGUpXG4gICAqL1xuICBzYXZlKHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbik6IFByb21pc2U8dm9pZD5cblxuICAvKipcbiAgICogU2F2ZSBtdWx0aXBsZSB0cmFuc2FjdGlvbnMgaW4gYSBiYXRjaFxuICAgKi9cbiAgc2F2ZU1hbnkodHJhbnNhY3Rpb25zOiBUcmFuc2FjdGlvbltdKTogUHJvbWlzZTx2b2lkPlxuXG4gIC8qKlxuICAgKiBEZWxldGUgdHJhbnNhY3Rpb25cbiAgICovXG4gIGRlbGV0ZShpZDogVHJhbnNhY3Rpb25JZCk6IFByb21pc2U8dm9pZD5cblxuICAvKipcbiAgICogRmluZCB0cmFuc2FjdGlvbnMgYnkgY3JpdGVyaWFcbiAgICovXG4gIGZpbmRCeUNyaXRlcmlhKGNyaXRlcmlhOiBUcmFuc2FjdGlvblNlYXJjaENyaXRlcmlhKTogUHJvbWlzZTxUcmFuc2FjdGlvbltdPlxuXG4gIC8qKlxuICAgKiBGaW5kIHRyYW5zYWN0aW9ucyBieSBjcml0ZXJpYSB3aXRoIHBhZ2luYXRpb25cbiAgICovXG4gIGZpbmRCeUNyaXRlcmlhV2l0aFBhZ2luYXRpb24oXG4gICAgY3JpdGVyaWE6IFRyYW5zYWN0aW9uU2VhcmNoQ3JpdGVyaWEsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgbGltaXQ6IG51bWJlcixcbiAgICBvcmRlckJ5PzogJ2NyZWF0ZWRfYXQnIHwgJ3VwZGF0ZWRfYXQnIHwgJ2Ftb3VudCcsXG4gICAgb3JkZXJEaXJlY3Rpb24/OiAnYXNjJyB8ICdkZXNjJ1xuICApOiBQcm9taXNlPHtcbiAgICB0cmFuc2FjdGlvbnM6IFRyYW5zYWN0aW9uW11cbiAgICB0b3RhbDogbnVtYmVyXG4gICAgaGFzTW9yZTogYm9vbGVhblxuICB9PlxuXG4gIC8qKlxuICAgKiBGaW5kIHRyYW5zYWN0aW9ucyBieSBzdGF0dXNcbiAgICovXG4gIGZpbmRCeVN0YXR1cyhzdGF0dXM6IFRyYW5zYWN0aW9uU3RhdHVzKTogUHJvbWlzZTxUcmFuc2FjdGlvbltdPlxuXG4gIC8qKlxuICAgKiBGaW5kIHRyYW5zYWN0aW9ucyBieSB0eXBlXG4gICAqL1xuICBmaW5kQnlUeXBlKHR5cGU6IFRyYW5zYWN0aW9uVHlwZSk6IFByb21pc2U8VHJhbnNhY3Rpb25bXT5cblxuICAvKipcbiAgICogRmluZCBwZW5kaW5nIHRyYW5zYWN0aW9ucyBvbGRlciB0aGFuIHNwZWNpZmllZCB0aW1lXG4gICAqL1xuICBmaW5kUGVuZGluZ09sZGVyVGhhbihtaW51dGVzOiBudW1iZXIpOiBQcm9taXNlPFRyYW5zYWN0aW9uW10+XG5cbiAgLyoqXG4gICAqIEdldCB0cmFuc2FjdGlvbiBzdGF0aXN0aWNzIGZvciBhIHVzZXJcbiAgICovXG4gIGdldFVzZXJUcmFuc2FjdGlvblN0YXRpc3RpY3MoXG4gICAgdXNlcklkOiBVc2VySWQsXG4gICAgZGF0ZVJhbmdlPzogeyBzdGFydDogRGF0ZTsgZW5kOiBEYXRlIH1cbiAgKTogUHJvbWlzZTx7XG4gICAgdG90YWxUcmFuc2FjdGlvbnM6IG51bWJlclxuICAgIHRvdGFsQW1vdW50QnlDdXJyZW5jeTogTWFwPEN1cnJlbmN5LCBNb25leT5cbiAgICB0b3RhbEZlZXNCeUN1cnJlbmN5OiBNYXA8Q3VycmVuY3ksIE1vbmV5PlxuICAgIHRyYW5zYWN0aW9uc0J5VHlwZTogTWFwPFRyYW5zYWN0aW9uVHlwZSwgbnVtYmVyPlxuICAgIHRyYW5zYWN0aW9uc0J5U3RhdHVzOiBNYXA8VHJhbnNhY3Rpb25TdGF0dXMsIG51bWJlcj5cbiAgICBhdmVyYWdlVHJhbnNhY3Rpb25BbW91bnQ6IE1hcDxDdXJyZW5jeSwgTW9uZXk+XG4gIH0+XG5cbiAgLyoqXG4gICAqIEdldCBzeXN0ZW0td2lkZSB0cmFuc2FjdGlvbiBzdGF0aXN0aWNzXG4gICAqL1xuICBnZXRTeXN0ZW1UcmFuc2FjdGlvblN0YXRpc3RpY3MoXG4gICAgZGF0ZVJhbmdlPzogeyBzdGFydDogRGF0ZTsgZW5kOiBEYXRlIH1cbiAgKTogUHJvbWlzZTx7XG4gICAgdG90YWxUcmFuc2FjdGlvbnM6IG51bWJlclxuICAgIHRvdGFsVm9sdW1lQnlDdXJyZW5jeTogTWFwPEN1cnJlbmN5LCBNb25leT5cbiAgICB0b3RhbEZlZXNCeUN1cnJlbmN5OiBNYXA8Q3VycmVuY3ksIE1vbmV5PlxuICAgIHRyYW5zYWN0aW9uc0J5VHlwZTogTWFwPFRyYW5zYWN0aW9uVHlwZSwgbnVtYmVyPlxuICAgIHRyYW5zYWN0aW9uc0J5U3RhdHVzOiBNYXA8VHJhbnNhY3Rpb25TdGF0dXMsIG51bWJlcj5cbiAgICB1bmlxdWVVc2VyczogbnVtYmVyXG4gIH0+XG5cbiAgLyoqXG4gICAqIEZpbmQgdHJhbnNhY3Rpb25zIGJldHdlZW4gdHdvIHVzZXJzXG4gICAqL1xuICBmaW5kQmV0d2VlblVzZXJzKFxuICAgIHVzZXJJZDE6IFVzZXJJZCxcbiAgICB1c2VySWQyOiBVc2VySWQsXG4gICAgZGF0ZVJhbmdlPzogeyBzdGFydDogRGF0ZTsgZW5kOiBEYXRlIH1cbiAgKTogUHJvbWlzZTxUcmFuc2FjdGlvbltdPlxuXG4gIC8qKlxuICAgKiBHZXQgZGFpbHkgdHJhbnNhY3Rpb24gdm9sdW1lIGZvciBhIGRhdGUgcmFuZ2VcbiAgICovXG4gIGdldERhaWx5VHJhbnNhY3Rpb25Wb2x1bWUoXG4gICAgc3RhcnREYXRlOiBEYXRlLFxuICAgIGVuZERhdGU6IERhdGUsXG4gICAgY3VycmVuY3k/OiBDdXJyZW5jeVxuICApOiBQcm9taXNlPEFycmF5PHtcbiAgICBkYXRlOiBEYXRlXG4gICAgdm9sdW1lOiBNb25leVxuICAgIHRyYW5zYWN0aW9uQ291bnQ6IG51bWJlclxuICB9Pj5cblxuICAvKipcbiAgICogRmluZCB0cmFuc2FjdGlvbnMgdGhhdCBuZWVkIHByb2Nlc3NpbmdcbiAgICovXG4gIGZpbmRUcmFuc2FjdGlvbnNOZWVkaW5nUHJvY2Vzc2luZygpOiBQcm9taXNlPFRyYW5zYWN0aW9uW10+XG5cbiAgLyoqXG4gICAqIENvdW50IHRyYW5zYWN0aW9ucyBieSBzdGF0dXNcbiAgICovXG4gIGNvdW50QnlTdGF0dXMoc3RhdHVzOiBUcmFuc2FjdGlvblN0YXR1cyk6IFByb21pc2U8bnVtYmVyPlxuXG4gIC8qKlxuICAgKiBGaW5kIHJlY2VudCB0cmFuc2FjdGlvbnMgZm9yIGEgdXNlclxuICAgKi9cbiAgZmluZFJlY2VudEJ5VXNlcklkKFxuICAgIHVzZXJJZDogVXNlcklkLFxuICAgIGxpbWl0OiBudW1iZXJcbiAgKTogUHJvbWlzZTxUcmFuc2FjdGlvbltdPlxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSIsImlnbm9yZUxpc3QiOltdfQ==