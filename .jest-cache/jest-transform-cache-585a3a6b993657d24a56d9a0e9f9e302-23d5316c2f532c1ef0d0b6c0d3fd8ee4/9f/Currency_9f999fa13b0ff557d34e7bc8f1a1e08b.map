{"version":3,"names":["cov_eznayyvrd","actualCoverage","SUPPORTED_CURRENCIES","s","EUR","code","name","symbol","decimalPlaces","AOA","Currency","constructor","f","_code","_info","fromCode","upperCode","toUpperCase","isSupported","b","Error","getSupportedCodes","join","Object","keys","includes","getAllSupported","map","equals","other","isEUR","isAOA","getOpposite","formatAmount","amount","toFixed","formatAmountForInput","parseAmount","input","cleanInput","replace","trim","parseFloat","isNaN","validateAmountPrecision","factor","Math","pow","round","roundAmount","toString","toJSON"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\value-objects\\Currency.ts"],"sourcesContent":["/**\n * Currency Value Object\n * \n * Represents a currency with validation and formatting capabilities.\n * Follows the Value Object pattern - immutable and equality by value.\n */\n\nexport type CurrencyCode = 'EUR' | 'AOA'\n\ninterface CurrencyInfo {\n  code: CurrencyCode\n  name: string\n  symbol: string\n  decimalPlaces: number\n}\n\nconst SUPPORTED_CURRENCIES: Record<CurrencyCode, CurrencyInfo> = {\n  EUR: {\n    code: 'EUR',\n    name: 'Euro',\n    symbol: 'â‚¬',\n    decimalPlaces: 2\n  },\n  AOA: {\n    code: 'AOA',\n    name: 'Kwanza Angolano',\n    symbol: 'Kz',\n    decimalPlaces: 2\n  }\n} as const\n\nexport class Currency {\n  private readonly _code: CurrencyCode\n  private readonly _info: CurrencyInfo\n\n  private constructor(code: CurrencyCode) {\n    this._code = code\n    this._info = SUPPORTED_CURRENCIES[code]\n  }\n\n  /**\n   * Create Currency from currency code\n   */\n  static fromCode(code: string): Currency {\n    const upperCode = code.toUpperCase() as CurrencyCode\n    \n    if (!this.isSupported(upperCode)) {\n      throw new Error(`Unsupported currency: ${code}. Supported currencies: ${this.getSupportedCodes().join(', ')}`)\n    }\n    \n    return new Currency(upperCode)\n  }\n\n  /**\n   * Create EUR currency\n   */\n  static EUR(): Currency {\n    return new Currency('EUR')\n  }\n\n  /**\n   * Create AOA currency\n   */\n  static AOA(): Currency {\n    return new Currency('AOA')\n  }\n\n  /**\n   * Check if currency code is supported\n   */\n  static isSupported(code: string): code is CurrencyCode {\n    return Object.keys(SUPPORTED_CURRENCIES).includes(code.toUpperCase())\n  }\n\n  /**\n   * Get all supported currency codes\n   */\n  static getSupportedCodes(): CurrencyCode[] {\n    return Object.keys(SUPPORTED_CURRENCIES) as CurrencyCode[]\n  }\n\n  /**\n   * Get all supported currencies\n   */\n  static getAllSupported(): Currency[] {\n    return this.getSupportedCodes().map(code => new Currency(code))\n  }\n\n  /**\n   * Get currency code\n   */\n  get code(): CurrencyCode {\n    return this._code\n  }\n\n  /**\n   * Get currency name\n   */\n  get name(): string {\n    return this._info.name\n  }\n\n  /**\n   * Get currency symbol\n   */\n  get symbol(): string {\n    return this._info.symbol\n  }\n\n  /**\n   * Get number of decimal places\n   */\n  get decimalPlaces(): number {\n    return this._info.decimalPlaces\n  }\n\n  /**\n   * Check if this currency equals another\n   */\n  equals(other: Currency): boolean {\n    return this._code === other._code\n  }\n\n  /**\n   * Check if this is EUR\n   */\n  isEUR(): boolean {\n    return this._code === 'EUR'\n  }\n\n  /**\n   * Check if this is AOA\n   */\n  isAOA(): boolean {\n    return this._code === 'AOA'\n  }\n\n  /**\n   * Get the opposite currency (EUR <-> AOA)\n   */\n  getOpposite(): Currency {\n    return this.isEUR() ? Currency.AOA() : Currency.EUR()\n  }\n\n  /**\n   * Format amount with currency symbol\n   */\n  formatAmount(amount: number): string {\n    return `${this._info.symbol}${amount.toFixed(this._info.decimalPlaces)}`\n  }\n\n  /**\n   * Format amount for input (without symbol)\n   */\n  formatAmountForInput(amount: number): string {\n    return amount.toFixed(this._info.decimalPlaces)\n  }\n\n  /**\n   * Parse amount from string input\n   */\n  parseAmount(input: string): number {\n    // Remove currency symbol and whitespace\n    const cleanInput = input.replace(this._info.symbol, '').trim()\n    const amount = parseFloat(cleanInput)\n    \n    if (isNaN(amount)) {\n      throw new Error(`Invalid amount format: ${input}`)\n    }\n    \n    return amount\n  }\n\n  /**\n   * Validate amount precision for this currency\n   */\n  validateAmountPrecision(amount: number): boolean {\n    const factor = Math.pow(10, this._info.decimalPlaces)\n    return Math.round(amount * factor) === amount * factor\n  }\n\n  /**\n   * Round amount to currency precision\n   */\n  roundAmount(amount: number): number {\n    const factor = Math.pow(10, this._info.decimalPlaces)\n    return Math.round(amount * factor) / factor\n  }\n\n  /**\n   * Convert to string representation\n   */\n  toString(): string {\n    return this._code\n  }\n\n  /**\n   * Convert to JSON representation\n   */\n  toJSON(): string {\n    return this._code\n  }\n}\n\n// Export commonly used currencies as constants\nexport const EUR = Currency.EUR()\nexport const AOA = Currency.AOA()\n\n// Export type for external use\nexport type { CurrencyCode }\n"],"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","ignoreList":[]}