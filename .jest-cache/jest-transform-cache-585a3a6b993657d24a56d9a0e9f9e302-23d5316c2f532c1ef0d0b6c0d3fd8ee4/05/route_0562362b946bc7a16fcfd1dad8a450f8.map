{"version":3,"names":["cov_ks04goaoc","actualCoverage","withAuth","createSuccessResponse","ErrorResponses","withErrorHandling","withCors","validateRequestBody","transferSendSchema","sendP2PTransfer","transferSendHandler","request","user","f","validation","s","success","b","validationError","error","recipientId","amount","currency","pin","description","data","result","Object","assign","sender_id","userId","recipient_identifier","_a","includes","insufficientBalance","_b","invalidPin","_c","userNotFound","transferFailed","transferData","responseData","transferId","reference_id","id","senderId","status","timestamp","Date","toISOString","transactionDetails","POST"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\app\\api\\v1\\transfers\\send\\route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { withAuth, AuthenticatedUser } from '@/lib/auth/middleware';\nimport { createSuccessResponse, ErrorResponses, withErrorHandling } from '@/lib/api/responses';\nimport { withCors } from '@/lib/api/cors';\nimport { validateRequestBody } from '@/lib/validation/helpers';\nimport { transferSendSchema } from '@/lib/validation/schemas';\nimport { sendP2PTransfer } from '@/lib/database/functions';\n\nasync function transferSendHandler(request: NextRequest, user: AuthenticatedUser) {\n  // Validate request body\n  const validation = await validateRequestBody(request, transferSendSchema);\n  if (!validation.success) {\n    return ErrorResponses.validationError(validation.error!);\n  }\n\n  const { recipientId, amount, currency, pin, description } = validation.data!;\n\n  // Send P2P transfer\n  const result = await sendP2PTransfer({\n    sender_id: user.userId,\n    recipient_identifier: recipientId,\n    currency,\n    amount,\n    pin,\n    ...(description && { description })\n  });\n\n  if (!result.success) {\n    // Handle specific error cases\n    if (result.error?.includes('insufficient')) {\n      return ErrorResponses.insufficientBalance(result.error);\n    }\n    if (result.error?.includes('PIN')) {\n      return ErrorResponses.invalidPin(result.error);\n    }\n    if (result.error?.includes('not found')) {\n      return ErrorResponses.userNotFound('Recipient not found');\n    }\n\n    return ErrorResponses.transferFailed(result.error);\n  }\n\n  const transferData = result.data as { reference_id?: string; id?: string; status?: string } | undefined;\n\n  const responseData = {\n    transferId: transferData?.reference_id || transferData?.id,\n    senderId: user.userId,\n    recipientId,\n    amount,\n    currency,\n    description,\n    status: transferData?.status || 'completed',\n    timestamp: new Date().toISOString(),\n    transactionDetails: transferData\n  };\n\n  return createSuccessResponse(responseData, 'Transfer completed successfully');\n}\n\nexport const POST = withCors(withErrorHandling(withAuth(transferSendHandler)));\n"],"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","ignoreList":[]}