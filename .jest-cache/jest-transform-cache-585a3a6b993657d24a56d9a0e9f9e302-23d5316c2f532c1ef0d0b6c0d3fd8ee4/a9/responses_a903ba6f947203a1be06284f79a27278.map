{"version":3,"names":["cov_1q9zfy4s99","actualCoverage","NextResponse","ErrorCodes","s","AUTH_REQUIRED","INVALID_TOKEN","VALIDATION_ERROR","INVALID_INPUT","INSUFFICIENT_BALANCE","USER_NOT_FOUND","INVALID_PIN","TRANSFER_FAILED","ORDER_FAILED","DATABASE_ERROR","INTERNAL_ERROR","SERVICE_UNAVAILABLE","createSuccessResponse","data","message","status","b","f","response","Object","assign","success","json","createErrorResponse","error","code","details","console","ErrorResponses","authRequired","invalidToken","validationError","invalidInput","insufficientBalance","userNotFound","invalidPin","transferFailed","orderFailed","databaseError","internalError","serviceUnavailable","notFound","methodNotAllowed","handleApiError","Error","includes","process","env","NODE_ENV","undefined","withErrorHandling","handler","args"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\api\\responses.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// Standard response interfaces\nexport interface ApiSuccessResponse<T = unknown> {\n  success: true;\n  data: T;\n  message?: string;\n}\n\nexport interface ApiErrorResponse {\n  success: false;\n  error: string;\n  code?: string;\n  details?: unknown;\n}\n\nexport type ApiResponse<T = unknown> = ApiSuccessResponse<T> | ApiErrorResponse;\n\n// Error codes\nexport const ErrorCodes = {\n  // Authentication errors\n  AUTH_REQUIRED: 'AUTH_REQUIRED',\n  INVALID_TOKEN: 'INVALID_TOKEN',\n  \n  // Validation errors\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  INVALID_INPUT: 'INVALID_INPUT',\n  \n  // Business logic errors\n  INSUFFICIENT_BALANCE: 'INSUFFICIENT_BALANCE',\n  USER_NOT_FOUND: 'USER_NOT_FOUND',\n  INVALID_PIN: 'INVALID_PIN',\n  TRANSFER_FAILED: 'TRANSFER_FAILED',\n  ORDER_FAILED: 'ORDER_FAILED',\n  \n  // System errors\n  DATABASE_ERROR: 'DATABASE_ERROR',\n  INTERNAL_ERROR: 'INTERNAL_ERROR',\n  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE'\n} as const;\n\n/**\n * Create a successful API response\n */\nexport function createSuccessResponse<T>(\n  data: T,\n  message?: string,\n  status: number = 200\n): NextResponse {\n  const response: ApiSuccessResponse<T> = {\n    success: true,\n    data,\n    ...(message && { message })\n  };\n\n  return NextResponse.json(response, { status });\n}\n\n/**\n * Create an error API response\n */\nexport function createErrorResponse(\n  error: string,\n  code?: string,\n  status: number = 400,\n  details?: unknown\n): NextResponse {\n  const response: ApiErrorResponse = {\n    success: false,\n    error,\n    ...(code && { code }),\n    ...(details ? { details } : {})\n  };\n\n  // Log error for debugging (but don't expose sensitive details)\n  console.error('API Error:', { error, code, status, details });\n\n  return NextResponse.json(response, { status });\n}\n\n/**\n * Create specific error responses\n */\nexport const ErrorResponses = {\n  authRequired: (message = 'Authentication required') =>\n    createErrorResponse(message, ErrorCodes.AUTH_REQUIRED, 401),\n\n  invalidToken: (message = 'Invalid authentication token') =>\n    createErrorResponse(message, ErrorCodes.INVALID_TOKEN, 401),\n\n  validationError: (message: string, details?: unknown) =>\n    createErrorResponse(message, ErrorCodes.VALIDATION_ERROR, 400, details),\n\n  invalidInput: (message: string) =>\n    createErrorResponse(message, ErrorCodes.INVALID_INPUT, 400),\n\n  insufficientBalance: (message = 'Insufficient balance') =>\n    createErrorResponse(message, ErrorCodes.INSUFFICIENT_BALANCE, 400),\n\n  userNotFound: (message = 'User not found') =>\n    createErrorResponse(message, ErrorCodes.USER_NOT_FOUND, 404),\n\n  invalidPin: (message = 'Invalid PIN') =>\n    createErrorResponse(message, ErrorCodes.INVALID_PIN, 400),\n\n  transferFailed: (message = 'Transfer failed') =>\n    createErrorResponse(message, ErrorCodes.TRANSFER_FAILED, 400),\n\n  orderFailed: (message = 'Order failed') =>\n    createErrorResponse(message, ErrorCodes.ORDER_FAILED, 400),\n\n  databaseError: (message = 'Database operation failed') =>\n    createErrorResponse(message, ErrorCodes.DATABASE_ERROR, 500),\n\n  internalError: (message = 'Internal server error') =>\n    createErrorResponse(message, ErrorCodes.INTERNAL_ERROR, 500),\n\n  serviceUnavailable: (message = 'Service temporarily unavailable') =>\n    createErrorResponse(message, ErrorCodes.SERVICE_UNAVAILABLE, 503),\n\n  notFound: (message = 'Resource not found') =>\n    createErrorResponse(message, 'NOT_FOUND', 404),\n\n  methodNotAllowed: (message = 'Method not allowed') =>\n    createErrorResponse(message, 'METHOD_NOT_ALLOWED', 405)\n};\n\n/**\n * Global error handler for API routes\n */\nexport function handleApiError(error: unknown): NextResponse {\n  console.error('Unhandled API error:', error);\n\n  // Handle known error types\n  if (error instanceof Error) {\n    // Check for specific error patterns\n    if (error.message.includes('authentication')) {\n      return ErrorResponses.authRequired();\n    }\n    \n    if (error.message.includes('validation')) {\n      return ErrorResponses.validationError(error.message);\n    }\n    \n    if (error.message.includes('database')) {\n      return ErrorResponses.databaseError();\n    }\n\n    // Generic error with message\n    return ErrorResponses.internalError(\n      process.env.NODE_ENV === 'development' ? error.message : undefined\n    );\n  }\n\n  // Unknown error type\n  return ErrorResponses.internalError();\n}\n\n/**\n * Wrapper for API route handlers with error handling\n */\nexport function withErrorHandling<T extends unknown[]>(\n  handler: (...args: T) => Promise<NextResponse>\n) {\n  return async (...args: T): Promise<NextResponse> => {\n    try {\n      return await handler(...args);\n    } catch (error) {\n      return handleApiError(error);\n    }\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}