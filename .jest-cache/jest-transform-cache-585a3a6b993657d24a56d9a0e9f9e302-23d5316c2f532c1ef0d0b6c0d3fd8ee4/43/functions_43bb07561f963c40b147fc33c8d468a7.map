{"version":3,"names":["cov_1w90bdhwpi","actualCoverage","createServerSupabaseClient","executeFunction","functionName","params","b","f","s","supabase","data","error","rpc","console","success","message","createUser","findUserForTransfer","getWalletBalance","sendP2PTransfer","getTransferHistory","placeLimitOrder","executeMarketOrder","getUserOrderHistory","getMarketSummary","getOrderBookDepth","setUserPin","verifyUserPin","checkDatabaseHealth","from","select","limit","status","timestamp","Date","toISOString","_a"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\database\\functions.ts"],"sourcesContent":["import { createServerSupabaseClient } from '@/lib/supabase/server';\n\nexport interface DatabaseResult<T = unknown> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\n/**\n * Execute a Supabase database function with error handling\n */\nasync function executeFunction<T>(\n  functionName: string,\n  params: Record<string, unknown> = {}\n): Promise<DatabaseResult<T>> {\n  try {\n    const supabase = createServerSupabaseClient();\n    \n    const { data, error } = await supabase.rpc(functionName, params);\n\n    if (error) {\n      console.error(`Database function ${functionName} error:`, error);\n      return {\n        success: false,\n        error: error.message || 'Database operation failed'\n      };\n    }\n\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    console.error(`Database function ${functionName} exception:`, error);\n    return {\n      success: false,\n      error: 'Database connection failed'\n    };\n  }\n}\n\n// User functions\nexport async function createUser(params: {\n  clerk_user_id: string;\n  email: string;\n  first_name?: string;\n  last_name?: string;\n}) {\n  return executeFunction('create_user', params);\n}\n\nexport async function findUserForTransfer(params: {\n  search_query: string;\n  search_type: 'email' | 'phone' | 'name';\n}) {\n  return executeFunction('find_user_for_transfer', params);\n}\n\n// Wallet functions\nexport async function getWalletBalance(params: {\n  user_id: string;\n  currency?: string;\n}) {\n  return executeFunction('get_wallet_balance', params);\n}\n\n// Transfer functions\nexport async function sendP2PTransfer(params: {\n  sender_id: string;\n  recipient_identifier: string;\n  currency: string;\n  amount: number;\n  pin: string;\n  description?: string;\n}) {\n  return executeFunction('send_p2p_transfer', params);\n}\n\nexport async function getTransferHistory(params: {\n  user_id: string;\n  page?: number;\n  limit?: number;\n  currency?: string;\n}) {\n  return executeFunction('get_transfer_history', params);\n}\n\n// Order functions\nexport async function placeLimitOrder(params: {\n  user_id: string;\n  order_type: 'limit';\n  side: 'buy' | 'sell';\n  base_currency: string;\n  quote_currency: string;\n  amount: number;\n  price: number;\n}) {\n  return executeFunction('place_limit_order', params);\n}\n\nexport async function executeMarketOrder(params: {\n  user_id: string;\n  order_type: 'market';\n  side: 'buy' | 'sell';\n  base_currency: string;\n  quote_currency: string;\n  amount: number;\n  slippage_limit?: number;\n}) {\n  return executeFunction('execute_market_order', params);\n}\n\nexport async function getUserOrderHistory(params: {\n  user_id: string;\n  page?: number;\n  limit?: number;\n  status?: string;\n}) {\n  return executeFunction('get_user_order_history', params);\n}\n\n// Market data functions\nexport async function getMarketSummary(params: {\n  base_currency: string;\n  quote_currency: string;\n}) {\n  return executeFunction('get_market_summary', params);\n}\n\nexport async function getOrderBookDepth(params: {\n  base_currency: string;\n  quote_currency: string;\n  levels?: number;\n}) {\n  return executeFunction('get_order_book_depth', params);\n}\n\n// Security functions\nexport async function setUserPin(params: {\n  user_id: string;\n  pin_hash: string;\n}) {\n  return executeFunction('set_user_pin', params);\n}\n\nexport async function verifyUserPin(params: {\n  user_id: string;\n  pin: string;\n}) {\n  return executeFunction('verify_user_pin', params);\n}\n\n// Health check function\nexport async function checkDatabaseHealth() {\n  try {\n    const supabase = createServerSupabaseClient();\n    const { error } = await supabase.from('users').select('count').limit(1);\n    \n    if (error) {\n      return {\n        success: false,\n        error: 'Database connection failed'\n      };\n    }\n\n    return {\n      success: true,\n      data: { status: 'healthy', timestamp: new Date().toISOString() }\n    };\n  } catch {\n    return {\n      success: false,\n      error: 'Database connection failed'\n    };\n  }\n}\n"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AA5BJ,SAASE,0BAA0B,QAAQ,uBAAuB;AAQlE;;;AAGA,eAAeC,eAAeA,CAC5BC,YAAoB,EACpBC,MAAA;AAAA;AAAA,CAAAL,cAAA,GAAAM,CAAA,UAAkC,EAAE;EAAA;EAAAN,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EAEpC,IAAI;IACF,MAAMC,QAAQ;IAAA;IAAA,CAAAT,cAAA,GAAAQ,CAAA,OAAGN,0BAA0B,EAAE;IAE7C,MAAM;MAAEQ,IAAI;MAAEC;IAAK,CAAE;IAAA;IAAA,CAAAX,cAAA,GAAAQ,CAAA,OAAG,MAAMC,QAAQ,CAACG,GAAG,CAACR,YAAY,EAAEC,MAAM,CAAC;IAAC;IAAAL,cAAA,GAAAQ,CAAA;IAEjE,IAAIG,KAAK,EAAE;MAAA;MAAAX,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAQ,CAAA;MACTK,OAAO,CAACF,KAAK,CAAC,qBAAqBP,YAAY,SAAS,EAAEO,KAAK,CAAC;MAAC;MAAAX,cAAA,GAAAQ,CAAA;MACjE,OAAO;QACLM,OAAO,EAAE,KAAK;QACdH,KAAK;QAAE;QAAA,CAAAX,cAAA,GAAAM,CAAA,UAAAK,KAAK,CAACI,OAAO;QAAA;QAAA,CAAAf,cAAA,GAAAM,CAAA,UAAI,2BAA2B;OACpD;IACH,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAQ,CAAA;IAED,OAAO;MACLM,OAAO,EAAE,IAAI;MACbJ;KACD;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA;IAAAX,cAAA,GAAAQ,CAAA;IACdK,OAAO,CAACF,KAAK,CAAC,qBAAqBP,YAAY,aAAa,EAAEO,KAAK,CAAC;IAAC;IAAAX,cAAA,GAAAQ,CAAA;IACrE,OAAO;MACLM,OAAO,EAAE,KAAK;MACdH,KAAK,EAAE;KACR;EACH;AACF;AAEA;AACA,OAAO,eAAeK,UAAUA,CAACX,MAKhC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,aAAa,EAAEE,MAAM,CAAC;AAC/C;AAEA,OAAO,eAAeY,mBAAmBA,CAACZ,MAGzC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,wBAAwB,EAAEE,MAAM,CAAC;AAC1D;AAEA;AACA,OAAO,eAAea,gBAAgBA,CAACb,MAGtC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,oBAAoB,EAAEE,MAAM,CAAC;AACtD;AAEA;AACA,OAAO,eAAec,eAAeA,CAACd,MAOrC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,mBAAmB,EAAEE,MAAM,CAAC;AACrD;AAEA,OAAO,eAAee,kBAAkBA,CAACf,MAKxC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,sBAAsB,EAAEE,MAAM,CAAC;AACxD;AAEA;AACA,OAAO,eAAegB,eAAeA,CAAChB,MAQrC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,mBAAmB,EAAEE,MAAM,CAAC;AACrD;AAEA,OAAO,eAAeiB,kBAAkBA,CAACjB,MAQxC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,sBAAsB,EAAEE,MAAM,CAAC;AACxD;AAEA,OAAO,eAAekB,mBAAmBA,CAAClB,MAKzC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,wBAAwB,EAAEE,MAAM,CAAC;AAC1D;AAEA;AACA,OAAO,eAAemB,gBAAgBA,CAACnB,MAGtC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,oBAAoB,EAAEE,MAAM,CAAC;AACtD;AAEA,OAAO,eAAeoB,iBAAiBA,CAACpB,MAIvC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,sBAAsB,EAAEE,MAAM,CAAC;AACxD;AAEA;AACA,OAAO,eAAeqB,UAAUA,CAACrB,MAGhC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,cAAc,EAAEE,MAAM,CAAC;AAChD;AAEA,OAAO,eAAesB,aAAaA,CAACtB,MAGnC;EAAA;EAAAL,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACC,OAAOL,eAAe,CAAC,iBAAiB,EAAEE,MAAM,CAAC;AACnD;AAEA;AACA,OAAO,eAAeuB,mBAAmBA,CAAA;EAAA;EAAA5B,cAAA,GAAAO,CAAA;EAAAP,cAAA,GAAAQ,CAAA;EACvC,IAAI;IACF,MAAMC,QAAQ;IAAA;IAAA,CAAAT,cAAA,GAAAQ,CAAA,QAAGN,0BAA0B,EAAE;IAC7C,MAAM;MAAES;IAAK,CAAE;IAAA;IAAA,CAAAX,cAAA,GAAAQ,CAAA,QAAG,MAAMC,QAAQ,CAACoB,IAAI,CAAC,OAAO,CAAC,CAACC,MAAM,CAAC,OAAO,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;IAAC;IAAA/B,cAAA,GAAAQ,CAAA;IAExE,IAAIG,KAAK,EAAE;MAAA;MAAAX,cAAA,GAAAM,CAAA;MAAAN,cAAA,GAAAQ,CAAA;MACT,OAAO;QACLM,OAAO,EAAE,KAAK;QACdH,KAAK,EAAE;OACR;IACH,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAM,CAAA;IAAA;IAAAN,cAAA,GAAAQ,CAAA;IAED,OAAO;MACLM,OAAO,EAAE,IAAI;MACbJ,IAAI,EAAE;QAAEsB,MAAM,EAAE,SAAS;QAAEC,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;MAAE;KAC/D;EACH,CAAC,CAAC,OAAAC,EAAA,EAAM;IAAA;IAAApC,cAAA,GAAAQ,CAAA;IACN,OAAO;MACLM,OAAO,EAAE,KAAK;MACdH,KAAK,EAAE;KACR;EACH;AACF","ignoreList":[]}