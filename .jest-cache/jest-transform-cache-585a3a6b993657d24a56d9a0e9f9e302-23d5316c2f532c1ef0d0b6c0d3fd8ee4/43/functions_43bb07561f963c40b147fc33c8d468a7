4a724509798a125db7a9643d32e723ef
/* istanbul ignore next */
function cov_1w90bdhwpi() {
  var path = "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\database\\functions.ts";
  var hash = "91288f0ea6c7a885a5fea1e77062ad1a7fa35ee9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\database\\functions.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "1": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 7,
          column: 53
        }
      },
      "2": {
        start: {
          line: 8,
          column: 32
        },
        end: {
          line: 8,
          column: 72
        }
      },
      "3": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 15,
          column: 9
        }
      },
      "4": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 10,
          column: 77
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 14,
          column: 14
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 10
        }
      },
      "7": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 77
        }
      },
      "8": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "9": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 50
        }
      },
      "10": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 61
        }
      },
      "11": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 57
        }
      },
      "12": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 56
        }
      },
      "13": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 59
        }
      },
      "14": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 56
        }
      },
      "15": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 59
        }
      },
      "16": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 61
        }
      },
      "17": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 57
        }
      },
      "18": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 59
        }
      },
      "19": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 66,
          column: 51
        }
      },
      "20": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 54
        }
      },
      "21": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "22": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 53
        }
      },
      "23": {
        start: {
          line: 75,
          column: 26
        },
        end: {
          line: 75,
          column: 79
        }
      },
      "24": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "25": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 80,
          column: 14
        }
      },
      "26": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 85,
          column: 10
        }
      },
      "27": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 91,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "executeFunction",
        decl: {
          start: {
            line: 5,
            column: 15
          },
          end: {
            line: 5,
            column: 30
          }
        },
        loc: {
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 28,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "createUser",
        decl: {
          start: {
            line: 30,
            column: 22
          },
          end: {
            line: 30,
            column: 32
          }
        },
        loc: {
          start: {
            line: 30,
            column: 41
          },
          end: {
            line: 32,
            column: 1
          }
        },
        line: 30
      },
      "2": {
        name: "findUserForTransfer",
        decl: {
          start: {
            line: 33,
            column: 22
          },
          end: {
            line: 33,
            column: 41
          }
        },
        loc: {
          start: {
            line: 33,
            column: 50
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 33
      },
      "3": {
        name: "getWalletBalance",
        decl: {
          start: {
            line: 37,
            column: 22
          },
          end: {
            line: 37,
            column: 38
          }
        },
        loc: {
          start: {
            line: 37,
            column: 47
          },
          end: {
            line: 39,
            column: 1
          }
        },
        line: 37
      },
      "4": {
        name: "sendP2PTransfer",
        decl: {
          start: {
            line: 41,
            column: 22
          },
          end: {
            line: 41,
            column: 37
          }
        },
        loc: {
          start: {
            line: 41,
            column: 46
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 41
      },
      "5": {
        name: "getTransferHistory",
        decl: {
          start: {
            line: 44,
            column: 22
          },
          end: {
            line: 44,
            column: 40
          }
        },
        loc: {
          start: {
            line: 44,
            column: 49
          },
          end: {
            line: 46,
            column: 1
          }
        },
        line: 44
      },
      "6": {
        name: "placeLimitOrder",
        decl: {
          start: {
            line: 48,
            column: 22
          },
          end: {
            line: 48,
            column: 37
          }
        },
        loc: {
          start: {
            line: 48,
            column: 46
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 48
      },
      "7": {
        name: "executeMarketOrder",
        decl: {
          start: {
            line: 51,
            column: 22
          },
          end: {
            line: 51,
            column: 40
          }
        },
        loc: {
          start: {
            line: 51,
            column: 49
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 51
      },
      "8": {
        name: "getUserOrderHistory",
        decl: {
          start: {
            line: 54,
            column: 22
          },
          end: {
            line: 54,
            column: 41
          }
        },
        loc: {
          start: {
            line: 54,
            column: 50
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 54
      },
      "9": {
        name: "getMarketSummary",
        decl: {
          start: {
            line: 58,
            column: 22
          },
          end: {
            line: 58,
            column: 38
          }
        },
        loc: {
          start: {
            line: 58,
            column: 47
          },
          end: {
            line: 60,
            column: 1
          }
        },
        line: 58
      },
      "10": {
        name: "getOrderBookDepth",
        decl: {
          start: {
            line: 61,
            column: 22
          },
          end: {
            line: 61,
            column: 39
          }
        },
        loc: {
          start: {
            line: 61,
            column: 48
          },
          end: {
            line: 63,
            column: 1
          }
        },
        line: 61
      },
      "11": {
        name: "setUserPin",
        decl: {
          start: {
            line: 65,
            column: 22
          },
          end: {
            line: 65,
            column: 32
          }
        },
        loc: {
          start: {
            line: 65,
            column: 41
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 65
      },
      "12": {
        name: "verifyUserPin",
        decl: {
          start: {
            line: 68,
            column: 22
          },
          end: {
            line: 68,
            column: 35
          }
        },
        loc: {
          start: {
            line: 68,
            column: 44
          },
          end: {
            line: 70,
            column: 1
          }
        },
        line: 68
      },
      "13": {
        name: "checkDatabaseHealth",
        decl: {
          start: {
            line: 72,
            column: 22
          },
          end: {
            line: 72,
            column: 41
          }
        },
        loc: {
          start: {
            line: 72,
            column: 44
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 72
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 5,
            column: 45
          },
          end: {
            line: 5,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 5,
            column: 54
          },
          end: {
            line: 5,
            column: 56
          }
        }],
        line: 5
      },
      "1": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      },
      "2": {
        loc: {
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 13,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 23
          },
          end: {
            line: 13,
            column: 36
          }
        }, {
          start: {
            line: 13,
            column: 40
          },
          end: {
            line: 13,
            column: 67
          }
        }],
        line: 13
      },
      "3": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\database\\functions.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\database\\functions.ts"],
      sourcesContent: ["import { createServerSupabaseClient } from '@/lib/supabase/server';\n\nexport interface DatabaseResult<T = unknown> {\n  success: boolean;\n  data?: T;\n  error?: string;\n}\n\n/**\n * Execute a Supabase database function with error handling\n */\nasync function executeFunction<T>(\n  functionName: string,\n  params: Record<string, unknown> = {}\n): Promise<DatabaseResult<T>> {\n  try {\n    const supabase = createServerSupabaseClient();\n    \n    const { data, error } = await supabase.rpc(functionName, params);\n\n    if (error) {\n      console.error(`Database function ${functionName} error:`, error);\n      return {\n        success: false,\n        error: error.message || 'Database operation failed'\n      };\n    }\n\n    return {\n      success: true,\n      data\n    };\n  } catch (error) {\n    console.error(`Database function ${functionName} exception:`, error);\n    return {\n      success: false,\n      error: 'Database connection failed'\n    };\n  }\n}\n\n// User functions\nexport async function createUser(params: {\n  clerk_user_id: string;\n  email: string;\n  first_name?: string;\n  last_name?: string;\n}) {\n  return executeFunction('create_user', params);\n}\n\nexport async function findUserForTransfer(params: {\n  search_query: string;\n  search_type: 'email' | 'phone' | 'name';\n}) {\n  return executeFunction('find_user_for_transfer', params);\n}\n\n// Wallet functions\nexport async function getWalletBalance(params: {\n  user_id: string;\n  currency?: string;\n}) {\n  return executeFunction('get_wallet_balance', params);\n}\n\n// Transfer functions\nexport async function sendP2PTransfer(params: {\n  sender_id: string;\n  recipient_identifier: string;\n  currency: string;\n  amount: number;\n  pin: string;\n  description?: string;\n}) {\n  return executeFunction('send_p2p_transfer', params);\n}\n\nexport async function getTransferHistory(params: {\n  user_id: string;\n  page?: number;\n  limit?: number;\n  currency?: string;\n}) {\n  return executeFunction('get_transfer_history', params);\n}\n\n// Order functions\nexport async function placeLimitOrder(params: {\n  user_id: string;\n  order_type: 'limit';\n  side: 'buy' | 'sell';\n  base_currency: string;\n  quote_currency: string;\n  amount: number;\n  price: number;\n}) {\n  return executeFunction('place_limit_order', params);\n}\n\nexport async function executeMarketOrder(params: {\n  user_id: string;\n  order_type: 'market';\n  side: 'buy' | 'sell';\n  base_currency: string;\n  quote_currency: string;\n  amount: number;\n  slippage_limit?: number;\n}) {\n  return executeFunction('execute_market_order', params);\n}\n\nexport async function getUserOrderHistory(params: {\n  user_id: string;\n  page?: number;\n  limit?: number;\n  status?: string;\n}) {\n  return executeFunction('get_user_order_history', params);\n}\n\n// Market data functions\nexport async function getMarketSummary(params: {\n  base_currency: string;\n  quote_currency: string;\n}) {\n  return executeFunction('get_market_summary', params);\n}\n\nexport async function getOrderBookDepth(params: {\n  base_currency: string;\n  quote_currency: string;\n  levels?: number;\n}) {\n  return executeFunction('get_order_book_depth', params);\n}\n\n// Security functions\nexport async function setUserPin(params: {\n  user_id: string;\n  pin_hash: string;\n}) {\n  return executeFunction('set_user_pin', params);\n}\n\nexport async function verifyUserPin(params: {\n  user_id: string;\n  pin: string;\n}) {\n  return executeFunction('verify_user_pin', params);\n}\n\n// Health check function\nexport async function checkDatabaseHealth() {\n  try {\n    const supabase = createServerSupabaseClient();\n    const { error } = await supabase.from('users').select('count').limit(1);\n    \n    if (error) {\n      return {\n        success: false,\n        error: 'Database connection failed'\n      };\n    }\n\n    return {\n      success: true,\n      data: { status: 'healthy', timestamp: new Date().toISOString() }\n    };\n  } catch {\n    return {\n      success: false,\n      error: 'Database connection failed'\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "91288f0ea6c7a885a5fea1e77062ad1a7fa35ee9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1w90bdhwpi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1w90bdhwpi();
import { createServerSupabaseClient } from '@/lib/supabase/server';
/**
 * Execute a Supabase database function with error handling
 */
async function executeFunction(functionName, params =
/* istanbul ignore next */
(cov_1w90bdhwpi().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[0]++;
  cov_1w90bdhwpi().s[0]++;
  try {
    const supabase =
    /* istanbul ignore next */
    (cov_1w90bdhwpi().s[1]++, createServerSupabaseClient());
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1w90bdhwpi().s[2]++, await supabase.rpc(functionName, params));
    /* istanbul ignore next */
    cov_1w90bdhwpi().s[3]++;
    if (error) {
      /* istanbul ignore next */
      cov_1w90bdhwpi().b[1][0]++;
      cov_1w90bdhwpi().s[4]++;
      console.error(`Database function ${functionName} error:`, error);
      /* istanbul ignore next */
      cov_1w90bdhwpi().s[5]++;
      return {
        success: false,
        error:
        /* istanbul ignore next */
        (cov_1w90bdhwpi().b[2][0]++, error.message) ||
        /* istanbul ignore next */
        (cov_1w90bdhwpi().b[2][1]++, 'Database operation failed')
      };
    } else
    /* istanbul ignore next */
    {
      cov_1w90bdhwpi().b[1][1]++;
    }
    cov_1w90bdhwpi().s[6]++;
    return {
      success: true,
      data
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_1w90bdhwpi().s[7]++;
    console.error(`Database function ${functionName} exception:`, error);
    /* istanbul ignore next */
    cov_1w90bdhwpi().s[8]++;
    return {
      success: false,
      error: 'Database connection failed'
    };
  }
}
// User functions
export async function createUser(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[1]++;
  cov_1w90bdhwpi().s[9]++;
  return executeFunction('create_user', params);
}
export async function findUserForTransfer(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[2]++;
  cov_1w90bdhwpi().s[10]++;
  return executeFunction('find_user_for_transfer', params);
}
// Wallet functions
export async function getWalletBalance(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[3]++;
  cov_1w90bdhwpi().s[11]++;
  return executeFunction('get_wallet_balance', params);
}
// Transfer functions
export async function sendP2PTransfer(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[4]++;
  cov_1w90bdhwpi().s[12]++;
  return executeFunction('send_p2p_transfer', params);
}
export async function getTransferHistory(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[5]++;
  cov_1w90bdhwpi().s[13]++;
  return executeFunction('get_transfer_history', params);
}
// Order functions
export async function placeLimitOrder(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[6]++;
  cov_1w90bdhwpi().s[14]++;
  return executeFunction('place_limit_order', params);
}
export async function executeMarketOrder(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[7]++;
  cov_1w90bdhwpi().s[15]++;
  return executeFunction('execute_market_order', params);
}
export async function getUserOrderHistory(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[8]++;
  cov_1w90bdhwpi().s[16]++;
  return executeFunction('get_user_order_history', params);
}
// Market data functions
export async function getMarketSummary(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[9]++;
  cov_1w90bdhwpi().s[17]++;
  return executeFunction('get_market_summary', params);
}
export async function getOrderBookDepth(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[10]++;
  cov_1w90bdhwpi().s[18]++;
  return executeFunction('get_order_book_depth', params);
}
// Security functions
export async function setUserPin(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[11]++;
  cov_1w90bdhwpi().s[19]++;
  return executeFunction('set_user_pin', params);
}
export async function verifyUserPin(params) {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[12]++;
  cov_1w90bdhwpi().s[20]++;
  return executeFunction('verify_user_pin', params);
}
// Health check function
export async function checkDatabaseHealth() {
  /* istanbul ignore next */
  cov_1w90bdhwpi().f[13]++;
  cov_1w90bdhwpi().s[21]++;
  try {
    const supabase =
    /* istanbul ignore next */
    (cov_1w90bdhwpi().s[22]++, createServerSupabaseClient());
    const {
      error
    } =
    /* istanbul ignore next */
    (cov_1w90bdhwpi().s[23]++, await supabase.from('users').select('count').limit(1));
    /* istanbul ignore next */
    cov_1w90bdhwpi().s[24]++;
    if (error) {
      /* istanbul ignore next */
      cov_1w90bdhwpi().b[3][0]++;
      cov_1w90bdhwpi().s[25]++;
      return {
        success: false,
        error: 'Database connection failed'
      };
    } else
    /* istanbul ignore next */
    {
      cov_1w90bdhwpi().b[3][1]++;
    }
    cov_1w90bdhwpi().s[26]++;
    return {
      success: true,
      data: {
        status: 'healthy',
        timestamp: new Date().toISOString()
      }
    };
  } catch (_a) {
    /* istanbul ignore next */
    cov_1w90bdhwpi().s[27]++;
    return {
      success: false,
      error: 'Database connection failed'
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,