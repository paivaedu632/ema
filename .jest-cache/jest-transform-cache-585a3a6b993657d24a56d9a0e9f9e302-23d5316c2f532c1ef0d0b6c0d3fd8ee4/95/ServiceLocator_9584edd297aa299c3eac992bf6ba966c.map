{"version":3,"names":["cov_27xzn9ptbf","actualCoverage","getContainer","ServiceLocator","initialize","container","f","s","b","resolve","serviceName","scopeId","isRegistered","getServicesByTag","tag","getSendMoneyUseCase","getGetWalletBalanceQueryHandler","getGetUserWalletsQueryHandler","getBuyCurrencyUseCase","getRegisterUserUseCase","getUserRepository","getWalletRepository","getTransactionRepository","getFeeCalculationService","getExchangeRateService","useService","useUseCases","sendMoney","getWalletBalance","getUserWallets","buyCurrency","registerUser","useRepositories","users","wallets","transactions","useDomainServices","feeCalculation","exchangeRate","Injectable","constructor","args","Object","defineProperty","get","enumerable","configurable","Inject","target","propertyKey","ScopedServiceManager","clearScope","createRequestScope","requestId","createUserScope","userId"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\infrastructure\\di\\ServiceLocator.ts"],"sourcesContent":["/**\n * Service Locator Pattern\n * \n * Provides a simplified interface for dependency resolution.\n * Useful for components that need to access services without direct injection.\n */\n\nimport { Container, getContainer } from './Container'\nimport {\n  SendMoneyUseCase\n} from '../../application/use-cases/SendMoneyUseCase'\nimport {\n  GetWalletBalanceQueryHandler\n} from '../../application/use-cases/GetWalletBalanceUseCase'\nimport {\n  GetUserWalletsQueryHandler\n} from '../../application/use-cases/GetUserWalletsUseCase'\nimport {\n  BuyCurrencyUseCase\n} from '../../application/use-cases/BuyCurrencyUseCase'\nimport {\n  RegisterUserUseCase\n} from '../../application/use-cases/RegisterUserUseCase'\nimport {\n  UserRepository,\n  WalletRepository,\n  TransactionRepository\n} from '../../domain/repositories'\nimport {\n  FeeCalculationService,\n  ExchangeRateService\n} from '../../domain'\n\n/**\n * Service Locator for easy dependency resolution\n */\nexport class ServiceLocator {\n  private static container: Container\n\n  /**\n   * Initialize the service locator with a container\n   */\n  static initialize(container?: Container): void {\n    ServiceLocator.container = container || getContainer()\n  }\n\n  /**\n   * Get the underlying container\n   */\n  static getContainer(): Container {\n    if (!ServiceLocator.container) {\n      ServiceLocator.initialize()\n    }\n    return ServiceLocator.container\n  }\n\n  /**\n   * Resolve a service by name\n   */\n  static resolve<T>(serviceName: string, scopeId?: string): T {\n    return ServiceLocator.getContainer().resolve<T>(serviceName, scopeId)\n  }\n\n  /**\n   * Check if a service is registered\n   */\n  static isRegistered(serviceName: string): boolean {\n    return ServiceLocator.getContainer().isRegistered(serviceName)\n  }\n\n  /**\n   * Get services by tag\n   */\n  static getServicesByTag(tag: string): string[] {\n    return ServiceLocator.getContainer().getServicesByTag(tag)\n  }\n\n  // Use Cases\n  static getSendMoneyUseCase(): SendMoneyUseCase {\n    return ServiceLocator.resolve<SendMoneyUseCase>('sendMoneyUseCase')\n  }\n\n  static getGetWalletBalanceQueryHandler(): GetWalletBalanceQueryHandler {\n    return ServiceLocator.resolve<GetWalletBalanceQueryHandler>('getWalletBalanceQueryHandler')\n  }\n\n  static getGetUserWalletsQueryHandler(): GetUserWalletsQueryHandler {\n    return ServiceLocator.resolve<GetUserWalletsQueryHandler>('getUserWalletsQueryHandler')\n  }\n\n  static getBuyCurrencyUseCase(): BuyCurrencyUseCase {\n    return ServiceLocator.resolve<BuyCurrencyUseCase>('buyCurrencyUseCase')\n  }\n\n  static getRegisterUserUseCase(): RegisterUserUseCase {\n    return ServiceLocator.resolve<RegisterUserUseCase>('registerUserUseCase')\n  }\n\n  // Repositories\n  static getUserRepository(): UserRepository {\n    return ServiceLocator.resolve<UserRepository>('userRepository')\n  }\n\n  static getWalletRepository(): WalletRepository {\n    return ServiceLocator.resolve<WalletRepository>('walletRepository')\n  }\n\n  static getTransactionRepository(): TransactionRepository {\n    return ServiceLocator.resolve<TransactionRepository>('transactionRepository')\n  }\n\n  // Domain Services\n  static getFeeCalculationService(): FeeCalculationService {\n    return ServiceLocator.resolve<FeeCalculationService>('feeCalculationService')\n  }\n\n  static getExchangeRateService(): ExchangeRateService {\n    return ServiceLocator.resolve<ExchangeRateService>('exchangeRateService')\n  }\n}\n\n/**\n * React Hook for using services in components\n */\nexport function useService<T>(serviceName: string, scopeId?: string): T {\n  return ServiceLocator.resolve<T>(serviceName, scopeId)\n}\n\n/**\n * React Hook for use cases\n */\nexport function useUseCases() {\n  return {\n    sendMoney: ServiceLocator.getSendMoneyUseCase(),\n    getWalletBalance: ServiceLocator.getGetWalletBalanceQueryHandler(),\n    getUserWallets: ServiceLocator.getGetUserWalletsQueryHandler(),\n    buyCurrency: ServiceLocator.getBuyCurrencyUseCase(),\n    registerUser: ServiceLocator.getRegisterUserUseCase()\n  }\n}\n\n/**\n * React Hook for repositories\n */\nexport function useRepositories() {\n  return {\n    users: ServiceLocator.getUserRepository(),\n    wallets: ServiceLocator.getWalletRepository(),\n    transactions: ServiceLocator.getTransactionRepository()\n  }\n}\n\n/**\n * React Hook for domain services\n */\nexport function useDomainServices() {\n  return {\n    feeCalculation: ServiceLocator.getFeeCalculationService(),\n    exchangeRate: ServiceLocator.getExchangeRateService()\n  }\n}\n\n/**\n * Decorator for automatic service injection\n */\nexport function Injectable(serviceName: string) {\n  return function <T extends { new (...args: any[]): {} }>(constructor: T) {\n    return class extends constructor {\n      constructor(...args: any[]) {\n        super(...args)\n        // Inject the service\n        Object.defineProperty(this, serviceName, {\n          get: () => ServiceLocator.resolve(serviceName),\n          enumerable: true,\n          configurable: false\n        })\n      }\n    }\n  }\n}\n\n/**\n * Property decorator for service injection\n */\nexport function Inject(serviceName: string) {\n  return function (target: any, propertyKey: string) {\n    Object.defineProperty(target, propertyKey, {\n      get: () => ServiceLocator.resolve(serviceName),\n      enumerable: true,\n      configurable: false\n    })\n  }\n}\n\n/**\n * Scoped service manager for request-scoped services\n */\nexport class ScopedServiceManager {\n  private scopeId: string\n\n  constructor(scopeId: string) {\n    this.scopeId = scopeId\n  }\n\n  resolve<T>(serviceName: string): T {\n    return ServiceLocator.resolve<T>(serviceName, this.scopeId)\n  }\n\n  clearScope(): void {\n    ServiceLocator.getContainer().clearScope(this.scopeId)\n  }\n\n  static createRequestScope(requestId: string): ScopedServiceManager {\n    return new ScopedServiceManager(`request_${requestId}`)\n  }\n\n  static createUserScope(userId: string): ScopedServiceManager {\n    return new ScopedServiceManager(`user_${userId}`)\n  }\n}\n\n// Initialize service locator on module load\nServiceLocator.initialize()\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2CI;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AA3CJ;;;;;;AAOA,SAAoBE,YAAY,QAAQ,aAAa;AA0BrD;;;AAGA,OAAM,MAAOC,cAAc;EAGzB;;;EAGA,OAAOC,UAAUA,CAACC,SAAqB;IAAA;IAAAL,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACrCJ,cAAc,CAACE,SAAS;IAAG;IAAA,CAAAL,cAAA,GAAAQ,CAAA,UAAAH,SAAS;IAAA;IAAA,CAAAL,cAAA,GAAAQ,CAAA,UAAIN,YAAY,EAAE;EACxD;EAEA;;;EAGA,OAAOA,YAAYA,CAAA;IAAA;IAAAF,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACjB,IAAI,CAACJ,cAAc,CAACE,SAAS,EAAE;MAAA;MAAAL,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAO,CAAA;MAC7BJ,cAAc,CAACC,UAAU,EAAE;IAC7B,CAAC;IAAA;IAAA;MAAAJ,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAO,CAAA;IACD,OAAOJ,cAAc,CAACE,SAAS;EACjC;EAEA;;;EAGA,OAAOI,OAAOA,CAAIC,WAAmB,EAAEC,OAAgB;IAAA;IAAAX,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACrD,OAAOJ,cAAc,CAACD,YAAY,EAAE,CAACO,OAAO,CAAIC,WAAW,EAAEC,OAAO,CAAC;EACvE;EAEA;;;EAGA,OAAOC,YAAYA,CAACF,WAAmB;IAAA;IAAAV,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACrC,OAAOJ,cAAc,CAACD,YAAY,EAAE,CAACU,YAAY,CAACF,WAAW,CAAC;EAChE;EAEA;;;EAGA,OAAOG,gBAAgBA,CAACC,GAAW;IAAA;IAAAd,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACjC,OAAOJ,cAAc,CAACD,YAAY,EAAE,CAACW,gBAAgB,CAACC,GAAG,CAAC;EAC5D;EAEA;EACA,OAAOC,mBAAmBA,CAAA;IAAA;IAAAf,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACxB,OAAOJ,cAAc,CAACM,OAAO,CAAmB,kBAAkB,CAAC;EACrE;EAEA,OAAOO,+BAA+BA,CAAA;IAAA;IAAAhB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACpC,OAAOJ,cAAc,CAACM,OAAO,CAA+B,8BAA8B,CAAC;EAC7F;EAEA,OAAOQ,6BAA6BA,CAAA;IAAA;IAAAjB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAClC,OAAOJ,cAAc,CAACM,OAAO,CAA6B,4BAA4B,CAAC;EACzF;EAEA,OAAOS,qBAAqBA,CAAA;IAAA;IAAAlB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAC1B,OAAOJ,cAAc,CAACM,OAAO,CAAqB,oBAAoB,CAAC;EACzE;EAEA,OAAOU,sBAAsBA,CAAA;IAAA;IAAAnB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAC3B,OAAOJ,cAAc,CAACM,OAAO,CAAsB,qBAAqB,CAAC;EAC3E;EAEA;EACA,OAAOW,iBAAiBA,CAAA;IAAA;IAAApB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACtB,OAAOJ,cAAc,CAACM,OAAO,CAAiB,gBAAgB,CAAC;EACjE;EAEA,OAAOY,mBAAmBA,CAAA;IAAA;IAAArB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACxB,OAAOJ,cAAc,CAACM,OAAO,CAAmB,kBAAkB,CAAC;EACrE;EAEA,OAAOa,wBAAwBA,CAAA;IAAA;IAAAtB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAC7B,OAAOJ,cAAc,CAACM,OAAO,CAAwB,uBAAuB,CAAC;EAC/E;EAEA;EACA,OAAOc,wBAAwBA,CAAA;IAAA;IAAAvB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAC7B,OAAOJ,cAAc,CAACM,OAAO,CAAwB,uBAAuB,CAAC;EAC/E;EAEA,OAAOe,sBAAsBA,CAAA;IAAA;IAAAxB,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAC3B,OAAOJ,cAAc,CAACM,OAAO,CAAsB,qBAAqB,CAAC;EAC3E;;AAGF;;;AAGA,OAAM,SAAUgB,UAAUA,CAAIf,WAAmB,EAAEC,OAAgB;EAAA;EAAAX,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAO,CAAA;EACjE,OAAOJ,cAAc,CAACM,OAAO,CAAIC,WAAW,EAAEC,OAAO,CAAC;AACxD;AAEA;;;AAGA,OAAM,SAAUe,WAAWA,CAAA;EAAA;EAAA1B,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAO,CAAA;EACzB,OAAO;IACLoB,SAAS,EAAExB,cAAc,CAACY,mBAAmB,EAAE;IAC/Ca,gBAAgB,EAAEzB,cAAc,CAACa,+BAA+B,EAAE;IAClEa,cAAc,EAAE1B,cAAc,CAACc,6BAA6B,EAAE;IAC9Da,WAAW,EAAE3B,cAAc,CAACe,qBAAqB,EAAE;IACnDa,YAAY,EAAE5B,cAAc,CAACgB,sBAAsB;GACpD;AACH;AAEA;;;AAGA,OAAM,SAAUa,eAAeA,CAAA;EAAA;EAAAhC,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAO,CAAA;EAC7B,OAAO;IACL0B,KAAK,EAAE9B,cAAc,CAACiB,iBAAiB,EAAE;IACzCc,OAAO,EAAE/B,cAAc,CAACkB,mBAAmB,EAAE;IAC7Cc,YAAY,EAAEhC,cAAc,CAACmB,wBAAwB;GACtD;AACH;AAEA;;;AAGA,OAAM,SAAUc,iBAAiBA,CAAA;EAAA;EAAApC,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAO,CAAA;EAC/B,OAAO;IACL8B,cAAc,EAAElC,cAAc,CAACoB,wBAAwB,EAAE;IACzDe,YAAY,EAAEnC,cAAc,CAACqB,sBAAsB;GACpD;AACH;AAEA;;;AAGA,OAAM,SAAUe,UAAUA,CAAC7B,WAAmB;EAAA;EAAAV,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAO,CAAA;EAC5C,OAAO,UAAkDiC,WAAc;IAAA;IAAAxC,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACrE,OAAO,cAAciC,WAAW;MAC9BA,YAAY,GAAGC,IAAW;QAAA;QAAAzC,cAAA,GAAAM,CAAA;QAAAN,cAAA,GAAAO,CAAA;QACxB,KAAK,CAAC,GAAGkC,IAAI,CAAC;QACd;QAAA;QAAAzC,cAAA,GAAAO,CAAA;QACAmC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAEjC,WAAW,EAAE;UACvCkC,GAAG,EAAEA,CAAA,KAAM;YAAA;YAAA5C,cAAA,GAAAM,CAAA;YAAAN,cAAA,GAAAO,CAAA;YAAA,OAAAJ,cAAc,CAACM,OAAO,CAACC,WAAW,CAAC;UAAD,CAAC;UAC9CmC,UAAU,EAAE,IAAI;UAChBC,YAAY,EAAE;SACf,CAAC;MACJ;KACD;EACH,CAAC;AACH;AAEA;;;AAGA,OAAM,SAAUC,MAAMA,CAACrC,WAAmB;EAAA;EAAAV,cAAA,GAAAM,CAAA;EAAAN,cAAA,GAAAO,CAAA;EACxC,OAAO,UAAUyC,MAAW,EAAEC,WAAmB;IAAA;IAAAjD,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAC/CmC,MAAM,CAACC,cAAc,CAACK,MAAM,EAAEC,WAAW,EAAE;MACzCL,GAAG,EAAEA,CAAA,KAAM;QAAA;QAAA5C,cAAA,GAAAM,CAAA;QAAAN,cAAA,GAAAO,CAAA;QAAA,OAAAJ,cAAc,CAACM,OAAO,CAACC,WAAW,CAAC;MAAD,CAAC;MAC9CmC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE;KACf,CAAC;EACJ,CAAC;AACH;AAEA;;;AAGA,OAAM,MAAOI,oBAAoB;EAG/BV,YAAY7B,OAAe;IAAA;IAAAX,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACzB,IAAI,CAACI,OAAO,GAAGA,OAAO;EACxB;EAEAF,OAAOA,CAAIC,WAAmB;IAAA;IAAAV,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IAC5B,OAAOJ,cAAc,CAACM,OAAO,CAAIC,WAAW,EAAE,IAAI,CAACC,OAAO,CAAC;EAC7D;EAEAwC,UAAUA,CAAA;IAAA;IAAAnD,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACRJ,cAAc,CAACD,YAAY,EAAE,CAACiD,UAAU,CAAC,IAAI,CAACxC,OAAO,CAAC;EACxD;EAEA,OAAOyC,kBAAkBA,CAACC,SAAiB;IAAA;IAAArD,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACzC,OAAO,IAAI2C,oBAAoB,CAAC,WAAWG,SAAS,EAAE,CAAC;EACzD;EAEA,OAAOC,eAAeA,CAACC,MAAc;IAAA;IAAAvD,cAAA,GAAAM,CAAA;IAAAN,cAAA,GAAAO,CAAA;IACnC,OAAO,IAAI2C,oBAAoB,CAAC,QAAQK,MAAM,EAAE,CAAC;EACnD;;AAGF;AAAA;AAAAvD,cAAA,GAAAO,CAAA;AACAJ,cAAc,CAACC,UAAU,EAAE","ignoreList":[]}