{"version":3,"names":["formatCurrency","amount","currency","options","cov_2g3q1wm4e9","b","f","numericAmount","s","parseFloat","isNaN","minimumFractionDigits","maximumFractionDigits","showCurrency","formattedAmount","formatPortugueseCurrency","minDecimals","maxDecimals","standardFormatted","toFixed","integerPart","decimalPart","split","formattedInteger","replace","paddedDecimal","padEnd","formatAmountWithCurrency","formatAmountForInput","parsePortugueseNumber","cleanAmount","trim","lastCommaIndex","lastIndexOf","substring","cleanInteger","parsed","formatExchangeRate","rate","fromCurrency","toCurrency","numericRate","formattedRate","formatPercentage","percentage","numericPercentage","percentValue","formattedPercent","isValidPortugueseNumber","value","cleanValue","portugueseNumberRegex","test","formatForAPI","formatCompactNumber","num","millions","toLocaleString","thousands","formatDateTime","dateString","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","_a","formatDate","formatTime"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\lib\\format.ts"],"sourcesContent":["/**\n * Portuguese Locale Number Formatting Utilities for EmaPay\n *\n * ⚠️  FRONTEND DISPLAY ONLY ⚠️\n * This module provides Portuguese locale formatting for USER-FACING DISPLAYS ONLY.\n *\n * SCOPE:\n * ✅ Frontend Components: Balance cards, transaction lists, forms, confirmation screens\n * ✅ User Interface: All currency amounts displayed to users (1.234,56 format)\n * ❌ Backend/API: Use standard JSON decimal format (1234.56) for all API operations\n * ❌ Database: Store raw numeric values without any locale-specific formatting\n *\n * USAGE GUIDELINES:\n * - Frontend Display: Use formatAmountWithCurrency() and formatAmountForInput()\n * - API Calls: Use formatForAPI() to convert Portuguese input to standard decimal\n * - Database Operations: Work with raw numbers only, never formatted strings\n * - JSON Responses: Return standard decimal format, format on frontend\n */\n\nexport type Currency = 'AOA' | 'EUR'\n\n/**\n * Format a number with Portuguese locale based on currency\n * Uses dot (.) as thousands separator and comma (,) as decimal separator\n * @param amount - The numeric amount to format\n * @param currency - The currency type (AOA or EUR)\n * @param options - Additional formatting options\n * @returns Formatted string with Portuguese locale (dot thousands, comma decimal)\n */\nexport function formatCurrency(\n  amount: number | string,\n  currency: Currency,\n  options: {\n    minimumFractionDigits?: number\n    maximumFractionDigits?: number\n    showCurrency?: boolean\n  } = {}\n): string {\n  const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount\n\n  if (isNaN(numericAmount)) {\n    return '0,00'\n  }\n\n  const {\n    minimumFractionDigits = 2,\n    maximumFractionDigits = 2,\n    showCurrency = false\n  } = options\n\n  // Custom formatting for Portuguese locale with dot thousands separator\n  // Format: 1.234.567,89 (dot as thousands, comma as decimal)\n  const formattedAmount = formatPortugueseCurrency(numericAmount, minimumFractionDigits, maximumFractionDigits)\n\n  return showCurrency ? `${formattedAmount} ${currency}` : formattedAmount\n}\n\n/**\n * Internal helper function to format currency with Portuguese conventions\n * @param amount - Numeric amount to format\n * @param minDecimals - Minimum decimal places\n * @param maxDecimals - Maximum decimal places\n * @returns Formatted string with dot thousands separator and comma decimal separator\n */\nfunction formatPortugueseCurrency(amount: number, minDecimals: number = 2, maxDecimals: number = 2): string {\n  // First format with standard locale to get proper decimal handling\n  const standardFormatted = amount.toFixed(maxDecimals)\n\n  // Split into integer and decimal parts\n  const [integerPart, decimalPart] = standardFormatted.split('.')\n\n  // Add dot thousands separators to integer part\n  const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.')\n\n  // Ensure proper decimal places\n  const paddedDecimal = decimalPart.padEnd(minDecimals, '0')\n\n  // Combine with comma as decimal separator\n  return `${formattedInteger},${paddedDecimal}`\n}\n\n/**\n * Format amount for display with currency symbol\n * @param amount - The numeric amount\n * @param currency - The currency type\n * @returns Formatted string with currency\n */\nexport function formatAmountWithCurrency(amount: number | string, currency: Currency): string {\n  return formatCurrency(amount, currency, { showCurrency: true })\n}\n\n/**\n * Format amount for input fields (without currency symbol)\n * @param amount - The numeric amount\n * @param currency - The currency type\n * @returns Formatted string without currency\n */\nexport function formatAmountForInput(amount: number | string, currency: Currency): string {\n  return formatCurrency(amount, currency, { showCurrency: false })\n}\n\n/**\n * Parse Portuguese formatted string back to number\n * Handles dot thousands separator and comma decimal separator\n * @param formattedAmount - Portuguese formatted string (e.g., \"1.250,50\" or \"125.000,75\")\n * @returns Numeric value\n */\nexport function parsePortugueseNumber(formattedAmount: string): number {\n  if (!formattedAmount || typeof formattedAmount !== 'string') {\n    return 0\n  }\n\n  // Remove currency symbols and extra spaces\n  let cleanAmount = formattedAmount\n    .replace(/AOA|EUR/g, '')\n    .trim()\n\n  // Handle Portuguese number format with dot thousands separator:\n  // - Dot as thousands separator: \"125.000,75\" -> \"125000,75\"\n  // - Comma as decimal separator: \"125000,75\" -> \"125000.75\"\n\n  // Find the last comma (decimal separator)\n  const lastCommaIndex = cleanAmount.lastIndexOf(',')\n\n  if (lastCommaIndex !== -1) {\n    // Split at the last comma\n    const integerPart = cleanAmount.substring(0, lastCommaIndex)\n    const decimalPart = cleanAmount.substring(lastCommaIndex + 1)\n\n    // Remove dots from integer part (thousands separators)\n    const cleanInteger = integerPart.replace(/\\./g, '')\n\n    // Reconstruct with dot as decimal separator\n    cleanAmount = `${cleanInteger}.${decimalPart}`\n  } else {\n    // No decimal part, just remove dots (thousands separators)\n    cleanAmount = cleanAmount.replace(/\\./g, '')\n  }\n\n  const parsed = parseFloat(cleanAmount)\n  return isNaN(parsed) ? 0 : parsed\n}\n\n/**\n * Format exchange rate for display\n * @param rate - Exchange rate value\n * @param fromCurrency - Source currency\n * @param toCurrency - Target currency\n * @returns Formatted exchange rate string\n */\nexport function formatExchangeRate(\n  rate: number | string, \n  fromCurrency: Currency, \n  toCurrency: Currency\n): string {\n  const numericRate = typeof rate === 'string' ? parseFloat(rate) : rate\n  \n  if (isNaN(numericRate)) {\n    return `1 ${fromCurrency} = 0,00 ${toCurrency}`\n  }\n\n  const formattedRate = formatCurrency(numericRate, toCurrency, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 6 // Allow more precision for exchange rates\n  })\n\n  return `1 ${fromCurrency} = ${formattedRate} ${toCurrency}`\n}\n\n/**\n * Format percentage with Portuguese locale (dot thousands, comma decimal)\n * @param percentage - Percentage value (e.g., 0.025 for 2.5%)\n * @returns Formatted percentage string\n */\nexport function formatPercentage(percentage: number | string): string {\n  const numericPercentage = typeof percentage === 'string' ? parseFloat(percentage) : percentage\n\n  if (isNaN(numericPercentage)) {\n    return '0,00%'\n  }\n\n  // Convert to percentage and format with Portuguese conventions\n  const percentValue = numericPercentage * 100\n  const formattedPercent = formatPortugueseCurrency(percentValue, 2, 2)\n  return `${formattedPercent}%`\n}\n\n/**\n * Validate if a string is a valid Portuguese formatted number\n * Handles dot thousands separator and comma decimal separator\n * @param value - String to validate\n * @returns Boolean indicating if valid\n */\nexport function isValidPortugueseNumber(value: string): boolean {\n  if (!value || typeof value !== 'string') {\n    return false\n  }\n\n  // Remove currency symbols and spaces\n  const cleanValue = value\n    .replace(/AOA|EUR/g, '')\n    .trim()\n\n  // Check if it matches Portuguese number format with dot thousands separator\n  // Allows: \"1250,50\", \"1.250,50\", \"125.000,75\", etc.\n  // Pattern: optional digits, optional groups of (dot + 3 digits), optional comma + up to 2 digits\n  const portugueseNumberRegex = /^\\d{1,3}(?:\\.\\d{3})*(?:,\\d{0,2})?$/\n\n  return portugueseNumberRegex.test(cleanValue) && !isNaN(parsePortugueseNumber(value))\n}\n\n/**\n * Format number for API calls (always use standard decimal format)\n *\n * ⚠️  CRITICAL: Use this function to convert Portuguese formatted user input\n * to standard JSON decimal format before sending to backend/API.\n *\n * EXAMPLES:\n * - formatForAPI(\"1.250,50\") → \"1250.50\" (for API calls)\n * - formatForAPI(1250.50) → \"1250.50\" (for API calls)\n *\n * @param amount - Amount to format for API (Portuguese formatted string or number)\n * @returns String in standard decimal format (1234.56) for API consumption\n */\nexport function formatForAPI(amount: number | string): string {\n  const numericAmount = typeof amount === 'string' ? parsePortugueseNumber(amount) : amount\n  return numericAmount.toFixed(2)\n}\n\n/**\n * Format compact numbers with K/M suffixes (Portuguese locale)\n * @param num - Number to format compactly\n * @returns Formatted compact number string\n */\nexport function formatCompactNumber(num: number): string {\n  if (num >= 1000000) {\n    const millions = (num / 1000000).toLocaleString('pt-PT', {\n      minimumFractionDigits: 1,\n      maximumFractionDigits: 1\n    })\n    return `${millions}M`\n  } else if (num >= 1000) {\n    const thousands = (num / 1000).toLocaleString('pt-PT', {\n      minimumFractionDigits: 1,\n      maximumFractionDigits: 1\n    })\n    return `${thousands}K`\n  }\n  return formatCurrency(num, 'EUR', { showCurrency: false })\n}\n\n/**\n * Format date and time for Portuguese locale\n * @param dateString - Date string to format\n * @returns Formatted date and time string\n */\nexport function formatDateTime(dateString: string): string {\n  try {\n    const date = new Date(dateString)\n    return new Intl.DateTimeFormat('pt-PT', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(date)\n  } catch {\n    return dateString\n  }\n}\n\n/**\n * Format date only for Portuguese locale\n * @param dateString - Date string to format\n * @returns Formatted date string\n */\nexport function formatDate(dateString: string): string {\n  try {\n    const date = new Date(dateString)\n    return new Intl.DateTimeFormat('pt-PT', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit'\n    }).format(date)\n  } catch {\n    return dateString\n  }\n}\n\n/**\n * Format time only for Portuguese locale\n * @param dateString - Date string to format\n * @returns Formatted time string\n */\nexport function formatTime(dateString: string): string {\n  try {\n    const date = new Date(dateString)\n    return new Intl.DateTimeFormat('pt-PT', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(date)\n  } catch {\n    return dateString\n  }\n}\n\n\n"],"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","ignoreList":[]}