{"version":3,"names":["cov_2najkiesto","actualCoverage","DomainException","Error","constructor","message","f","s","name","InsufficientBalanceException","currency","requestedAmount","availableAmount","walletId","code","toString","category","InsufficientReservedBalanceException","reservedAmount","TransactionLimitExceededException","limitType","limitAmount","userId","toLowerCase","KycRequiredException","currentKycStatus","requiredAction","InvalidKycStatusTransitionException","currentStatus","targetStatus","InvalidTransactionStateException","transactionId","currentState","targetState","TransactionAlreadyProcessedException","UnsupportedCurrencyException","currencyCode","UnsupportedCurrencyPairException","fromCurrency","toCurrency","StaleExchangeRateException","rateAge","UserNotFoundException","UserNotActiveException","WalletNotFoundException","InvalidAmountException","amount","reason","InvalidRecipientException","recipientId","SelfTransactionException","MinimumTransactionAmountException","minimumAmount","transactionType","MaximumTransactionAmountException","maximumAmount","ExchangeRateUnavailableException","provider","PaymentProcessingException"],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\exceptions\\DomainExceptions.ts"],"sourcesContent":["/**\n * Domain Exceptions\n * \n * Custom exceptions for domain business rule violations.\n * These exceptions represent business logic errors, not technical errors.\n */\n\nimport { Currency } from '../value-objects/Currency'\nimport { Money } from '../value-objects/Money'\nimport { UserId, TransactionId, WalletId } from '../value-objects/EntityId'\nimport { TransactionStatus, TransactionType } from '../entities/Transaction'\nimport { KycStatus } from '../entities/User'\n\n/**\n * Base class for all domain exceptions\n */\nabstract class DomainException extends Error {\n  abstract readonly code: string\n  abstract readonly category: 'BUSINESS_RULE' | 'VALIDATION' | 'AUTHORIZATION' | 'NOT_FOUND'\n\n  constructor(message: string) {\n    super(message)\n    this.name = this.constructor.name\n  }\n}\n\n/**\n * Insufficient balance exceptions\n */\nclass InsufficientBalanceException extends DomainException {\n  readonly code = 'INSUFFICIENT_BALANCE'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly currency: Currency,\n    public readonly requestedAmount: Money,\n    public readonly availableAmount: Money,\n    public readonly walletId?: WalletId\n  ) {\n    super(\n      `Insufficient ${currency.code} balance. ` +\n      `Requested: ${requestedAmount.toString()}, ` +\n      `Available: ${availableAmount.toString()}`\n    )\n  }\n}\n\nclass InsufficientReservedBalanceException extends DomainException {\n  readonly code = 'INSUFFICIENT_RESERVED_BALANCE'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly currency: Currency,\n    public readonly requestedAmount: Money,\n    public readonly reservedAmount: Money,\n    public readonly walletId?: WalletId\n  ) {\n    super(\n      `Insufficient ${currency.code} reserved balance. ` +\n      `Requested: ${requestedAmount.toString()}, ` +\n      `Reserved: ${reservedAmount.toString()}`\n    )\n  }\n}\n\n/**\n * Transaction limit exceptions\n */\nclass TransactionLimitExceededException extends DomainException {\n  readonly code = 'TRANSACTION_LIMIT_EXCEEDED'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly limitType: 'DAILY' | 'MONTHLY' | 'SINGLE' | 'WITHDRAWAL',\n    public readonly requestedAmount: Money,\n    public readonly limitAmount: Money,\n    public readonly userId: UserId\n  ) {\n    super(\n      `${limitType.toLowerCase()} transaction limit exceeded. ` +\n      `Requested: ${requestedAmount.toString()}, ` +\n      `Limit: ${limitAmount.toString()}`\n    )\n  }\n}\n\n/**\n * KYC-related exceptions\n */\nclass KycRequiredException extends DomainException {\n  readonly code = 'KYC_REQUIRED'\n  readonly category = 'AUTHORIZATION' as const\n\n  constructor(\n    public readonly userId: UserId,\n    public readonly currentKycStatus: KycStatus,\n    public readonly requiredAction: string\n  ) {\n    super(\n      `KYC verification required. Current status: ${currentKycStatus}. ` +\n      `Required action: ${requiredAction}`\n    )\n  }\n}\n\nclass InvalidKycStatusTransitionException extends DomainException {\n  readonly code = 'INVALID_KYC_STATUS_TRANSITION'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly currentStatus: KycStatus,\n    public readonly targetStatus: KycStatus,\n    public readonly userId: UserId\n  ) {\n    super(`Cannot transition KYC status from ${currentStatus} to ${targetStatus}`)\n  }\n}\n\n/**\n * Transaction state exceptions\n */\nclass InvalidTransactionStateException extends DomainException {\n  readonly code = 'INVALID_TRANSACTION_STATE'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly transactionId: TransactionId,\n    public readonly currentState: TransactionStatus,\n    public readonly targetState: TransactionStatus\n  ) {\n    super(`Cannot transition transaction from ${currentState} to ${targetState}`)\n  }\n}\n\nclass TransactionAlreadyProcessedException extends DomainException {\n  readonly code = 'TRANSACTION_ALREADY_PROCESSED'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly transactionId: TransactionId,\n    public readonly currentStatus: TransactionStatus\n  ) {\n    super(`Transaction ${transactionId.toString()} is already processed with status: ${currentStatus}`)\n  }\n}\n\n/**\n * Currency and exchange rate exceptions\n */\nclass UnsupportedCurrencyException extends DomainException {\n  readonly code = 'UNSUPPORTED_CURRENCY'\n  readonly category = 'VALIDATION' as const\n\n  constructor(public readonly currencyCode: string) {\n    super(`Currency ${currencyCode} is not supported`)\n  }\n}\n\nclass UnsupportedCurrencyPairException extends DomainException {\n  readonly code = 'UNSUPPORTED_CURRENCY_PAIR'\n  readonly category = 'VALIDATION' as const\n\n  constructor(\n    public readonly fromCurrency: Currency,\n    public readonly toCurrency: Currency\n  ) {\n    super(`Currency pair ${fromCurrency.code}/${toCurrency.code} is not supported`)\n  }\n}\n\nclass StaleExchangeRateException extends DomainException {\n  readonly code = 'STALE_EXCHANGE_RATE'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly fromCurrency: Currency,\n    public readonly toCurrency: Currency,\n    public readonly rateAge: number\n  ) {\n    super(\n      `Exchange rate for ${fromCurrency.code}/${toCurrency.code} is stale. ` +\n      `Age: ${rateAge} minutes`\n    )\n  }\n}\n\n/**\n * User and account exceptions\n */\nclass UserNotFoundException extends DomainException {\n  readonly code = 'USER_NOT_FOUND'\n  readonly category = 'NOT_FOUND' as const\n\n  constructor(public readonly userId: UserId) {\n    super(`User not found: ${userId.toString()}`)\n  }\n}\n\nclass UserNotActiveException extends DomainException {\n  readonly code = 'USER_NOT_ACTIVE'\n  readonly category = 'AUTHORIZATION' as const\n\n  constructor(public readonly userId: UserId) {\n    super(`User account is not active: ${userId.toString()}`)\n  }\n}\n\nclass WalletNotFoundException extends DomainException {\n  readonly code = 'WALLET_NOT_FOUND'\n  readonly category = 'NOT_FOUND' as const\n\n  constructor(\n    public readonly userId: UserId,\n    public readonly currency: Currency\n  ) {\n    super(`Wallet not found for user ${userId.toString()} and currency ${currency.code}`)\n  }\n}\n\n/**\n * Validation exceptions\n */\nclass InvalidAmountException extends DomainException {\n  readonly code = 'INVALID_AMOUNT'\n  readonly category = 'VALIDATION' as const\n\n  constructor(\n    public readonly amount: number,\n    public readonly reason: string\n  ) {\n    super(`Invalid amount ${amount}: ${reason}`)\n  }\n}\n\nclass InvalidRecipientException extends DomainException {\n  readonly code = 'INVALID_RECIPIENT'\n  readonly category = 'VALIDATION' as const\n\n  constructor(\n    public readonly recipientId: UserId,\n    public readonly reason: string\n  ) {\n    super(`Invalid recipient ${recipientId.toString()}: ${reason}`)\n  }\n}\n\nclass SelfTransactionException extends DomainException {\n  readonly code = 'SELF_TRANSACTION'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(public readonly userId: UserId) {\n    super(`Cannot send money to yourself: ${userId.toString()}`)\n  }\n}\n\n/**\n * Business rule exceptions\n */\nclass MinimumTransactionAmountException extends DomainException {\n  readonly code = 'MINIMUM_TRANSACTION_AMOUNT'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly requestedAmount: Money,\n    public readonly minimumAmount: Money,\n    public readonly transactionType: TransactionType\n  ) {\n    super(\n      `Transaction amount below minimum for ${transactionType}. ` +\n      `Requested: ${requestedAmount.toString()}, ` +\n      `Minimum: ${minimumAmount.toString()}`\n    )\n  }\n}\n\nclass MaximumTransactionAmountException extends DomainException {\n  readonly code = 'MAXIMUM_TRANSACTION_AMOUNT'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly requestedAmount: Money,\n    public readonly maximumAmount: Money,\n    public readonly transactionType: TransactionType\n  ) {\n    super(\n      `Transaction amount exceeds maximum for ${transactionType}. ` +\n      `Requested: ${requestedAmount.toString()}, ` +\n      `Maximum: ${maximumAmount.toString()}`\n    )\n  }\n}\n\n/**\n * External service exceptions\n */\nclass ExchangeRateUnavailableException extends DomainException {\n  readonly code = 'EXCHANGE_RATE_UNAVAILABLE'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly fromCurrency: Currency,\n    public readonly toCurrency: Currency,\n    public readonly provider: string\n  ) {\n    super(\n      `Exchange rate unavailable from ${provider} for ` +\n      `${fromCurrency.code}/${toCurrency.code}`\n    )\n  }\n}\n\nclass PaymentProcessingException extends DomainException {\n  readonly code = 'PAYMENT_PROCESSING_ERROR'\n  readonly category = 'BUSINESS_RULE' as const\n\n  constructor(\n    public readonly transactionId: TransactionId,\n    public readonly provider: string,\n    public readonly reason: string\n  ) {\n    super(\n      `Payment processing failed for transaction ${transactionId.toString()} ` +\n      `via ${provider}: ${reason}`\n    )\n  }\n}\n\n// Export all exceptions for easy importing\nexport {\n  DomainException,\n  InsufficientBalanceException,\n  InsufficientReservedBalanceException,\n  TransactionLimitExceededException,\n  KycRequiredException,\n  InvalidKycStatusTransitionException,\n  InvalidTransactionStateException,\n  TransactionAlreadyProcessedException,\n  UnsupportedCurrencyException,\n  UnsupportedCurrencyPairException,\n  StaleExchangeRateException,\n  UserNotFoundException,\n  UserNotActiveException,\n  WalletNotFoundException,\n  InvalidAmountException,\n  InvalidRecipientException,\n  SelfTransactionException,\n  MinimumTransactionAmountException,\n  MaximumTransactionAmountException,\n  ExchangeRateUnavailableException,\n  PaymentProcessingException\n}\n"],"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","ignoreList":[]}