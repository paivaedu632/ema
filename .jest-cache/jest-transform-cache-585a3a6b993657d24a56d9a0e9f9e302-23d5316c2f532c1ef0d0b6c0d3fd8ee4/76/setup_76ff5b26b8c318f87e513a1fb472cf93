ba6ada1cf2752bbc92a8a791bb16c2f0
"use strict";
/**
 * Jest setup file
 * Runs after the test framework is set up but before tests run
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Extend Jest matchers
expect.extend({
    toBeValidUUID(received) {
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        const pass = uuidRegex.test(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid UUID`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid UUID`,
                pass: false,
            };
        }
    },
    toBeValidEmail(received) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const pass = emailRegex.test(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid email`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid email`,
                pass: false,
            };
        }
    },
    toBeValidCurrency(received) {
        const validCurrencies = ['EUR', 'AOA'];
        const pass = validCurrencies.includes(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid currency`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid currency (EUR or AOA)`,
                pass: false,
            };
        }
    },
    toBeValidAmount(received) {
        const pass = typeof received === 'number' && received >= 0 && Number.isFinite(received);
        if (pass) {
            return {
                message: () => `expected ${received} not to be a valid amount`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected ${received} to be a valid amount (positive number)`,
                pass: false,
            };
        }
    },
    toHaveResponseTime(received, expected) {
        const pass = received <= expected;
        if (pass) {
            return {
                message: () => `expected response time ${received}ms to be greater than ${expected}ms`,
                pass: true,
            };
        }
        else {
            return {
                message: () => `expected response time ${received}ms to be less than or equal to ${expected}ms`,
                pass: false,
            };
        }
    }
});
// Global test configuration
globals_1.jest.setTimeout(30000); // 30 second timeout for all tests
// Mock console methods to reduce noise in tests
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
beforeAll(() => {
    // Suppress console.error and console.warn in tests unless explicitly needed
    console.error = globals_1.jest.fn();
    console.warn = globals_1.jest.fn();
});
afterAll(() => {
    // Restore original console methods
    console.error = originalConsoleError;
    console.warn = originalConsoleWarn;
});
// Global test utilities
global.testUtils = {
    // Helper to wait for a specific amount of time
    wait: (ms) => new Promise(resolve => setTimeout(resolve, ms)),
    // Helper to generate random test data
    randomString: (length = 10) => {
        const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let result = '';
        for (let i = 0; i < length; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    },
    // Helper to generate random email
    randomEmail: () => {
        const username = global.testUtils.randomString(8);
        const domain = global.testUtils.randomString(6);
        return `${username}@${domain}.test`;
    },
    // Helper to generate random amount
    randomAmount: (min = 1, max = 1000) => {
        return Math.round((Math.random() * (max - min) + min) * 100) / 100;
    }
};
console.log('ðŸ§ª Jest setup completed');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,