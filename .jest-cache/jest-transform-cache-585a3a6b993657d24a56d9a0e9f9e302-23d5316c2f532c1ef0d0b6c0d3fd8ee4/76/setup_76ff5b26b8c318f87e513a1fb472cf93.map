{"file":"C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\setup.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\setup.ts"],"sourcesContent":["/**\n * Jest setup file\n * Runs after the test framework is set up but before tests run\n */\n\nimport { jest } from '@jest/globals';\n\n// Extend Jest matchers\nexpect.extend({\n  toBeValidUUID(received: string) {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    const pass = uuidRegex.test(received);\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid UUID`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid UUID`,\n        pass: false,\n      };\n    }\n  },\n  \n  toBeValidEmail(received: string) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const pass = emailRegex.test(received);\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid email`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid email`,\n        pass: false,\n      };\n    }\n  },\n  \n  toBeValidCurrency(received: string) {\n    const validCurrencies = ['EUR', 'AOA'];\n    const pass = validCurrencies.includes(received);\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid currency`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid currency (EUR or AOA)`,\n        pass: false,\n      };\n    }\n  },\n  \n  toBeValidAmount(received: number) {\n    const pass = typeof received === 'number' && received >= 0 && Number.isFinite(received);\n    \n    if (pass) {\n      return {\n        message: () => `expected ${received} not to be a valid amount`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected ${received} to be a valid amount (positive number)`,\n        pass: false,\n      };\n    }\n  },\n  \n  toHaveResponseTime(received: number, expected: number) {\n    const pass = received <= expected;\n    \n    if (pass) {\n      return {\n        message: () => `expected response time ${received}ms to be greater than ${expected}ms`,\n        pass: true,\n      };\n    } else {\n      return {\n        message: () => `expected response time ${received}ms to be less than or equal to ${expected}ms`,\n        pass: false,\n      };\n    }\n  }\n});\n\n// Global test configuration\njest.setTimeout(30000); // 30 second timeout for all tests\n\n// Mock console methods to reduce noise in tests\nconst originalConsoleError = console.error;\nconst originalConsoleWarn = console.warn;\n\nbeforeAll(() => {\n  // Suppress console.error and console.warn in tests unless explicitly needed\n  console.error = jest.fn();\n  console.warn = jest.fn();\n});\n\nafterAll(() => {\n  // Restore original console methods\n  console.error = originalConsoleError;\n  console.warn = originalConsoleWarn;\n});\n\n// Global test utilities\nglobal.testUtils = {\n  // Helper to wait for a specific amount of time\n  wait: (ms: number) => new Promise(resolve => setTimeout(resolve, ms)),\n  \n  // Helper to generate random test data\n  randomString: (length: number = 10) => {\n    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  },\n  \n  // Helper to generate random email\n  randomEmail: () => {\n    const username = global.testUtils.randomString(8);\n    const domain = global.testUtils.randomString(6);\n    return `${username}@${domain}.test`;\n  },\n  \n  // Helper to generate random amount\n  randomAmount: (min: number = 1, max: number = 1000) => {\n    return Math.round((Math.random() * (max - min) + min) * 100) / 100;\n  }\n};\n\nconsole.log('ðŸ§ª Jest setup completed');\n\n// Type declarations for custom matchers\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toBeValidUUID(): R;\n      toBeValidEmail(): R;\n      toBeValidCurrency(): R;\n      toBeValidAmount(): R;\n      toHaveResponseTime(expected: number): R;\n    }\n  }\n  \n  var testUtils: {\n    wait: (ms: number) => Promise<void>;\n    randomString: (length?: number) => string;\n    randomEmail: () => string;\n    randomAmount: (min?: number, max?: number) => number;\n  };\n}\n"],"version":3}