{"version":3,"names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\src\\domain\\repositories\\UserRepository.ts"],"sourcesContent":["/**\n * User Repository Interface\n * \n * Defines the contract for user data access operations.\n * This interface abstracts the data layer from the domain layer.\n */\n\nimport { User, UserSnapshot } from '../entities/User'\nimport { UserId } from '../value-objects/EntityId'\n\nexport interface UserRepository {\n  /**\n   * Find user by ID\n   */\n  findById(id: UserId): Promise<User | null>\n\n  /**\n   * Find user by Clerk user ID\n   */\n  findByClerkId(clerkUserId: string): Promise<User | null>\n\n  /**\n   * Find user by email\n   */\n  findByEmail(email: string): Promise<User | null>\n\n  /**\n   * Save user (create or update)\n   */\n  save(user: User): Promise<void>\n\n  /**\n   * Delete user\n   */\n  delete(id: UserId): Promise<void>\n\n  /**\n   * Check if user exists by email\n   */\n  existsByEmail(email: string): Promise<boolean>\n\n  /**\n   * Check if user exists by Clerk ID\n   */\n  existsByClerkId(clerkUserId: string): Promise<boolean>\n\n  /**\n   * Find users by KYC status\n   */\n  findByKycStatus(status: string): Promise<User[]>\n\n  /**\n   * Find users created within date range\n   */\n  findByCreatedDateRange(startDate: Date, endDate: Date): Promise<User[]>\n\n  /**\n   * Count total users\n   */\n  count(): Promise<number>\n\n  /**\n   * Find users with pagination\n   */\n  findWithPagination(\n    offset: number,\n    limit: number,\n    orderBy?: 'created_at' | 'updated_at' | 'email',\n    orderDirection?: 'asc' | 'desc'\n  ): Promise<{\n    users: User[]\n    total: number\n    hasMore: boolean\n  }>\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","ignoreList":[]}