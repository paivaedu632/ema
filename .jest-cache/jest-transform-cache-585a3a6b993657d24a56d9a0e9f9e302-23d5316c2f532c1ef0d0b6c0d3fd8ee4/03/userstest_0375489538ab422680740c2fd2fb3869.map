{"file":"C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\unit\\users.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\User\\Documents\\GitHub\\ema\\tests\\unit\\users.test.ts"],"sourcesContent":["/**\n * User Management Endpoint Tests\n * Tests for /api/v1/users/* endpoints\n */\n\nimport { describe, test, expect, beforeAll, afterAll, beforeEach } from '@jest/globals';\nimport { testUtils, TestUser } from '../utils';\n\ndescribe('User Management Endpoints', () => {\n  let testUser: TestUser;\n  let searchTargetUser: TestUser;\n\n  beforeAll(async () => {\n    // Create test users\n    testUser = await testUtils.createUser({\n      email: 'user-search-test@emapay.test',\n      metadata: { purpose: 'User Search Testing' }\n    });\n\n    // Create a user to search for\n    searchTargetUser = await testUtils.createUser({\n      email: 'search-target@emapay.test',\n      metadata: { \n        purpose: 'Search Target',\n        firstName: 'João',\n        lastName: 'Silva',\n        phone: '+244900123456'\n      }\n    });\n  });\n\n  afterAll(async () => {\n    // Clean up test users\n    await testUtils.cleanup();\n  });\n\n  describe('GET /api/v1/users/search - Valid Queries', () => {\n    test('should search users by email', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=search-target@emapay.test',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeGreaterThan(0);\n      \n      const foundUser = searchResults.find((user: any) => \n        user.email === 'search-target@emapay.test'\n      );\n      expect(foundUser).toBeDefined();\n      expect(foundUser.userId).toBe(searchTargetUser.id);\n      \n      // Assert response time\n      testUtils.assertResponseTime(response, 200);\n    });\n\n    test('should search users by partial email', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=search-target',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeGreaterThan(0);\n      \n      const foundUser = searchResults.find((user: any) => \n        user.email === 'search-target@emapay.test'\n      );\n      expect(foundUser).toBeDefined();\n    });\n\n    test('should search users by phone number', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=+244900123456',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeGreaterThan(0);\n      \n      const foundUser = searchResults.find((user: any) => \n        user.phone === '+244900123456'\n      );\n      expect(foundUser).toBeDefined();\n      expect(foundUser.userId).toBe(searchTargetUser.id);\n    });\n\n    test('should search users by partial phone number', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=900123456',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeGreaterThan(0);\n      \n      const foundUser = searchResults.find((user: any) => \n        user.phone === '+244900123456'\n      );\n      expect(foundUser).toBeDefined();\n    });\n\n    test('should search users by first name', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=João',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeGreaterThan(0);\n      \n      const foundUser = searchResults.find((user: any) => \n        user.firstName === 'João'\n      );\n      expect(foundUser).toBeDefined();\n      expect(foundUser.userId).toBe(searchTargetUser.id);\n    });\n\n    test('should search users by last name', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=Silva',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeGreaterThan(0);\n      \n      const foundUser = searchResults.find((user: any) => \n        user.lastName === 'Silva'\n      );\n      expect(foundUser).toBeDefined();\n      expect(foundUser.userId).toBe(searchTargetUser.id);\n    });\n\n    test('should search users by full name', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=João Silva',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeGreaterThan(0);\n      \n      const foundUser = searchResults.find((user: any) => \n        user.firstName === 'João' && user.lastName === 'Silva'\n      );\n      expect(foundUser).toBeDefined();\n      expect(foundUser.userId).toBe(searchTargetUser.id);\n    });\n\n    test('should handle case-insensitive search', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=joão silva',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeGreaterThan(0);\n      \n      const foundUser = searchResults.find((user: any) => \n        user.firstName === 'João' && user.lastName === 'Silva'\n      );\n      expect(foundUser).toBeDefined();\n    });\n\n    test('should limit search results', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=test&limit=5',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeLessThanOrEqual(5);\n    });\n\n    test('should handle pagination', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=test&limit=2&offset=0',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBeLessThanOrEqual(2);\n    });\n  });\n\n  describe('GET /api/v1/users/search - Invalid Queries', () => {\n    test('should return empty array for non-existent user', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=nonexistent@example.com',\n        testUser\n      );\n      \n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      \n      expect(Array.isArray(searchResults)).toBe(true);\n      expect(searchResults.length).toBe(0);\n    });\n\n    test('should return 400 for missing query parameter', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search',\n        testUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('query');\n    });\n\n    test('should return 400 for empty query parameter', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=',\n        testUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('query');\n    });\n\n    test('should return 400 for query too short', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=a',\n        testUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('minimum');\n    });\n\n    test('should return 400 for query too long', async () => {\n      const longQuery = 'a'.repeat(101); // Assuming 100 char limit\n      const response = await testUtils.get(\n        `/api/v1/users/search?q=${longQuery}`,\n        testUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('maximum');\n    });\n\n    test('should return 400 for invalid limit parameter', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=test&limit=invalid',\n        testUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('limit');\n    });\n\n    test('should return 400 for negative limit', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=test&limit=-1',\n        testUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('limit');\n    });\n\n    test('should return 400 for limit too high', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=test&limit=1000',\n        testUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('limit');\n    });\n\n    test('should return 400 for invalid offset parameter', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=test&offset=invalid',\n        testUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('offset');\n    });\n\n    test('should return 400 for negative offset', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=test&offset=-1',\n        testUser\n      );\n      \n      testUtils.assertErrorResponse(response, 400);\n      expect(response.body.error).toContain('offset');\n    });\n\n    test('should handle malformed email queries gracefully', async () => {\n      const malformedEmails = [\n        'invalid-email',\n        '@invalid.com',\n        'test@',\n        'test@@invalid.com',\n        'test@invalid@.com'\n      ];\n\n      for (const email of malformedEmails) {\n        const response = await testUtils.get(\n          `/api/v1/users/search?q=${encodeURIComponent(email)}`,\n          testUser\n        );\n        \n        // Should return empty results, not error\n        const searchResults = testUtils.assertSuccessResponse(response, 200);\n        expect(Array.isArray(searchResults)).toBe(true);\n      }\n    });\n\n    test('should handle special characters in query', async () => {\n      const specialChars = ['!@#$%^&*()', '<script>', 'DROP TABLE', '\\'OR 1=1--'];\n\n      for (const query of specialChars) {\n        const response = await testUtils.get(\n          `/api/v1/users/search?q=${encodeURIComponent(query)}`,\n          testUser\n        );\n        \n        // Should return empty results, not error\n        const searchResults = testUtils.assertSuccessResponse(response, 200);\n        expect(Array.isArray(searchResults)).toBe(true);\n      }\n    });\n  });\n\n  describe('User Search Privacy', () => {\n    test('should return limited user data in search results', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=search-target@emapay.test',\n        testUser\n      );\n\n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      const foundUser = searchResults[0];\n\n      // Should include public fields\n      expect(foundUser).toHaveProperty('userId');\n      expect(foundUser).toHaveProperty('firstName');\n      expect(foundUser).toHaveProperty('lastName');\n      expect(foundUser).toHaveProperty('email');\n\n      // Should NOT include sensitive fields\n      expect(foundUser).not.toHaveProperty('password');\n      expect(foundUser).not.toHaveProperty('pin');\n      expect(foundUser).not.toHaveProperty('pinHash');\n      expect(foundUser).not.toHaveProperty('accessToken');\n      expect(foundUser).not.toHaveProperty('refreshToken');\n      expect(foundUser).not.toHaveProperty('privateKey');\n      expect(foundUser).not.toHaveProperty('internalId');\n    });\n\n    test('should not expose full phone numbers to non-contacts', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=João',\n        testUser\n      );\n\n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      const foundUser = searchResults.find((user: any) => user.firstName === 'João');\n\n      if (foundUser.phone) {\n        // Phone should be masked or partially hidden\n        expect(foundUser.phone).toMatch(/\\*+/); // Contains asterisks for masking\n        expect(foundUser.phone).not.toBe('+244900123456'); // Not full number\n      }\n    });\n\n    test('should not return user own data in search results', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=user-search-test@emapay.test',\n        testUser\n      );\n\n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n\n      // User should not find themselves in search results\n      const selfResult = searchResults.find((user: any) =>\n        user.userId === testUser.id\n      );\n      expect(selfResult).toBeUndefined();\n    });\n\n    test('should limit search results to prevent data mining', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=test&limit=100',\n        testUser\n      );\n\n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n\n      // Should enforce maximum limit (e.g., 20 users max)\n      expect(searchResults.length).toBeLessThanOrEqual(20);\n    });\n\n    test('should not expose user creation dates or metadata', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=search-target@emapay.test',\n        testUser\n      );\n\n      const searchResults = testUtils.assertSuccessResponse(response, 200);\n      const foundUser = searchResults[0];\n\n      // Should NOT include metadata\n      expect(foundUser).not.toHaveProperty('createdAt');\n      expect(foundUser).not.toHaveProperty('updatedAt');\n      expect(foundUser).not.toHaveProperty('lastLogin');\n      expect(foundUser).not.toHaveProperty('metadata');\n      expect(foundUser).not.toHaveProperty('purpose');\n    });\n  });\n\n  describe('User Search Authorization', () => {\n    test('should require authentication', async () => {\n      const response = await testUtils.publicGet('/api/v1/users/search?q=test');\n\n      testUtils.assertErrorResponse(response, 401);\n      expect(response.body.error).toContain('authorization');\n    });\n\n    test('should reject invalid JWT tokens', async () => {\n      const response = await testUtils.testWithInvalidToken(\n        'GET',\n        '/api/v1/users/search?q=test'\n      );\n\n      testUtils.assertErrorResponse(response, 401);\n      expect(response.body.error).toContain('token');\n    });\n\n    test('should reject expired JWT tokens', async () => {\n      const response = await testUtils.testWithExpiredToken(\n        'GET',\n        '/api/v1/users/search?q=test'\n      );\n\n      testUtils.assertErrorResponse(response, 401);\n      expect(response.body.error).toContain('expired');\n    });\n\n    test('should work with valid JWT token', async () => {\n      const response = await testUtils.get(\n        '/api/v1/users/search?q=test',\n        testUser\n      );\n\n      // Should succeed with valid token\n      testUtils.assertSuccessResponse(response, 200);\n    });\n  });\n\n  describe('User Search Performance', () => {\n    test('should respond within 200ms for simple queries', async () => {\n      const { response, passed } = await testUtils.testPerformance(\n        'GET',\n        '/api/v1/users/search?q=test',\n        200,\n        testUser\n      );\n\n      expect(passed).toBe(true);\n      testUtils.assertSuccessResponse(response, 200);\n    });\n\n    test('should respond within 200ms for complex queries', async () => {\n      const { response, passed } = await testUtils.testPerformance(\n        'GET',\n        '/api/v1/users/search?q=João Silva&limit=10&offset=0',\n        200,\n        testUser\n      );\n\n      expect(passed).toBe(true);\n      testUtils.assertSuccessResponse(response, 200);\n    });\n\n    test('should handle concurrent search requests', async () => {\n      const responses = await testUtils.testConcurrency(\n        'GET',\n        '/api/v1/users/search?q=test',\n        10,\n        testUser\n      );\n\n      expect(responses).toHaveLength(10);\n\n      responses.forEach(response => {\n        testUtils.assertSuccessResponse(response, 200);\n        testUtils.assertResponseTime(response, 300); // Allow more time for concurrent requests\n      });\n    });\n\n    test('should maintain performance with large result sets', async () => {\n      const { response, passed } = await testUtils.testPerformance(\n        'GET',\n        '/api/v1/users/search?q=test&limit=20',\n        250,\n        testUser\n      );\n\n      expect(passed).toBe(true);\n      testUtils.assertSuccessResponse(response, 200);\n    });\n\n    test('should cache frequent searches for better performance', async () => {\n      // First request\n      const start1 = Date.now();\n      const response1 = await testUtils.get(\n        '/api/v1/users/search?q=search-target@emapay.test',\n        testUser\n      );\n      const time1 = Date.now() - start1;\n\n      testUtils.assertSuccessResponse(response1, 200);\n\n      // Second request (should be faster due to caching)\n      const start2 = Date.now();\n      const response2 = await testUtils.get(\n        '/api/v1/users/search?q=search-target@emapay.test',\n        testUser\n      );\n      const time2 = Date.now() - start2;\n\n      testUtils.assertSuccessResponse(response2, 200);\n\n      // Second request should be faster (or at least not significantly slower)\n      expect(time2).toBeLessThanOrEqual(time1 * 1.5);\n    });\n  });\n});\n"],"version":3}