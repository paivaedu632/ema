33a222e51f8fd721795dc4aa5cc16c8c
"use strict";
/**
 * User Management Endpoint Tests
 * Tests for /api/v1/users/* endpoints
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const utils_1 = require("../utils");
(0, globals_1.describe)('User Management Endpoints', () => {
    let testUser;
    let searchTargetUser;
    (0, globals_1.beforeAll)(async () => {
        // Create test users
        testUser = await utils_1.testUtils.createUser({
            email: 'user-search-test@emapay.test',
            metadata: { purpose: 'User Search Testing' }
        });
        // Create a user to search for
        searchTargetUser = await utils_1.testUtils.createUser({
            email: 'search-target@emapay.test',
            metadata: {
                purpose: 'Search Target',
                firstName: 'João',
                lastName: 'Silva',
                phone: '+244900123456'
            }
        });
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test users
        await utils_1.testUtils.cleanup();
    });
    (0, globals_1.describe)('GET /api/v1/users/search - Valid Queries', () => {
        (0, globals_1.test)('should search users by email', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=search-target@emapay.test', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeGreaterThan(0);
            const foundUser = searchResults.find((user) => user.email === 'search-target@emapay.test');
            (0, globals_1.expect)(foundUser).toBeDefined();
            (0, globals_1.expect)(foundUser.userId).toBe(searchTargetUser.id);
            // Assert response time
            utils_1.testUtils.assertResponseTime(response, 200);
        });
        (0, globals_1.test)('should search users by partial email', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=search-target', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeGreaterThan(0);
            const foundUser = searchResults.find((user) => user.email === 'search-target@emapay.test');
            (0, globals_1.expect)(foundUser).toBeDefined();
        });
        (0, globals_1.test)('should search users by phone number', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=+244900123456', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeGreaterThan(0);
            const foundUser = searchResults.find((user) => user.phone === '+244900123456');
            (0, globals_1.expect)(foundUser).toBeDefined();
            (0, globals_1.expect)(foundUser.userId).toBe(searchTargetUser.id);
        });
        (0, globals_1.test)('should search users by partial phone number', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=900123456', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeGreaterThan(0);
            const foundUser = searchResults.find((user) => user.phone === '+244900123456');
            (0, globals_1.expect)(foundUser).toBeDefined();
        });
        (0, globals_1.test)('should search users by first name', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=João', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeGreaterThan(0);
            const foundUser = searchResults.find((user) => user.firstName === 'João');
            (0, globals_1.expect)(foundUser).toBeDefined();
            (0, globals_1.expect)(foundUser.userId).toBe(searchTargetUser.id);
        });
        (0, globals_1.test)('should search users by last name', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=Silva', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeGreaterThan(0);
            const foundUser = searchResults.find((user) => user.lastName === 'Silva');
            (0, globals_1.expect)(foundUser).toBeDefined();
            (0, globals_1.expect)(foundUser.userId).toBe(searchTargetUser.id);
        });
        (0, globals_1.test)('should search users by full name', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=João Silva', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeGreaterThan(0);
            const foundUser = searchResults.find((user) => user.firstName === 'João' && user.lastName === 'Silva');
            (0, globals_1.expect)(foundUser).toBeDefined();
            (0, globals_1.expect)(foundUser.userId).toBe(searchTargetUser.id);
        });
        (0, globals_1.test)('should handle case-insensitive search', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=joão silva', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeGreaterThan(0);
            const foundUser = searchResults.find((user) => user.firstName === 'João' && user.lastName === 'Silva');
            (0, globals_1.expect)(foundUser).toBeDefined();
        });
        (0, globals_1.test)('should limit search results', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=test&limit=5', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeLessThanOrEqual(5);
        });
        (0, globals_1.test)('should handle pagination', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=test&limit=2&offset=0', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBeLessThanOrEqual(2);
        });
    });
    (0, globals_1.describe)('GET /api/v1/users/search - Invalid Queries', () => {
        (0, globals_1.test)('should return empty array for non-existent user', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=nonexistent@example.com', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            (0, globals_1.expect)(searchResults.length).toBe(0);
        });
        (0, globals_1.test)('should return 400 for missing query parameter', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('query');
        });
        (0, globals_1.test)('should return 400 for empty query parameter', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('query');
        });
        (0, globals_1.test)('should return 400 for query too short', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=a', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('minimum');
        });
        (0, globals_1.test)('should return 400 for query too long', async () => {
            const longQuery = 'a'.repeat(101); // Assuming 100 char limit
            const response = await utils_1.testUtils.get(`/api/v1/users/search?q=${longQuery}`, testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('maximum');
        });
        (0, globals_1.test)('should return 400 for invalid limit parameter', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=test&limit=invalid', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('limit');
        });
        (0, globals_1.test)('should return 400 for negative limit', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=test&limit=-1', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('limit');
        });
        (0, globals_1.test)('should return 400 for limit too high', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=test&limit=1000', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('limit');
        });
        (0, globals_1.test)('should return 400 for invalid offset parameter', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=test&offset=invalid', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('offset');
        });
        (0, globals_1.test)('should return 400 for negative offset', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=test&offset=-1', testUser);
            utils_1.testUtils.assertErrorResponse(response, 400);
            (0, globals_1.expect)(response.body.error).toContain('offset');
        });
        (0, globals_1.test)('should handle malformed email queries gracefully', async () => {
            const malformedEmails = [
                'invalid-email',
                '@invalid.com',
                'test@',
                'test@@invalid.com',
                'test@invalid@.com'
            ];
            for (const email of malformedEmails) {
                const response = await utils_1.testUtils.get(`/api/v1/users/search?q=${encodeURIComponent(email)}`, testUser);
                // Should return empty results, not error
                const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
                (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            }
        });
        (0, globals_1.test)('should handle special characters in query', async () => {
            const specialChars = ['!@#$%^&*()', '<script>', 'DROP TABLE', '\'OR 1=1--'];
            for (const query of specialChars) {
                const response = await utils_1.testUtils.get(`/api/v1/users/search?q=${encodeURIComponent(query)}`, testUser);
                // Should return empty results, not error
                const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
                (0, globals_1.expect)(Array.isArray(searchResults)).toBe(true);
            }
        });
    });
    (0, globals_1.describe)('User Search Privacy', () => {
        (0, globals_1.test)('should return limited user data in search results', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=search-target@emapay.test', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            const foundUser = searchResults[0];
            // Should include public fields
            (0, globals_1.expect)(foundUser).toHaveProperty('userId');
            (0, globals_1.expect)(foundUser).toHaveProperty('firstName');
            (0, globals_1.expect)(foundUser).toHaveProperty('lastName');
            (0, globals_1.expect)(foundUser).toHaveProperty('email');
            // Should NOT include sensitive fields
            (0, globals_1.expect)(foundUser).not.toHaveProperty('password');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('pin');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('pinHash');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('accessToken');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('refreshToken');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('privateKey');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('internalId');
        });
        (0, globals_1.test)('should not expose full phone numbers to non-contacts', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=João', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            const foundUser = searchResults.find((user) => user.firstName === 'João');
            if (foundUser.phone) {
                // Phone should be masked or partially hidden
                (0, globals_1.expect)(foundUser.phone).toMatch(/\*+/); // Contains asterisks for masking
                (0, globals_1.expect)(foundUser.phone).not.toBe('+244900123456'); // Not full number
            }
        });
        (0, globals_1.test)('should not return user own data in search results', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=user-search-test@emapay.test', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            // User should not find themselves in search results
            const selfResult = searchResults.find((user) => user.userId === testUser.id);
            (0, globals_1.expect)(selfResult).toBeUndefined();
        });
        (0, globals_1.test)('should limit search results to prevent data mining', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=test&limit=100', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            // Should enforce maximum limit (e.g., 20 users max)
            (0, globals_1.expect)(searchResults.length).toBeLessThanOrEqual(20);
        });
        (0, globals_1.test)('should not expose user creation dates or metadata', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=search-target@emapay.test', testUser);
            const searchResults = utils_1.testUtils.assertSuccessResponse(response, 200);
            const foundUser = searchResults[0];
            // Should NOT include metadata
            (0, globals_1.expect)(foundUser).not.toHaveProperty('createdAt');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('updatedAt');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('lastLogin');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('metadata');
            (0, globals_1.expect)(foundUser).not.toHaveProperty('purpose');
        });
    });
    (0, globals_1.describe)('User Search Authorization', () => {
        (0, globals_1.test)('should require authentication', async () => {
            const response = await utils_1.testUtils.publicGet('/api/v1/users/search?q=test');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('authorization');
        });
        (0, globals_1.test)('should reject invalid JWT tokens', async () => {
            const response = await utils_1.testUtils.testWithInvalidToken('GET', '/api/v1/users/search?q=test');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('token');
        });
        (0, globals_1.test)('should reject expired JWT tokens', async () => {
            const response = await utils_1.testUtils.testWithExpiredToken('GET', '/api/v1/users/search?q=test');
            utils_1.testUtils.assertErrorResponse(response, 401);
            (0, globals_1.expect)(response.body.error).toContain('expired');
        });
        (0, globals_1.test)('should work with valid JWT token', async () => {
            const response = await utils_1.testUtils.get('/api/v1/users/search?q=test', testUser);
            // Should succeed with valid token
            utils_1.testUtils.assertSuccessResponse(response, 200);
        });
    });
    (0, globals_1.describe)('User Search Performance', () => {
        (0, globals_1.test)('should respond within 200ms for simple queries', async () => {
            const { response, passed } = await utils_1.testUtils.testPerformance('GET', '/api/v1/users/search?q=test', 200, testUser);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertSuccessResponse(response, 200);
        });
        (0, globals_1.test)('should respond within 200ms for complex queries', async () => {
            const { response, passed } = await utils_1.testUtils.testPerformance('GET', '/api/v1/users/search?q=João Silva&limit=10&offset=0', 200, testUser);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertSuccessResponse(response, 200);
        });
        (0, globals_1.test)('should handle concurrent search requests', async () => {
            const responses = await utils_1.testUtils.testConcurrency('GET', '/api/v1/users/search?q=test', 10, testUser);
            (0, globals_1.expect)(responses).toHaveLength(10);
            responses.forEach(response => {
                utils_1.testUtils.assertSuccessResponse(response, 200);
                utils_1.testUtils.assertResponseTime(response, 300); // Allow more time for concurrent requests
            });
        });
        (0, globals_1.test)('should maintain performance with large result sets', async () => {
            const { response, passed } = await utils_1.testUtils.testPerformance('GET', '/api/v1/users/search?q=test&limit=20', 250, testUser);
            (0, globals_1.expect)(passed).toBe(true);
            utils_1.testUtils.assertSuccessResponse(response, 200);
        });
        (0, globals_1.test)('should cache frequent searches for better performance', async () => {
            // First request
            const start1 = Date.now();
            const response1 = await utils_1.testUtils.get('/api/v1/users/search?q=search-target@emapay.test', testUser);
            const time1 = Date.now() - start1;
            utils_1.testUtils.assertSuccessResponse(response1, 200);
            // Second request (should be faster due to caching)
            const start2 = Date.now();
            const response2 = await utils_1.testUtils.get('/api/v1/users/search?q=search-target@emapay.test', testUser);
            const time2 = Date.now() - start2;
            utils_1.testUtils.assertSuccessResponse(response2, 200);
            // Second request should be faster (or at least not significantly slower)
            (0, globals_1.expect)(time2).toBeLessThanOrEqual(time1 * 1.5);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,