name: EmaPay API Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  test:
    name: Run Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit, integration, security, performance]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.test
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.test
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test:unit

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration

      - name: Run security tests
        if: matrix.test-type == 'security'
        run: |
          npm run test -- tests/unit/security.test.ts
          npm run test -- tests/unit/pin-security.test.ts

      - name: Run performance tests
        if: matrix.test-type == 'performance'
        run: npm run test -- tests/unit/performance.test.ts

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results.json
            *.log

  coverage:
    name: Code Coverage Analysis
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.test
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.test
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run coverage analysis
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Coverage comment
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

  performance-benchmark:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.test
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.test
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run performance benchmarks
        run: npm run test:benchmark

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmarks
          path: performance-reports/

      - name: Comment benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read latest benchmark report
            const reportsDir = 'performance-reports';
            const files = fs.readdirSync(reportsDir).filter(f => f.endsWith('.md'));
            
            if (files.length > 0) {
              const latestReport = files.sort().pop();
              const reportContent = fs.readFileSync(path.join(reportsDir, latestReport), 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## Performance Benchmark Results\n\n${reportContent}`
              });
            }

  test-data-management:
    name: Test Data Management
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env.test
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.test
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Clean test data
        run: |
          node -e "
            const { testUtils } = require('./tests/utils');
            testUtils.cleanup().then(() => {
              console.log('Test data cleaned successfully');
            }).catch(err => {
              console.error('Test data cleanup failed:', err);
              process.exit(1);
            });
          "

      - name: Verify test environment
        run: |
          node -e "
            const { testUtils } = require('./tests/utils');
            testUtils.verifyTestEnvironment().then(() => {
              console.log('Test environment verified');
            }).catch(err => {
              console.error('Test environment verification failed:', err);
              process.exit(1);
            });
          "

  notification:
    name: Test Results Notification
    runs-on: ubuntu-latest
    needs: [test, coverage, security-scan]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.coverage.result == 'success' && needs.security-scan.result == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              description: 'All tests passed successfully',
              context: 'EmaPay Test Suite'
            });

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.coverage.result == 'failure' || needs.security-scan.result == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'failure',
              description: 'Some tests failed',
              context: 'EmaPay Test Suite'
            });

      - name: Create issue on failure
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.test.result == 'failure' || needs.coverage.result == 'failure' || needs.security-scan.result == 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Test Suite Failure - ${new Date().toISOString().split('T')[0]}`,
              body: `
                ## Test Suite Failure Report
                
                **Commit**: ${context.sha}
                **Branch**: ${context.ref}
                **Workflow**: ${context.workflow}
                
                **Failed Jobs**:
                - Test: ${needs.test.result}
                - Coverage: ${needs.coverage.result}
                - Security Scan: ${needs.security-scan.result}
                
                Please investigate and fix the failing tests.
                
                [View Workflow Run](${context.payload.repository.html_url}/actions/runs/${context.runId})
              `,
              labels: ['bug', 'test-failure', 'priority-high']
            });
