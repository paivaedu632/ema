name: EmaPay Order Book Database Tests

on:
  push:
    branches: [ master, main ]
    paths:
      - 'supabase/migrations/**'
      - 'tests/database/**'
      - '.github/workflows/database-tests.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'supabase/migrations/**'
      - 'tests/database/**'
      - '.github/workflows/database-tests.yml'

env:
  POSTGRES_PASSWORD: postgres
  POSTGRES_USER: postgres
  POSTGRES_DB: emapay_test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/emapay_test

jobs:
  database-tests:
    name: Order Book Database Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: emapay_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Supabase CLI
        run: |
          npm install -g supabase@latest
          supabase --version

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Setup test database
        run: |
          # Create extensions
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_test -c "CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";"
          
          # Set timezone
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_test -c "SET timezone = 'UTC';"

      - name: Run database migrations
        run: |
          # Apply all migrations in order
          for migration in supabase/migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Applying migration: $migration"
              PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_test -f "$migration"
            fi
          done

      - name: Verify database schema
        run: |
          echo "Verifying core tables exist..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_test -c "
            SELECT table_name FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('users', 'wallets', 'transactions', 'order_book', 'trades', 'fund_reservations')
            ORDER BY table_name;
          "

      - name: Verify order book functions exist
        run: |
          echo "Verifying order book functions..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_test -c "
            SELECT routine_name, routine_type 
            FROM information_schema.routines 
            WHERE routine_schema = 'public' 
            AND routine_name IN (
              'place_order', 'cancel_order', 'match_order', 'execute_trade_enhanced',
              'get_best_prices', 'create_fund_reservation', 'release_fund_reservation',
              'calculate_trade_fees', 'create_transaction_record'
            )
            ORDER BY routine_name;
          "

      - name: Install test dependencies
        run: |
          npm install --save-dev jest @types/jest ts-jest pg @types/pg
          npm install --save-dev @jest/globals

      - name: Run database function tests
        run: |
          npm run test:database
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Verify all 66 tests pass
        run: |
          echo "Ensuring all 66 database tests pass..."
          test_output=$(npm run test:database 2>&1)
          echo "$test_output"

          # Check for the specific success pattern
          if echo "$test_output" | grep -q "Tests:.*66 passed, 66 total"; then
            echo "✅ SUCCESS: All 66 database tests passed!"
          else
            echo "❌ FAILURE: Not all 66 tests passed"
            exit 1
          fi
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Database cleanup verification
        run: |
          echo "Verifying no test data remains..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_test -c "
            SELECT 
              'users' as table_name, COUNT(*) as count FROM users
            UNION ALL
            SELECT 'wallets', COUNT(*) FROM wallets
            UNION ALL  
            SELECT 'order_book', COUNT(*) FROM order_book
            UNION ALL
            SELECT 'trades', COUNT(*) FROM trades
            UNION ALL
            SELECT 'fund_reservations', COUNT(*) FROM fund_reservations;
          "

  schema-validation:
    name: Database Schema Validation
    runs-on: ubuntu-latest
    needs: database-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: emapay_schema_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup database for schema validation
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_schema_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_schema_test -c "CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";"

      - name: Apply migrations and validate constraints
        run: |
          # Apply migrations
          for migration in supabase/migrations/*.sql; do
            if [ -f "$migration" ]; then
              PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_schema_test -f "$migration"
            fi
          done
          
          # Validate foreign key constraints
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_schema_test -c "
            SELECT 
              tc.table_name, 
              tc.constraint_name, 
              tc.constraint_type,
              kcu.column_name,
              ccu.table_name AS foreign_table_name,
              ccu.column_name AS foreign_column_name
            FROM information_schema.table_constraints AS tc 
            JOIN information_schema.key_column_usage AS kcu
              ON tc.constraint_name = kcu.constraint_name
              AND tc.table_schema = kcu.table_schema
            JOIN information_schema.constraint_column_usage AS ccu
              ON ccu.constraint_name = tc.constraint_name
              AND ccu.table_schema = tc.table_schema
            WHERE tc.constraint_type = 'FOREIGN KEY'
            AND tc.table_schema = 'public'
            ORDER BY tc.table_name, tc.constraint_name;
          "

      - name: Validate indexes and performance
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_schema_test -c "
            SELECT 
              schemaname,
              tablename,
              indexname,
              indexdef
            FROM pg_indexes 
            WHERE schemaname = 'public'
            AND tablename IN ('order_book', 'trades', 'wallets', 'transactions')
            ORDER BY tablename, indexname;
          "

  migration-rollback-test:
    name: Migration Rollback Tests
    runs-on: ubuntu-latest
    needs: schema-validation
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: emapay_rollback_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test migration rollback safety
        run: |
          # Setup database
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_rollback_test -c "CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";"
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_rollback_test -c "CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";"
          
          # Apply migrations up to a certain point
          migration_count=0
          for migration in supabase/migrations/*.sql; do
            if [ -f "$migration" ]; then
              echo "Applying migration: $migration"
              PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_rollback_test -f "$migration"
              migration_count=$((migration_count + 1))
              
              # Test that we can still query basic tables after each migration
              PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_rollback_test -c "
                SELECT COUNT(*) as table_count 
                FROM information_schema.tables 
                WHERE table_schema = 'public';
              "
            fi
          done
          
          echo "Successfully applied $migration_count migrations"

      - name: Verify data integrity constraints
        run: |
          # Test that constraints prevent invalid data
          echo "Testing order book constraints..."
          
          # This should fail due to constraints
          set +e
          PGPASSWORD=postgres psql -h localhost -U postgres -d emapay_rollback_test -c "
            INSERT INTO order_book (user_id, order_type, side, base_currency, quote_currency, quantity, status)
            VALUES ('00000000-0000-0000-0000-000000000000', 'invalid_type', 'buy', 'EUR', 'AOA', -100, 'pending');
          " 2>/dev/null
          
          if [ $? -eq 0 ]; then
            echo "ERROR: Invalid data was accepted by database constraints"
            exit 1
          else
            echo "SUCCESS: Database constraints properly rejected invalid data"
          fi
          set -e
